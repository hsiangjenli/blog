{"posts":[{"title":"[tutorial] GitHub + PicGo + VSCode Extension","text":"Before You StartMake sure you have following: A Github Token with access to your repo A repo to store images GitHUbGenerate GitHub Token Go to Settings/Developer settings/Personal access tokens/Token (classic) Click Generate new token (classic) Set a name for the token to identify it easily and choose No expiration Select the required scopes for the token Set Up RepoTo ensure your images are accessible, set your repo to public. VScode Extension Install PicGo extension in VScode Set Pic Bed: Current to github Set Pic Bed &gt; Github: Repo to your previously created public repo. Format is {username}/{repo_name} Set Pic Bed: Uploader to github Set Pic Bed &gt; Github: Branch to the branch of your public repo Set Pic Bed &gt; Github: Path (Optional). If you want to store images in specific folder (e.g. images). Make sure to include a trailing slash (/), otherwise, it will be used as a prefix for image names Set Pic Bed &gt; Github: Token to the Github token you created earlier TroubleshootingIf you see the following error, it means xclip is not installed: 1PicGo: xclip not found! Please install xclip before run picgo. To fix this, install xclip using the following command: 1sudo apt install xclip","link":"/blog/tutorial_github_picgo_vscode/"},{"title":"[note] Window 11 + Ubuntu 雙系統安裝紀錄","text":"🎒 預先準備💻 電腦資訊 型號：VivoBook 14 X1405VA-0041K 系統：Windows 11 CPU：i5-13500H SSD：NVMe SAMSUNG MZVL4512HBLU-00BTW 進入 BIOS 快捷鍵：F2 選擇開機碟快捷鍵：F12 🎯 目標目前的 SSD 已經安裝上 win 11，目標是將 1 TB 的 SSD 做磁碟分割後安裝上 Ubuntu 20.04 LTS - 350 GB - 650 GB 💻 操作流程🚨 注意事項 根據網路上的教學文章，大部分的修改都是在 BIOS 選單內 但是，現在有些電腦的廠商會把這些選項關掉（避免使用者把電腦弄壞） 這也讓更改變得麻煩，最後可能會搞到需要重設 windows，需把電腦備份好 關掉 Bitlocker 確認 BIOS 已更新至最新版本 最新版本的 BIOS 通常包含修復錯誤和改進硬體相容性的功能，有助於避免安裝過程中的不必要問題 將 BIOS 的 Boot Mode 設定為 UEFI UEFI 是現代系統的標準開機模式，具有更好的硬碟分割支援、快速啟動和安全功能。Ubuntu 和 Windows 都建議使用 UEFI 而非傳統的 BIOS（CSM） 關閉 Secure Boot Secure Boot 的作用是防止未授權的操作系統啟動，但某些 Ubuntu 發行版本或自訂驅動程式可能無法正確通過驗證，導致安裝失敗 在 BIOS 中找到 Secure Boot 設定，將其設為 Disabled 關閉 Fast Boot（BIOS &amp; Windows Control Panel） Fast Boot 會跳過部分硬體初始化過程，可能導致 USB 開機盤無法被檢測到，從而影響 Ubuntu 的安裝 進入 BIOS，找到 Fast Boot 設定，將其設為 Disabled 在 Windows 中的 Control Panel 找到 Hardware and Sound 底下的 Power Option，把 Fast Starup 關閉 確認 SATA Configuration 設定為 AHCI 模式（這邊最有可能出現問題，BIOS 有些會沒有這些選項可以更改） 不能是 Raid 關閉 CSM（Compatibility Support Module） CSM 是用於支援傳統 BIOS 的相容性模式，關閉後系統會專注於使用 UEFI 啟動，減少可能的相容性問題 在 BIOS 中找到 CSM 設定，將其設為 Disabled Step 1 磁碟分割 首先會在 windows 上做磁碟分割，分成 windows 跟 ubuntu 兩個系統 在電腦上搜尋 Create and format hard disk partitions Step 2 關閉快速啟動 Windows - Fast Startup BIOS - Fast Boot Windows 在 windows 中 的 control panel 找到管理電源的選項，把 fast startup 關掉 Step 3 跟 Intel RST 有關的 driver 刪除 [^ubuntu_rst] 這個步驟會讓之後電腦開機的時候失敗，會需要整台電腦重設（需要有一顆強壯的心臟 💔💔💔…） 但是重設完之後才可以順利把 RST 關掉（把硬碟從 Raid 改成 AHCI），否則 ubuntu 在安裝的時候會讀取不到這個 SSD 按 Win + X 快捷鍵後找到 Device Manager 進去裡面找到 Storage Controllers，在裡面會看到 Intel RST 的 driver 這個就是安裝 ubuntu 過程中導致無法偵測到 SSD 的罪魁禍首！！！！ 請按照 Ubuntu Documentation - RST &amp; Ubuntu installation 裡面的步驟一步一步的卸載 Intel RST driver 按 Win + R，搜尋 regedit HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\iaStorV\\ 找到 Start 選項，把值改成 0 找到 StartOverride 把值改成 0 HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\storahci\\ 找到 Start 選項，把值改成 0 找到 StartOverride 把值改成 0 把 Intel RST driver 卸載 把 Intel RST driver 完全 uninstall，然後重新開機 重新開機的過程會藍屏，上面是顯示 INACCESSIBLE_BOOT_DEVICE，解決方式就是重新設定整台電腦 重設完之後 一樣按 Win + X 進入 Device Manager 看 Storage Controllers 裡面確認 Intel RST 是否還在 Step 4 安裝 Ubuntu使用隨身碟安裝 Ubuntu 按 F12 選擇隨身碟當作開機碟 因為已經預先切好磁碟區，Installation Type 就選 Something else 一路按確認即可，後續安裝不太會有問題 驅動問題 過往安裝桌機跟自己舊筆電的時候都沒遇到 wifi 驅動問題 但是這台 vivobook 遇到了，最快的解法是直接買一個支援 linux 的無線連接器 TP-Link TL-WN725N22 專有名詞 CSM - Compatibility Support Module Intel RST - Intel Rapid Storage Technology [^ubuntu_rst]: Ubuntu Documentation - RST &amp; Ubuntu installationhttps://help.ubuntu.com/rst/","link":"/blog/note_chinese_u2004_win11/"},{"title":"[note] Want to install the latest version from a GitHub repo using pip","text":"devel - stands for development If you want to install a specific branch from GitHub, instead of the stable version from PyPI: Repo URL : https://github.com/username/repository.git Repo Branch : devel The command to pip install this repo: 1pip install git+{repo_url}@{branch_name} 1pip install git+https://github.com/username/repository.git@devel","link":"/blog/note_pip_github_branch/"},{"title":"[note] Fish?","text":"FISH (Friendly Interactive SHell) Installation on MacOS1brew install fish Using Fish ShellBy typing fish to enter FISH’s shell Reference 如何在 Linux 中安裝、配置和使用 Fish Shell？ Finally, a command line shell for the 90s","link":"/blog/note_fish/"},{"title":"[note] MarkItDown: A tool for smoothly converting docx and pptx into markdown","text":"How MarkItDown works? Down below are the module use for MarkItDown 12345678910111213141516dependencies = [ &quot;beautifulsoup4&quot;, &quot;requests&quot;, &quot;mammoth&quot;, &quot;markdownify&quot;, &quot;numpy&quot;, &quot;python-pptx&quot;, &quot;pandas&quot;, &quot;openpyxl&quot;, &quot;pdfminer.six&quot;, &quot;puremagic&quot;, &quot;pydub&quot;, &quot;youtube-transcript-api&quot;, &quot;SpeechRecognition&quot;, &quot;pathvalidate&quot;,] mammoth https://pypi.org/project/mammoth/Mammoth is a tool designed for converting documents like MS Word, Google Docs, and LibreOffice files into HTML python-pptx https://github.com/scanny/python-pptxA Python library that can create/read/update .pptx file openpyxl https://openpyxl.readthedocs.io/en/stable/A Python library to read/write Excel 2010 xlsx xlsm xltx xltm file pdfminer https://github.com/pdfminer/pdfminer.sixPdfminer.six is a community-maintained version that was forked from original PDFMiner. This module helps users extract information from PDF files. pydub https://github.com/jiaaro/pydubMake it easy for you to manipulate audio in a simple way youtube-transcript-api https://github.com/jdepoix/youtube-transcript-apiA Python API allows you to get the transcript for a given YouTube video SpeechRecognition https://github.com/Uberi/speech_recognition/tree/masterSupport for speech-to-text engines like Google Cloud Speech API, Wit.ai, Whisper, etc markdownify https://github.com/matthewwithanm/python-markdownifyConvert HTML file into Markdown pathvalidate https://github.com/thombashi/pathvalidateA Python library to sanitize and validate strings such as filenames, file paths, etc puremagic https://github.com/cdgriffith/puremagic/tree/master Puremagic is a file type detection tool that can identify the type of an input file without relying on its extension. Since file extensions can be easily changed, using them alone to identify file type can be risky. This module defines a set of rules to read the file content and determine its type. 123456789101112131415# puremagic/magic_data.json{ &quot;extension_only&quot;: [ [&quot;&quot;, 0, &quot;.txt&quot;, &quot;text/plain&quot;, &quot;Text File&quot;], [&quot;&quot;, 0, &quot;.log&quot;, &quot;text/plain&quot;, &quot;Logger File&quot;], [&quot;&quot;, 0, &quot;.yaml&quot;, &quot;application/x-yaml&quot;, &quot;YAML File&quot;], [&quot;&quot;, 0, &quot;.yml&quot;, &quot;application/x-yaml&quot;, &quot;YAML File&quot;], [&quot;&quot;, 0, &quot;.toml&quot;, &quot;application/toml&quot;, &quot;TOML File&quot;], [&quot;&quot;, 0, &quot;.py&quot;, &quot;text/x-python&quot;, &quot;Python File&quot;], [&quot;&quot;, 0, &quot;.pyc&quot;, &quot;application/x-python&quot;, &quot;Python Complied File&quot;], [&quot;&quot;, 0, &quot;.pyd&quot;, &quot;application/x-python&quot;, &quot;Python Complied File&quot;], [&quot;&quot;, 0, &quot;.python_history&quot;, &quot;text/plain&quot;, &quot;Python History File&quot;], [&quot;&quot;, 0, &quot;.bat&quot;, &quot;application/x-script&quot;, &quot;Windows BAT file&quot;], [&quot;&quot;, 0, &quot;.gitconfig&quot;, &quot;text/plain&quot;, &quot;Git Ignore File&quot;],...","link":"/blog/note_markitdown/"},{"title":"[note] Fixing Git Installation Issues in apache&#x2F;airflow:2.10.2 Docker Image","text":"When using the apache/airflow:2.10.2 image to install packages from GitHub, a permission error may occur. The solution is to install git using the root user, then switch back to the airflow user to install the package. 12345678FROM apache/airflow:slim-2.10.2USER rootRUN apt-get update &amp;&amp; apt-get install -y gitUSER airflowCOPY requirements.txt requirements.txtRUN pip install --no-cache-dir -r requirements.txt","link":"/blog/note_airflow_docker_permission_error/"},{"title":"[note] Enhancing Code Clarity with TypedDict","text":"The reason why we meed to use TypedDict In general, we use dataclasses and Pydantic to store data. However, using dictionaries to store complex data is often an easier approach. Nevertheless, without predefined fields, it becomes difficult for later developers to maintain the code effectively. Using TypedDict allows the IDE to provide developers with suggestions, enhancing their development efficiency. But, TypedDict have some limitations; it cannot enforce strict type checking. 12345678from typing import TypedDictimport datetimeclass News(TypedDict): title: str create_date: datetime.datetime content: str Reference 【一分钟快学】提高 Python 3 代码质量：掌握 TypedDict 实现精确的类型安全字典","link":"/blog/note_typedict/"},{"title":"[tutorial] Enhancing Commit Messages with commitollama: A Guide for VSCode and Local LLM Integration","text":"commitollama commitollama is an alternative to GitHub Copilot’s commit message generator, powered by open-source models such as Llama (Llama3, Gemma, Mistral, Phi3, etc. For projects where confidentiality is a concern, commitollama allows you to use a local Large Language Model (LLM), ensuring privacy. How to use Thanks to its contributors, commitollama can be directly integrated into VSCode by installing the extension and setting up Ollama. Install the extension in VSCode. Install Ollama to integrate the LLM. Installing OllamaRun the following command to install Ollama: 1curl -fsSL https://ollama.com/install.sh | sh After installation, you can run Ollama using: 1ollama This will display a list of available commands: 12345678910111213141516171819202122Usage: ollama [flags] ollama [command]Available Commands: serve Start ollama create Create a model from a Modelfile show Show information for a model run Run a model pull Pull a model from a registry push Push a model to a registry list List models ps List running models cp Copy a model rm Remove a model help Help about any commandFlags: -h, --help help for ollama -v, --version Show version informationUse &quot;ollama [command] --help&quot; for more information about a command. Download the Phi3 model (3.8b) by running: 1ollama pull phi3:3.8b Start the Ollama service using: 1ollama serve If you encounter the error message Error: listen tcp 127.0.0.1:11434: bind: address already in use, you can find a solution here . To restart Ollama, stop the current service and relaunch it: 12systemctl stop ollama.serviceollama serve To prevent the model from being deleted after downloading, refer to this discussion here . Setting Up VSCode After installing the extension, use a custom model for commit message generation. Press the button in the interface to automatically generate the commit message.","link":"/blog/tutorial_commitollama/"},{"title":"[tutorial] Automating Commit Messages with Ollama: A Quick Guide","text":"Run ollama Start a container1docker run -d -v ollama:/root/.ollama -p 11434:11434 --name ollama-commit ollama/ollama:0.3.6 Enter the Docker container1docker exec -it ollama-commit bash Ollama CLI123456789101112131415161718192021222324ollama&gt;&gt;&gt; Usage:&gt;&gt;&gt; ollama [flags]&gt;&gt;&gt; ollama [command]&gt;&gt;&gt; &gt;&gt;&gt; Available Commands:&gt;&gt;&gt; serve Start ollama&gt;&gt;&gt; create Create a model from a Modelfile&gt;&gt;&gt; show Show information for a model&gt;&gt;&gt; run Run a model&gt;&gt;&gt; pull Pull a model from a registry&gt;&gt;&gt; push Push a model to a registry&gt;&gt;&gt; list List models&gt;&gt;&gt; ps List running models&gt;&gt;&gt; cp Copy a model&gt;&gt;&gt; rm Remove a model&gt;&gt;&gt; help Help about any command&gt;&gt;&gt; &gt;&gt;&gt; Flags:&gt;&gt;&gt; -h, --help help for ollama&gt;&gt;&gt; -v, --version Show version information&gt;&gt;&gt; &gt;&gt;&gt; Use &quot;ollama [command] --help&quot; for more information about a command. Pull modelClick here to view the available models. 1ollama run gemma2:2b Start a chat1&gt;&gt;&gt; Send a message (/? for help) Exit the chatType /bye to exit the chat. Combine Ollama and opencommit to generate commit messagesInstall opencommit1npm install -g opencommit Generate commit messages with local ollama server1OCO_AI_PROVIDER='ollama/gemma2:2b' opencommit output: 1234567891011121314151617181920212223242526┌ open-commit│◇ 1 staged files: README.md│◇ 📝 Commit message generated│└ Generated commit message:——————————————————feat(README.md): add link to Ollama website and examples of running models——————————————————│◇ Confirm the commit message?│ No│◇ Do you want to regenerate the message ?│ Yes│◇ 📝 Commit message generated│└ Generated commit message:——————————————————feat(README.md): add link to Ollama website and examples of model usage in README.md Error code 127123456789101112Error: llama runner process has terminated: exit status 127&gt;&gt;&gt; [GIN] 2024/08/28 - 18:43:24 | 200 | 68.455µs | 127.0.0.1 | HEAD &quot;/&quot;&gt;&gt;&gt; [GIN] 2024/08/28 - 18:43:24 | 200 | 7.845273ms | 127.0.0.1 | POST &quot;/api/show&quot;&gt;&gt;&gt; time=2024-08-28T18:43:24.392Z level=INFO source=memory.go:309 msg=&quot;offload to cpu&quot; layers.requested=-1 layers.model=33 layers.offload=0 layers.split=&quot;&quot; memory.available=&quot;[7.3 GiB]&quot; memory.required.full=&quot;5.5 GiB&quot; memory.required.partial=&quot;0 B&quot; memory.required.kv=&quot;1.0 GiB&quot; memory.required.allocations=&quot;[5.5 GiB]&quot; memory.weights.total=&quot;4.7 GiB&quot; memory.weights.repeating=&quot;4.6 GiB&quot; memory.weights.nonrepeating=&quot;105.0 MiB&quot; memory.graph.full=&quot;560.0 MiB&quot; memory.graph.partial=&quot;585.0 MiB&quot;&gt;&gt;&gt; time=2024-08-28T18:43:24.392Z level=INFO source=server.go:391 msg=&quot;starting llama server&quot; cmd=&quot;/tmp/ollama731275887/runners/cpu/ollama_llama_server --model /root/.ollama/models/blobs/sha256-ff82381e2bea77d91c1b824c7afb83f6fb73e9f7de9dda631bcdbca564aa5435 --ctx-size 8192 --batch-size 512 --embedding --log-disable --no-mmap --parallel 4 --port 33357&quot;&gt;&gt;&gt; time=2024-08-28T18:43:24.392Z level=INFO source=sched.go:450 msg=&quot;loaded runners&quot; count=1&gt;&gt;&gt; time=2024-08-28T18:43:24.393Z level=INFO source=server.go:591 msg=&quot;waiting for llama runner to start responding&quot;&gt;&gt;&gt; time=2024-08-28T18:43:24.393Z level=INFO source=server.go:625 msg=&quot;waiting for server to become available&quot; status=&quot;llm server error&quot;&gt;&gt;&gt; /tmp/ollama731275887/runners/cpu/ollama_llama_server: error while loading shared libraries: libllama.so: cannot open shared object file: No such file or directory&gt;&gt;&gt; time=2024-08-28T18:43:24.644Z level=ERROR source=sched.go:456 msg=&quot;error loading llama server&quot; error=&quot;llama runner process has terminated: exit status 127&quot;[GIN] 2024/08/28 - 18:43:24 | 500 | 266.021797ms | 127.0.0.1 | POST &quot;/api/chat&quot; The error code occurs when the Docker image version is greater than 0.3.6. Therefore, you need to pull the ollama image with version 0.3.6 and run the container. Click here to view the discussion.","link":"/blog/tutorial_ollama_opencommit/"},{"title":"[note] Installation of Golang (PATH)","text":"Install Go on macOS Install Go using Homebrew: 1brew install go Verify the Installation:After installation, check if Go binaries are located in ~/go/bin/: 1ls ~/go/bin/ Update PATH Temporarily:If the Go binaries are present, temporarily add ~/go/bin to your PATH: 1export PATH=$PATH:~/go/bin Update PATH Permanently:To make this change permanent, add the following line to your ~/.zshrc file: 12echo 'export PATH=$PATH:~/go/bin' &gt;&gt; ~/.zshrcsource ~/.zshrc","link":"/blog/note_go/"},{"title":"[tutorial] PEX Unpacked: Building and Executing Python Executables with Ease","text":"What is “PEX”?The full name of PEX is Python Executable. This is an open-source tool for building a virtual environment to execute your Python code. However, be cautious when using PEX because it does not include a Python interpreter; thus, your computer must have a Python environment installed. The process of executing .pexWhen you run a .pex file, the system reads the shebang line at the top of the file, #!/usr/bin/env python, to invoke the Python interpreter to execute the script. PracticeInstall PEX1pip install pex Enter Interpretable pex environemtEasy way 123456789101112# Enter an interpretable Pex environment without specifying a Python versionpex # Enter an interpretable Pex environment specifying a specific Python versionpex --python=python3.12 # specific python version---Pex 2.16.1 ephemeral hermetic environment with no dependencies.Exit the repl (type quit()) and run `pex -h` for Pex CLI help.Python 3.11.4 (main, Jul 5 2023, 08:40:20) [Clang 14.0.6 ] on darwinType &quot;help&quot;, &quot;pex&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.&gt;&gt;&gt; Advanced 12345678# Specifying requirementspex pandas---Pex 2.16.1 ephemeral hermetic environment with 1 requirement and 6 activated distributions.Python 3.11.4 (main, Jul 5 2023, 08:40:20) [Clang 14.0.6 ] on darwinType &quot;help&quot;, &quot;pex&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.&gt;&gt;&gt; import pandas as pd Package .py into pex file123456789# demo.pyimport pandas as pddef main(): print(f&quot;Hello, World! The pandas version is {pd.__version__}&quot;)if __name__ == &quot;__main__&quot;: main() 1pex -D . -e demo:main -o demo.pex -r requirements.txt 1234# Execute PEX script./demo.pex&gt;&gt;&gt; Hello, World! The pandas version is 2.2.2 -D: Source directory -e: Entry point for the PEX application -o: Output file name for the PEX file -r: Specifies requirements file that lists the dependencies Reference 探索PEX：高效且可移植的Python环境解决方案 Specifying entry points","link":"/blog/tutorial_pex_unpacked/"},{"title":"[reflection] “How to Survive the Fall” - Michelle Yeoh Addresses the Harvard Law School Class of 2023","text":"https://youtu.be/PZ7YERWPftA?si=5RpTYUj1nzmDjCmv How to survive the fall Stay loose Know your limits Find your people Know your limitsMichelle Yeoh emphasizes the importance of understanding both your internal and external limits, as this knowledge can guide your actions and decisions. Internal keep you humble motivated give you boundaries to respect External (limit that are set for you by others) give your boundaries to bust through Quotations I trained in my mind to be still, to silence the whisper of self-doubt. 我訓練自己保持平靜，以平息自我懷疑的低語 I trained in my mind 思想或內心層面上進行自我訓練 to be still 保持平靜，意指靜下心來，使自己不受干擾 to silence the whisper 以平息…的低語 描述了減少內心自我懷疑的聲音 of self-doubt 自我懷疑 低語的來源是內心的不安 Limitations set by yourself give you boundaries to respect; limitations set by others give you boundaries to bust through. Learning how to fall teaches you how to land and learning to land gives you the courage to jump higher. The truth is I could not have done any of this alone. My achievements are the results of those around me who offered and continue to offer support and belief. There are times where as much as I don’t want to let myself down, I don’t want to let them down even more. I stand on the shoulders of those who have come before me and I am energized and inspired by those who come after me. I am honored to have been one small voice at the beginning of your journey.","link":"/blog/reflection_michelleY_at_harvard_2023/"},{"title":"[note] Epub 介紹","text":"介紹ePUB（Electronic Publication）是在 2007 由國際數位出版論壇（International Digital Publishing Forum, IDPF） 優點 支援不同載具、硬體 支援 HTML、CSS（客製化不同） 核心概念 - 自動排版因應多種的載具（手機、平板、電腦…）可以自動調整最合適的字體大小 具體使用技術 XHTML DTBook（專為視力不佳讀者設計的特殊格式） 格式規定 OPS（Open Publication Structure） OPF（Open Packaging Format） OCF（OEBPS Container Format） 相關工具 w3c/epubcheck The conformance checker for EPUB publications 專有名詞統整 縮寫 全名 介紹 IDPF International Digital Publishing Forum 目前已跟 W3C 合併 W3C World Wide Web Consortium An international community that develops open standards to ensure the long-term growth of the Web DAISY Digital Accessible Information System A technical standard for digital audiobooks, periodicals, and computerized text DTBook Digital Talking Book Reference EPUB 3 Overview CG 數位學習網 &gt; InDesign 教學 &gt; 認識 EPUB 電子書 wiki/DTBook","link":"/blog/note_epub/"},{"title":"[note] pdb in python","text":"Why?pdb is an abbreviation for the Python Debugger. The reasons why you should use pdb include the following: Tracing the execution of your code Identifying errors in your code Testing your code Understanding the code How to use? command usage h help w where n until next breakpoint s steps into func c continue q quit Reference Python Quick Tip: Debugger and breakpoint() Faster and Easier Python Debugging with breakpoint() and PDB How to Debug Your Python Code with the Python Debugger (pdb) Python Debugger - Cheat Sheets Python 的偵錯神器 – breakpoint 和 pdb","link":"/blog/note_pdb/"},{"title":"[tutorial] How to use psutil to monitor CPU and memory usage in python","text":"What is psutil?psutil is an open source package for python, which can help us to get the information of the system (CPU, memory, disks, network etc..). The installation of psutil1pip install psutil Usefull functions in psutilCPU1234psutil.cpu_count() # get the number of CPUpsutil.cpu_percent() # get the usage of all CPUpsutil.cpu_percent(percpu=True) # get the usage of per CPUpsutil.cpu_percent(interval=1) # get the usage of all CPU in 1 second, using interval will get more robust result Memory1234567info = psutil.virtual_memory()# total memoryinfo.total / 1024 / 1024 / 1024 # bytes -&gt; GB# the usage of memoryinfo.percent MacOS1# svmem(total=25769803776, available=7726628864, percent=70.0, used=9045114880, free=791134208, active=6949453824, inactive=6915768320, wired=2095661056) Ubuntu12# will get more information like buffers, cached etc..# svmem(total=33541988352, available=25899790336, percent=22.8, used=7087771648, free=2703233024, active=15287881728, inactive=14264188928, buffers=965103616, cached=22785880064, shared=8265728, slab=904495104) How to integrate psutil into our code?We can use psutil to monitor each function cpu and memory usage by using decorator. 1234567891011121314151617import psutildef monitor(func): def wrapper(*args, **kwargs): process = psutil.Process() cur_func_pid = process.pid process = psutil.Process(cur_func_pid) func(*args, **kwargs) cpu_usage = process.cpu_percent(interval=0.01) memory_usage = process.memory_info().rss / 1024 / 1024 / 1024 # bytes -&gt; GB print(f&quot;CPU usage: {cpu_usage}%&quot;) print(f&quot;Memory usage: {memory_usage}GB&quot;) return wrapper Example12345678@monitordef example_code(): import numpy as np for i in range(100): np.random.rand(100, 100, 100)example_code() Reference Python常用库之psutil使用指南 简单介绍psutil库（virtual_memory()、cpu_percent() Python System Monitoring and Profiling with the psutil Module Psutil module in Python Administrative Tasks for Oracle Machine Learning for Python","link":"/blog/tutorial_psutil/"},{"title":"[tutorial] Build your own python package","text":"Why Build Your Own Python Package?As projects grow in size, maintaing code scattered across different directories becomes increasingly challenges for programmers. How to build your own Python Package?https://github.com/NTUST-SiMS-Lab/tutorial-simple-pypkg setup.py pyproject.toml 1234# setup.pyfrom setuptools import setup, find_packagessetup(name=&quot;ntust_simslab&quot;, version=&quot;0.13&quot;, packages=find_packages()) 12345678910111213141516# pyproject.toml[tool.poetry]name = &quot;ntust_simslab&quot;version = &quot;0.13&quot;description = &quot;A simple example for building a Python package.&quot;authors = [&quot;Hsiang-Jen Li &lt;hsiangjenli@gmail.com&gt;&quot;]readme = &quot;README.md&quot;packages = [{include = &quot;ntust_simslab&quot;}][tool.poetry.dependencies]python = &quot;^3.8&quot;requests = &quot;^2.28.2&quot;[build-system]requires = [&quot;poetry-core&quot;]build-backend = &quot;poetry.core.masonry.api&quot; Publish to pypiYou need to have an account - https://pypi.org/","link":"/blog/tutorial_pypi_pkg/"},{"title":"[note] Free online course","text":"A List of OCW. Website(certificate) 60 Best FREE Online Courses with Certificates in 2021 20個免費修課免費拿證書的自學平台 [2021] Massive List of Thousands of Free Certificates and Badges class central 10 Best Software Testing Certifications To Take In 2021 IBM IBM SkillsBuild for Students cognitiveclass.ai Data Analysis with Python Google 數位行銷基礎知識完整版 [2021] 600+ Google Free Certificates and Badges AMAZOM AWS training and certification INTEL Intel AI Courses Intel Courses MICROSOFT Microsoft Learn Monogo DB MongoDB for Python Developers UNIVERSITYEnglish Stanford Lagunita Stanford Online coursera (with certificate and financial assistant) edX OTHERS jovian freecodecamp philanthropy Test Automation University sololearn khanacademy skillup GeeksforGeeks OpenEDG Academy Program (OAP) greatlearning badgr Tidy Data in Python Mini-Course Ethics of AI Elements of AI Introduction to Statistics for Data Science upGrade stepik Future learn lambda test Learn Python for Data Science Getting Started with Neural Networks Getting started with Decision Trees Introduction to Natural Language Processing Machine Learning Certification Course for Beginners Introduction to Data Science Data Analytics Certification Course CS50’s Introduction to Artificial Intelligence with Python Free Python program from Zero to Hero Chinese OpenEdu - https://www.openedu.tw/ Ewant - https://www.ewant.org/ Badge Credly - https://www.credly.com/earner/earned","link":"/blog/note_ocw/"},{"title":"[note]The installation of GitHub Copilot CLI","text":"1npm install -g @githubnext/github-copilot-cli 1Set-ExecutionPolicy RemoteSigned -Scope CurrentUser 1github-copilot-cli auth 12# test for cligithub-copilot-cli what-the-shell how to delete branch 12345678910111213 # output ──────────────────── Command ────────────────────git branch -d &lt;branch&gt; ────────────────── Explanation ──────────────────○ git branch is used to list branches. ◆ -d &lt;branch&gt; deletes the branch &lt;branch&gt;. ✅ Run this command 📝 Revise query&gt; ❌ Cancel","link":"/blog/note_installation_of_github_cli/"},{"title":"[tutorial] Combining Shell Script and Python for Efficient Automation","text":"🚀 Example-112# demo-1.pyprint(&quot;This is demo 1.&quot;) How write and run shell script Write a shell script similar to the example below and save it as run.sh 12# run.shpython demo-1.py Open Git Bash in the Terminal bash run.sh 🚀 Example-212345678# demo-2.pystring = input(&quot;type something.....&quot;)print(f&quot;&quot;&quot; String = {string}&quot;&quot;&quot;) 123# run.shecho &quot;hello world - 1&quot; | python demo-2.pyecho &quot;hello cat - 2&quot; | python demo-2.py 💡Error run.sh: line 1: python: command not found Configure the path to your Python executable To find the path of your Python exe, you can use the command where python123# run.shPYTHON=/mnt/c/Miniconda3/python.exe&quot;$PYTHON&quot; demo-1.py","link":"/blog/tutorial_shell_script_and_python/"},{"title":"[note] Efficient Mind Mapping with Markmap: A Markdown-Based VScode Extension","text":"Here are the steps to use a VS Code Extension to convert Markdown syntax to Mindmap Install this extension on VS Code 123456789101112131415161718192021# **My Education**## Vocational high school### KFHS### Applied Foreign Languages## Bachelor### NKUST### Department of Money and Banking## Master### NTUST### Department of Industrial Management#### Data Science#### Introduction to Blockchain and Its Applications#### Industrial Internet of Things and Operational Technology Security#### Artificial Intelligence Technologies and Business Applications#### Machine Learning#### Sustainable Management for the Enterprises#### Production Management Preview","link":"/blog/note_markmap/"},{"title":"[note] Cython 基礎知識","text":"Cython什麼是Cython？ Chat GPT:Cython是一種基於Python的靜態編譯器，可以將Python代碼轉換成C語言代碼，進而編譯成機器碼，從而提高Python代碼的運行速度和效率。Cython既保留了Python的簡單易用和動態特性，同時也支持C語言的靜態類型聲明和高效內存管理，是一種非常強大的Python優化工具。Cython還可以用於編寫Python擴展、簡化C/C++代碼、加速數值計算、並行運算等方面的應用。 Cython的優點 執行速度快 語法簡單 靜態聲明 兼容性高 應用場景 讓 Python 執行更快 簡化繁雜的 C 語法，改用 Python 的寫法，增加維護、可讀性 安裝和配置1pip install cython 1sudo apt install gcc Python和Cython的區別 特性 Python Cython 靜態類型聲明 不支持 支持 靜態編譯 不支持 支持 運行速度 較慢 較快 內存使用 較高 較低 與C/C++代碼集成 需要使用Cython或其他庫 直接支持 優化效果 較弱 較強 Cython中的靜態型別 Python Cython bool bint int long char short int long long long float float double long double complex float complex double complex bytes str unicode char * std::string Reference What are all the types available in Cython? 常用的Cython指令 pyximport 直接從Cython代碼中引入模塊或函數 cdef 聲明Cython中的C變量和函數 cpdef 定義既可被Python調用又可被Cython調用的函數 cimport import .pyx .pxd .pxi 的檔案 Reference Cython中def,cdef,cpdef的区别 第13篇：Cython封装C++类接口","link":"/blog/note_cython_basic/"},{"title":"[note] 開源專案 License","text":"The MIT License (MIT) 被授權人權利允許任何人以任何方式使用、修改和分發代碼，包括商業用途，但作者不對代碼負責。 被授權人義務在軟體和軟體的所有副本中都必須包含以上著作權聲明和本許可聲明。 GNU General Public License (GNU GPL) 要求任何使用或分發代碼的人都必須使用相同的許可證並公開他們的修改。 Apache License 允許任何人以任何方式使用、修改和分發代碼，包括商業用途，但作者對代碼有版權並保留某些權利 Berkeley Software Distribution license (BSD) 與 MIT 許可證類似，允許任何人以任何方式使用、修改和分發代碼，包括商業用途，但作者不對代碼負責。","link":"/blog/note_open_source_license/"},{"title":"[tutorial] Setting up Miniconda on Ubuntu","text":"1sudo wget -c https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh 1sudo chmod +x Miniconda3-latest-Linux-x86_64.sh 1./Miniconda3-latest-Linux-x86_64.sh 12conda activateconda env list Reference Setting up Miniconda on Ubuntu","link":"/blog/tutorial_ubuntu_miniconda/"},{"title":"[note] Gatsby Usage","text":"安裝 gatsby12npm install -g gatsby-cligatsby --version Commands (Gatsby CLI) Themegatsby-starter-blog123gatsby new hjl https://github.com/gatsbyjs/gatsby-starter-blogcd hjlgatsby develop http://localhost:8000/ gatsby-starter-julia12gatsby new RN https://github.com/niklasmtj/gatsby-starter-juliacd rn Error npm WARN old lockfile The package-lock.json file was created with an old version of npm Error: Command failed with exit code 1: npm install #27548 npm-upgrade 1--legacy-peer-deps","link":"/blog/note_gatsby/"}],"tags":[{"name":"docker","slug":"docker","link":"/blog/tags/docker/"},{"name":"ubuntu","slug":"ubuntu","link":"/blog/tags/ubuntu/"},{"name":"windows","slug":"windows","link":"/blog/tags/windows/"},{"name":"intel rst","slug":"intel-rst","link":"/blog/tags/intel-rst/"},{"name":"python","slug":"python","link":"/blog/tags/python/"},{"name":"epub","slug":"epub","link":"/blog/tags/epub/"},{"name":"linux","slug":"linux","link":"/blog/tags/linux/"},{"name":"static-site","slug":"static-site","link":"/blog/tags/static-site/"},{"name":"gatsby","slug":"gatsby","link":"/blog/tags/gatsby/"},{"name":"go","slug":"go","link":"/blog/tags/go/"},{"name":"vs-code","slug":"vs-code","link":"/blog/tags/vs-code/"},{"name":"note","slug":"note","link":"/blog/tags/note/"},{"name":"python, markdown","slug":"python-markdown","link":"/blog/tags/python-markdown/"},{"name":"ocw","slug":"ocw","link":"/blog/tags/ocw/"},{"name":"github","slug":"github","link":"/blog/tags/github/"},{"name":"git","slug":"git","link":"/blog/tags/git/"},{"name":"pip","slug":"pip","link":"/blog/tags/pip/"},{"name":"ollama","slug":"ollama","link":"/blog/tags/ollama/"},{"name":"picgo","slug":"picgo","link":"/blog/tags/picgo/"}],"categories":[{"name":"tag1","slug":"tag1","link":"/blog/categories/tag1/"},{"name":"simslab","slug":"tag1/simslab","link":"/blog/categories/tag1/simslab/"}],"pages":[{"title":"","text":"@import url('https://fonts.googleapis.com/css2?family=Lato:ital,wght@0,100;0,300;0,400;0,700;0,900;1,100;1,300;1,400;1,700;1,900&display=swap'); @font-face { font-family: 'jf-openhuninn'; src: url('https://hsiangjenli.github.io/static/font/jf-openhuninn/jf-openhuninn.ttf'); } :root { --global-text-color: #4e4e4e; } body { font-family: \"Lato\", 'jf-openhuninn' !important; } strong { color: var(--global-text-color) !important; font-weight: 700 !important; } em { color: var(--global-text-color) !important; } .title { font-weight: 700 !important; color: var(--global-text-color) !important; } .content h1, .content h2, .content h3, .content h4, .content h5, .content h6 { color: var(--global-text-color) !important; font-weight: 400 !important; } .card-content .article { color: var(--global-text-color) !important; } .navbar-item { color: var(--global-text-color) !important; font-weight: 700 !important; }","link":"/blog/css/custom.css"}]}