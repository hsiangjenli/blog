{"posts":[{"title":"[note] Solving fstatat canonical snap directory: Permission denied","text":"📌 IntroductionWhen using Snap apps on Ubuntu, you might encounter a confusing permission error related to fstatat. This note documents a real-world issue, explores possible causes, and shares the simple solution that worked. ⭐ NoteThis article was initially drafted with the help of ChatGPT based on a real issue I encountered. I verified the solution and revised the content to ensure accuracy and clarity for others facing similar problems. 📚 Prerequisite AppArmor LDAP (Lightweight Directory Access Protocol) fstatat snap Below are some key concepts mentioned in this article: Term 中文說明 English Description AppArmor Ubuntu 的一種安全模組，用來限制應用程式能存取的資源，例如檔案、網路。 A security module in Ubuntu that restricts what resources an application can access. LDAP (Lightweight Directory Access Protocol) 一種常見的用戶驗證協定，常用於企業環境集中管理帳號。 A common user authentication protocol used for centralized account management, especially in enterprise environments. fstatat 一個 Linux 系統呼叫，用來查詢檔案資訊。這個錯誤就是因為它失敗了。 A Linux system call used to get information about files. The error occurs when this call fails. Snap Ubuntu 推出的套件系統，讓應用程式更容易安裝、升級與隔離管理。 A packaging system by Ubuntu that makes applications easy to install, update, and sandbox. Non-standard home directory: The user’s home directory is located outside the default /home/username path, often on a different drive or mount point Home directory is symlinked: The home directory appears to be in /home/username, but it’s actually a symbolic link pointing to another location 🧭 Problem-solving FrameworkProblem1cannot fstatat canonical snap directory: Permission denied Root Cause AnalysisIn general, there are two common causes for this issue: The system is installed on an NTFS partition. The home directory is symlinked to a non-standard location. Check Filesystem Type1234df -T /Filesystem Type 1K-blocks Used Available Use% Mounted on/dev/nvme0n1p4 ext4 669754920 44435324 591224492 7% / The system is installed on an ext4 partition Check for Symlinks123456789ls -l /home/hsiangjenli/Documents/githubdrwxrwxr-x 10 hsiangjenli hsiangjenli 4096 一 27 17:05 blogdrwxrwxr-x 11 hsiangjenli hsiangjenli 4096 三 28 17:03 default-of-credit-card-clients-mlopsdrwxrwxr-x 8 hsiangjenli hsiangjenli 4096 一 29 16:40 hsiangjenli.github.iodrwxrwxr-x 5 hsiangjenli hsiangjenli 4096 三 27 14:28 java-from-pythondrwxrwxr-x 4 hsiangjenli hsiangjenli 4096 一 29 17:19 pic-beddrwxrwxr-x 11 hsiangjenli hsiangjenli 4096 二 16 08:44 python-package-templatedrwxrwxr-x 6 hsiangjenli hsiangjenli 4096 一 27 17:25 star-to-review None of the folders are symbolic links Why This HappensI don’t know … SolutionSurprisingly, running the following command solved the issue: 1sudo dpkg-reconfigure apparmor Enter the destination directory that you want to use Reboot the computer~~ 🔁 Recap ✅ The error cannot fstatat canonical snap directory: Permission denied is often related to AppArmor restrictions ✅ Common causes include: Using an NTFS partition for your system or home directory Having a symlinked or non-standard home directory 🔍 In this case: The system is on an ext4 partition — ✅ not NTFS. The home directory is not a symlink — ✅ not symlinked. ⚠️ The root cause remains unclear 🛠 The problem was resolved by: Running sudo dpkg-reconfigure apparmor Entering the actual path to the home directory during configuration Rebooting the system 🔗 References ‘Permission denied’ when running snap applications on Ubuntu 16.04 as a LDAP user Permission denied error when running apps installed as snap packages - Ubuntu 17.04","link":"/blog/note_snap_permission_denied/"},{"title":"[tutorial] Using Mailgun + Python to send email","text":"📌 IntroductionThis tutorial covers how to send emails using Mailgun and Python. You’ll learn how to set up Mailgun, generate an API key, and write Python code to send emails with or without attachments. 🚀 Quick StartMailgun Mailgun provides a free plan allows sending up to 100 emails per day. Here are three things you need to do Generate a Mailgun API key Remember your Mailgun domain name (used for sending email) Add your email to Mailgun (Mailgun only allows sending an email to authorized recipients) Create an API key Get your domain from Mailgun Set up your email &amp; verify it Add your email to mailgun Check your mailbox to verify it PythonTo see the entire code : mailgun/demo.py 12345MAILGUN_API_KEY = os.getenv(&quot;MAILGUN_API_KEY&quot;)MAILGUN_DOMAIN_NAME = os.getenv(&quot;MAILGUN_DOMAIN_NAME&quot;)MAILGUN_API_URL = ( f&quot;https://api.mailgun.net/v3/{MAILGUN_DOMAIN_NAME}.mailgun.org/messages&quot;) 1234567891011@error_handler_for_send_emaildef send_email(from_email: str, to_email: Union[str, list], subject: str, text: str): # Define the email parameters email_data = {&quot;from&quot;: from_email, &quot;to&quot;: to_email, &quot;subject&quot;: subject, &quot;text&quot;: text} # Send the email r = requests.post( url=MAILGUN_API_URL, auth=(&quot;api&quot;, MAILGUN_API_KEY), data=email_data ) return r 1234567891011121314151617181920212223@error_handler_for_send_emaildef send_email_with_attachment( from_email: str, to_email: Union[str, list], subject: str, text: str, attachment_paths: list,): # Define the email parameters email_data = {&quot;from&quot;: from_email, &quot;to&quot;: to_email, &quot;subject&quot;: subject, &quot;text&quot;: text} # Read the attachment files = [ (&quot;attachment&quot;, open(attachment_path, &quot;rb&quot;)) for attachment_path in attachment_paths ] # Send the email r = requests.post( url=MAILGUN_API_URL, auth=(&quot;api&quot;, MAILGUN_API_KEY), data=email_data, files=files ) return r GmailAfter sending the email from Mailgun, you can check your inbox. It might be marked as spam, so you can check your spam folder to see if the email is there. 🔁 Recap Mailgun Setup: Generate an API key, retrieve your domain name, and verify your email Python Integration: Use the Mailgun API with Python to send emails programmatically Sending Attachments: Learn how to send emails with attachments using the Mailgun API 🔗 References https://www.mailgun.com/blog/it-and-engineering/send-email-using-python/ https://stackoverflow.com/questions/53861582/sent-email-via-python-using-mailgun-api","link":"/blog/tutorial_mailgun_python/"},{"title":"[note] Strategic Thinking Models","text":"📌 Introduction“ Unlocking Minds, Structuring Thoughts ” 🚀 曼陀羅九宮格 🚀 心流八通道","link":"/blog/note_strategic_thinking_models/"},{"title":"[tutorial] GitHub + PicGo + VSCode Extension","text":"📌 IntroductionThis article provides a tutorial on setting up GitHub, PicGo, and a VSCode extension to facilitate image uploading to GitHub repositories. It outlines the necessary prerequisites, the procedure to generate a GitHub token, and essential steps for configuring the PicGo extension in VSCode. 🚀 Quick StartBefore You StartMake sure you have following: A Github Token with access to your repo A repo to store images GitHUbGenerate GitHub Token Go to Settings/Developer settings/Personal access tokens/Token (classic) Click Generate new token (classic) Set a name for the token to identify it easily and choose No expiration Select the required scopes for the token Set Up RepoTo ensure your images are accessible, set your repo to public. VScode Extension Install PicGo extension in VScode Set Pic Bed: Current to github Set Pic Bed &gt; Github: Repo to your previously created public repo. Format is {username}/{repo_name} Set Pic Bed: Uploader to github Set Pic Bed &gt; Github: Branch to the branch of your public repo Set Pic Bed &gt; Github: Path (Optional). If you want to store images in specific folder (e.g. images). Make sure to include a trailing slash (/), otherwise, it will be used as a prefix for image names Set Pic Bed &gt; Github: Token to the Github token you created earlier TroubleshootingIf you see the following error, it means xclip is not installed: 1PicGo: xclip not found! Please install xclip before run picgo. To fix this, install xclip using the following command: 1sudo apt install xclip 🔁 Recap You need a Github token and a public repository for image storage. Install the PicGo extension in VSCode for image uploading. Follow specific configuration steps in the PicGo extension to link it with GitHub. Potential troubleshooting includes ensuring xclip is installed on your system.","link":"/blog/tutorial_github_picgo_vscode/"},{"title":"[note] Window 11 + Ubuntu 雙系統安裝紀錄","text":"🎒 預先準備💻 電腦資訊 型號：VivoBook 14 X1405VA-0041K 系統：Windows 11 CPU：i5-13500H SSD：NVMe SAMSUNG MZVL4512HBLU-00BTW 進入 BIOS 快捷鍵：F2 選擇開機碟快捷鍵：F12 🎯 目標目前的 SSD 已經安裝上 win 11，目標是將 1 TB 的 SSD 做磁碟分割後安裝上 Ubuntu 20.04 LTS - 350 GB - 650 GB 💻 操作流程🚨 注意事項 根據網路上的教學文章，大部分的修改都是在 BIOS 選單內 但是，現在有些電腦的廠商會把這些選項關掉（避免使用者把電腦弄壞） 這也讓更改變得麻煩，最後可能會搞到需要重設 windows，需把電腦備份好 關掉 Bitlocker 確認 BIOS 已更新至最新版本 最新版本的 BIOS 通常包含修復錯誤和改進硬體相容性的功能，有助於避免安裝過程中的不必要問題 將 BIOS 的 Boot Mode 設定為 UEFI UEFI 是現代系統的標準開機模式，具有更好的硬碟分割支援、快速啟動和安全功能。Ubuntu 和 Windows 都建議使用 UEFI 而非傳統的 BIOS（CSM） 關閉 Secure Boot Secure Boot 的作用是防止未授權的操作系統啟動，但某些 Ubuntu 發行版本或自訂驅動程式可能無法正確通過驗證，導致安裝失敗 在 BIOS 中找到 Secure Boot 設定，將其設為 Disabled 關閉 Fast Boot（BIOS &amp; Windows Control Panel） Fast Boot 會跳過部分硬體初始化過程，可能導致 USB 開機盤無法被檢測到，從而影響 Ubuntu 的安裝 進入 BIOS，找到 Fast Boot 設定，將其設為 Disabled 在 Windows 中的 Control Panel 找到 Hardware and Sound 底下的 Power Option，把 Fast Starup 關閉 確認 SATA Configuration 設定為 AHCI 模式（這邊最有可能出現問題，BIOS 有些會沒有這些選項可以更改） 不能是 Raid 關閉 CSM（Compatibility Support Module） CSM 是用於支援傳統 BIOS 的相容性模式，關閉後系統會專注於使用 UEFI 啟動，減少可能的相容性問題 在 BIOS 中找到 CSM 設定，將其設為 Disabled Step 1 磁碟分割 首先會在 windows 上做磁碟分割，分成 windows 跟 ubuntu 兩個系統 在電腦上搜尋 Create and format hard disk partitions Step 2 關閉快速啟動 Windows - Fast Startup BIOS - Fast Boot Windows 在 windows 中 的 control panel 找到管理電源的選項，把 fast startup 關掉 Step 3 跟 Intel RST 有關的 driver 刪除 [^ubuntu_rst] 這個步驟會讓之後電腦開機的時候失敗，會需要整台電腦重設（需要有一顆強壯的心臟 💔💔💔…） 但是重設完之後才可以順利把 RST 關掉（把硬碟從 Raid 改成 AHCI），否則 ubuntu 在安裝的時候會讀取不到這個 SSD 按 Win + X 快捷鍵後找到 Device Manager 進去裡面找到 Storage Controllers，在裡面會看到 Intel RST 的 driver 這個就是安裝 ubuntu 過程中導致無法偵測到 SSD 的罪魁禍首！！！！ 請按照 Ubuntu Documentation - RST &amp; Ubuntu installation 裡面的步驟一步一步的卸載 Intel RST driver 按 Win + R，搜尋 regedit HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\iaStorV\\ 找到 Start 選項，把值改成 0 找到 StartOverride 把值改成 0 HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\storahci\\ 找到 Start 選項，把值改成 0 找到 StartOverride 把值改成 0 把 Intel RST driver 卸載 把 Intel RST driver 完全 uninstall，然後重新開機 重新開機的過程會藍屏，上面是顯示 INACCESSIBLE_BOOT_DEVICE，解決方式就是重新設定整台電腦 重設完之後 一樣按 Win + X 進入 Device Manager 看 Storage Controllers 裡面確認 Intel RST 是否還在 Step 4 安裝 Ubuntu使用隨身碟安裝 Ubuntu 按 F12 選擇隨身碟當作開機碟 因為已經預先切好磁碟區，Installation Type 就選 Something else 一路按確認即可，後續安裝不太會有問題 驅動問題 過往安裝桌機跟自己舊筆電的時候都沒遇到 wifi 驅動問題 但是這台 vivobook 遇到了，最快的解法是直接買一個支援 linux 的無線連接器 TP-Link TL-WN725N22 專有名詞 CSM - Compatibility Support Module Intel RST - Intel Rapid Storage Technology [^ubuntu_rst]: Ubuntu Documentation - RST &amp; Ubuntu installationhttps://help.ubuntu.com/rst/","link":"/blog/note_chinese_u2004_win11/"},{"title":"[note] Want to install the latest version from a GitHub repo using pip","text":"📌 IntroductionThis article explains how to install a specific branch of a GitHub repository using pip, particularly focusing on the ‘devel’ branch, which is typically used for development purposes rather than stable releases. 🚀 Quick StartTo install the development version from GitHub using pip, execute the following command: 1pip install git+https://github.com/username/repository.git@devel 🔁 Recap You can install a specific branch from GitHub using pip. The ‘devel’ branch typically contains unstable development versions. To install, use the command format: pip install git+{repo_url}@{branch_name}. Replace {repo_url} with your repository URL and {branch_name} with ‘devel’. Ensure you have pip installed to use this command.","link":"/blog/note_pip_github_branch/"},{"title":"[note] Fish?","text":"📌 IntroductionThis article introduces the FISH shell, a user-friendly interactive shell designed to improve the command line experience. It highlights its installation on MacOS and basic usage. 🚀 Quick StartInstallation on MacOS1brew install fish Using Fish ShellBy typing fish to enter FISH’s shell 🔁 Recap FISH is a friendly interactive shell that enhances the command line experience. Installation on MacOS can be done using Homebrew with the command brew install fish. To start using FISH, simply type fish in the terminal. 🔗 References 如何在 Linux 中安裝、配置和使用 Fish Shell？ Finally, a command line shell for the 90s","link":"/blog/note_fish/"},{"title":"[note] MarkItDown: A tool for smoothly converting docx and pptx into markdown","text":"📌 IntroductionThis article discusses MarkItDown, a tool specifically designed to effortlessly convert docx and pptx files into markdown format. It highlights various Python libraries that serve as dependencies for this conversion process, enabling users to handle documents and multimedia content effectively. 🚀 Quick StartHow MarkItDown works?Down below are the module use for MarkItDown 12345678910111213141516dependencies = [ &quot;beautifulsoup4&quot;, &quot;requests&quot;, &quot;mammoth&quot;, &quot;markdownify&quot;, &quot;numpy&quot;, &quot;python-pptx&quot;, &quot;pandas&quot;, &quot;openpyxl&quot;, &quot;pdfminer.six&quot;, &quot;puremagic&quot;, &quot;pydub&quot;, &quot;youtube-transcript-api&quot;, &quot;SpeechRecognition&quot;, &quot;pathvalidate&quot;,] mammoth https://pypi.org/project/mammoth/Mammoth is a tool designed for converting documents like MS Word, Google Docs, and LibreOffice files into HTML python-pptx https://github.com/scanny/python-pptxA Python library that can create/read/update .pptx file openpyxl https://openpyxl.readthedocs.io/en/stable/A Python library to read/write Excel 2010 xlsx xlsm xltx xltm file pdfminer https://github.com/pdfminer/pdfminer.sixPdfminer.six is a community-maintained version that was forked from original PDFMiner. This module helps users extract information from PDF files. pydub https://github.com/jiaaro/pydubMake it easy for you to manipulate audio in a simple way youtube-transcript-api https://github.com/jdepoix/youtube-transcript-apiA Python API allows you to get the transcript for a given YouTube video SpeechRecognition https://github.com/Uberi/speech_recognition/tree/masterSupport for speech-to-text engines like Google Cloud Speech API, Wit.ai, Whisper, etc markdownify https://github.com/matthewwithanm/python-markdownifyConvert HTML file into Markdown pathvalidate https://github.com/thombashi/pathvalidateA Python library to sanitize and validate strings such as filenames, file paths, etc puremagic https://github.com/cdgriffith/puremagic/tree/master Puremagic is a file type detection tool that can identify the type of an input file without relying on its extension. Since file extensions can be easily changed, using them alone to identify file type can be risky. This module defines a set of rules to read the file content and determine its type. 123456789101112131415# puremagic/magic_data.json{ &quot;extension_only&quot;: [ [&quot;&quot;, 0, &quot;.txt&quot;, &quot;text/plain&quot;, &quot;Text File&quot;], [&quot;&quot;, 0, &quot;.log&quot;, &quot;text/plain&quot;, &quot;Logger File&quot;], [&quot;&quot;, 0, &quot;.yaml&quot;, &quot;application/x-yaml&quot;, &quot;YAML File&quot;], [&quot;&quot;, 0, &quot;.yml&quot;, &quot;application/x-yaml&quot;, &quot;YAML File&quot;], [&quot;&quot;, 0, &quot;.toml&quot;, &quot;application/toml&quot;, &quot;TOML File&quot;], [&quot;&quot;, 0, &quot;.py&quot;, &quot;text/x-python&quot;, &quot;Python File&quot;], [&quot;&quot;, 0, &quot;.pyc&quot;, &quot;application/x-python&quot;, &quot;Python Complied File&quot;], [&quot;&quot;, 0, &quot;.pyd&quot;, &quot;application/x-python&quot;, &quot;Python Complied File&quot;], [&quot;&quot;, 0, &quot;.python_history&quot;, &quot;text/plain&quot;, &quot;Python History File&quot;], [&quot;&quot;, 0, &quot;.bat&quot;, &quot;application/x-script&quot;, &quot;Windows BAT file&quot;], [&quot;&quot;, 0, &quot;.gitconfig&quot;, &quot;text/plain&quot;, &quot;Git Ignore File&quot;],... 🔁 Recap MarkItDown allows smooth conversion of docx and pptx files to markdown format. A variety of dependencies are required for this conversion, including libraries for handling documents, audio, and data. Each library mentioned has its own specific functionality, such as converting Word documents to HTML or reading Excel files. 🔗 References https://pypi.org/project/mammoth/ https://github.com/scanny/python-pptx https://openpyxl.readthedocs.io/en/stable/ https://github.com/pdfminer/pdfminer.six https://github.com/jiaaro/pydub https://github.com/jdepoix/youtube-transcript-api https://github.com/Uberi/speech_recognition/tree/master https://github.com/matthewwithanm/python-markdownify https://github.com/thombashi/pathvalidate https://github.com/cdgriffith/puremagic/tree/master","link":"/blog/note_markitdown/"},{"title":"[note] Fixing Git Installation Issues in apache&#x2F;airflow:2.10.2 Docker Image","text":"📌 IntroductionThe article discusses the issue of permission errors when attempting to install packages from GitHub while using the apache/airflow:2.10.2 Docker image. It presents a solution that involves temporarily switching to the root user to install ‘git’ and then reverting to the airflow user for further installations. 🚀 Quick Start12345678FROM apache/airflow:slim-2.10.2USER rootRUN apt-get update &amp;&amp; apt-get install -y gitUSER airflowCOPY requirements.txt requirements.txtRUN pip install --no-cache-dir -r requirements.txt 🔁 Recap Permission errors can occur with the apache/airflow:2.10.2 image when installing packages from GitHub. To resolve this issue, install git as the root user before switching back to the airflow user. The Dockerfile provided demonstrates the steps to perform these actions.","link":"/blog/note_airflow_docker_permission_error/"},{"title":"[note] Enhancing Code Clarity with TypedDict","text":"📌 IntroductionThis article discusses the benefits of using TypedDict in Python for enhancing code clarity when storing complex data. It highlights how TypedDict helps developers by providing suggestions through their IDE, while also noting its limitations regarding strict type enforcement. 🚀 Quick Start12345678from typing import TypedDictimport datetimeclass News(TypedDict): title: str create_date: datetime.datetime content: str 🔁 Recap TypedDict is useful for maintaining code clarity with predefined fields. It enhances development efficiency by providing IDE suggestions. There are limitations to TypedDict, particularly regarding strict type checking. 🔗 References https://juejin.cn/post/7342790243009363977","link":"/blog/note_typedict/"},{"title":"[tutorial] Enhancing Commit Messages with commitollama: A Guide for VSCode and Local LLM Integration","text":"📌 IntroductionThis article introduces commitollama, an alternative to GitHub Copilot designed for generating commit messages using local LLMs, ensuring privacy for confidential projects. It outlines the installation process for the commitollama extension in VSCode and necessary setup steps to start using it effectively. 🚀 Quick Start How to use Install the extension in VSCode. Install Ollama to integrate the LLM. Installing OllamaRun the following command to install Ollama: 1curl -fsSL https://ollama.com/install.sh | sh After installation, you can run Ollama using: 1ollama This will display a list of available commands: 12345678910111213141516171819202122Usage: ollama [flags] ollama [command]Available Commands: serve Start ollama create Create a model from a Modelfile show Show information for a model run Run a model pull Pull a model from a registry push Push a model to a registry list List models ps List running models cp Copy a model rm Remove a model help Help about any commandFlags: -h, --help help for ollama -v, --version Show version informationUse &quot;ollama [command] --help&quot; for more information about a command. Download the Phi3 model (3.8b) by running: 1ollama pull phi3:3.8b Start the Ollama service using: 1ollama serve If you encounter the error message Error: listen tcp 127.0.0.1:11434: bind: address already in use, you can find a solution here . To restart Ollama, stop the current service and relaunch it: 12systemctl stop ollama.serviceollama serve To prevent the model from being deleted after downloading, refer to this discussion here . Setting Up VSCode After installing the extension, use a custom model for commit message generation. Press the button in the interface to automatically generate the commit message. 🔁 Recap commitollama is a privacy-focused commit message generator alternative to GitHub Copilot. The tool leverages open-source LLMs like Llama, Mistral, and Phi3. Easy integration with VSCode through a simple extension installation process. Users can easily retrieve models, run services, and generate commit messages efficiently. 🔗 References https://github.com/ollama/ollama/issues/707 https://github.com/ollama/ollama/issues/1493","link":"/blog/tutorial_commitollama/"},{"title":"[tutorial] Using Ollama with OpenCommit for Local Commit Message Generation","text":"📌 IntroductionThis article covers using Ollama with OpenCommit for generating commit messages locally. It includes an overview of running Ollama in a Docker container, instructions for using the Ollama CLI, and how to combine Ollama with OpenCommit for generating commit messages. 🚀 Quick StartStart a container1docker run -d -v ollama:/root/.ollama -p 11434:11434 --name ollama-commit ollama/ollama:0.3.6 Enter the Docker container1docker exec -it ollama-commit bash Pull model1ollama run gemma2:2b Start a chat1&gt;&gt;&gt; Send a message (/? for help) Exit the chatType /bye to exit the chat. Install opencommit1npm install -g opencommit Generate commit messages with local ollama server1OCO_AI_PROVIDER='ollama/gemma2:2b' opencommit output: 1234567891011121314151617181920212223242526┌ open-commit│◇ 1 staged files: README.md│◇ 📝 Commit message generated│└ Generated commit message:——————————————————feat(README.md): add link to Ollama website and examples of running models——————————————————│◇ Confirm the commit message?│ No│◇ Do you want to regenerate the message ?│ Yes│◇ 📝 Commit message generated│└ Generated commit message:——————————————————feat(README.md): add link to Ollama website and examples of model usage in README.md Error code 127123456789101112Error: llama runner process has terminated: exit status 127&gt;&gt;&gt; [GIN] 2024/08/28 - 18:43:24 | 200 | 68.455µs | 127.0.0.1 | HEAD &quot;/&quot;&gt;&gt;&gt; [GIN] 2024/08/28 - 18:43:24 | 200 | 7.845273ms | 127.0.0.1 | POST &quot;/api/show&quot;&gt;&gt;&gt; time=2024-08-28T18:43:24.392Z level=INFO source=memory.go:309 msg=&quot;offload to cpu&quot; layers.requested=-1 layers.model=33 layers.offload=0 layers.split=&quot;&quot; memory.available=&quot;[7.3 GiB]&quot; memory.required.full=&quot;5.5 GiB&quot; memory.required.partial=&quot;0 B&quot; memory.required.kv=&quot;1.0 GiB&quot; memory.required.allocations=&quot;[5.5 GiB]&quot; memory.weights.total=&quot;4.7 GiB&quot; memory.weights.repeating=&quot;4.6 GiB&quot; memory.weights.nonrepeating=&quot;105.0 MiB&quot; memory.graph.full=&quot;560.0 MiB&quot; memory.graph.partial=&quot;585.0 MiB&quot;&gt;&gt;&gt; time=2024-08-28T18:43:24.392Z level=INFO source=server.go:391 msg=&quot;starting llama server&quot; cmd=&quot;/tmp/ollama731275887/runners/cpu/ollama_llama_server --model /root/.ollama/models/blobs/sha256-ff82381e2bea77d91c1b824c7afb83f6fb73e9f7de9dda631bcdbca564aa5435 --ctx-size 8192 --batch-size 512 --embedding --log-disable --no-mmap --parallel 4 --port 33357&quot;&gt;&gt;&gt; time=2024-08-28T18:43:24.392Z level=INFO source=sched.go:450 msg=&quot;loaded runners&quot; count=1&gt;&gt;&gt; time=2024-08-28T18:43:24.393Z level=INFO source=server.go:591 msg=&quot;waiting for llama runner to start responding&quot;&gt;&gt;&gt; time=2024-08-28T18:43:24.393Z level=INFO source=server.go:625 msg=&quot;waiting for server to become available&quot; status=&quot;llm server error&quot;&gt;&gt;&gt; /tmp/ollama731275887/runners/cpu/ollama_llama_server: error while loading shared libraries: libllama.so: cannot open shared object file: No such file or directory&gt;&gt;&gt; time=2024-08-28T18:43:24.644Z level=ERROR source=sched.go:456 msg=&quot;error loading llama server&quot; error=&quot;llama runner process has terminated: exit status 127&quot;[GIN] 2024/08/28 - 18:43:24 | 500 | 266.021797ms | 127.0.0.1 | POST &quot;/api/chat&quot; The error code occurs when the Docker image version is greater than 0.3.6. Therefore, you need to pull the ollama image with version 0.3.6 and run the container. Click here to view the discussion. 🔁 Recap Ollama allows for the generation of commit messages using AI models. The article details setting up Ollama in a Docker environment. OpenCommit is integrated to simplify the process of generating commit messages using an AI model. Users can interact with the AI model through a chat interface. 🔗 References https://ollama.com/models https://github.com/ollama/ollama/issues/6541","link":"/blog/tutorial_ollama_opencommit/"},{"title":"[note] Installation of Golang (PATH)","text":"📌 IntroductionThis article provides a step-by-step guide on how to install Go on macOS and configure the system’s PATH variable to include Go binaries. 🚀 Quick Start Install Go using Homebrew: 1brew install go Verify the Installation: 1ls ~/go/bin/ Update PATH Temporarily: 1export PATH=$PATH:~/go/bin Update PATH Permanently: 12echo 'export PATH=$PATH:~/go/bin' &gt;&gt; ~/.zshrcsource ~/.zshrc 🔁 Recap The guide covers how to install Go programming language on macOS. It includes verification steps to check the installation. Instructions are provided for temporarily and permanently updating the PATH environment variable.","link":"/blog/note_go/"},{"title":"[tutorial] How to use psutil to monitor CPU and memory usage in python","text":"📌 IntroductionThis article introduces psutil, an open-source Python package that provides system information about CPU, memory, disks, and networks. It covers the installation of psutil and demonstrates useful functions for monitoring CPU and memory usage, as well as how to integrate it into Python code using decorators. 🚀 Quick Start1pip install psutil Useful functions in psutilCPU1234psutil.cpu_count() # get the number of CPUpsutil.cpu_percent() # get the usage of all CPUpsutil.cpu_percent(percpu=True) # get the usage of per CPUpsutil.cpu_percent(interval=1) # get the usage of all CPU in 1 second, using interval will get more robust result Memory1234567info = psutil.virtual_memory()# total memoryinfo.total / 1024 / 1024 / 1024 # bytes -&gt; GB# the usage of memoryinfo.percent MacOS1# svmem(total=25769803776, available=7726628864, percent=70.0, used=9045114880, free=791134208, active=6949453824, inactive=6915768320, wired=2095661056) Ubuntu12# will get more information like buffers, cached etc..# svmem(total=33541988352, available=25899790336, percent=22.8, used=7087771648, free=2703233024, active=15287881728, inactive=14264188928, buffers=965103616, cached=22785880064, shared=8265728, slab=904495104) How to integrate psutil into our code?We can use psutil to monitor each function cpu and memory usage by using decorator. 1234567891011121314151617import psutildef monitor(func): def wrapper(*args, **kwargs): process = psutil.Process() cur_func_pid = process.pid process = psutil.Process(cur_func_pid) func(*args, **kwargs) cpu_usage = process.cpu_percent(interval=0.01) memory_usage = process.memory_info().rss / 1024 / 1024 / 1024 # bytes -&gt; GB print(f&quot;CPU usage: {cpu_usage}%&quot;) print(f&quot;Memory usage: {memory_usage}GB&quot;) return wrapper Example12345678@monitordef example_code(): import numpy as np for i in range(100): np.random.rand(100, 100, 100)example_code() 🔁 Recap psutil is an open-source Python package for system monitoring. It provides useful functions to get CPU and memory usage information. You can use decorators to monitor CPU and memory usage of Python functions easily. 🔗 References Python常用库之psutil使用指南 简单介绍psutil库（virtual_memory()、cpu_percent() Python System Monitoring and Profiling with the psutil Module Psutil module in Python Administrative Tasks for Oracle Machine Learning for Python","link":"/blog/tutorial_psutil/"},{"title":"[tutorial] Build your own python package","text":"📌 IntroductionBuilding your own Python package is beneficial for maintaining large projects, as it helps manage code that is otherwise scattered across directories. 🚀 Quick Start Create a setup.py file:123from setuptools import setup, find_packagessetup(name=&quot;ntust_simslab&quot;, version=&quot;0.13&quot;, packages=find_packages()) Create a pyproject.toml file:123456789101112131415[tool.poetry]name = &quot;ntust_simslab&quot;version = &quot;0.13&quot;description = &quot;A simple example for building a Python package.&quot;authors = [&quot;Hsiang-Jen Li &lt;hsiangjenli@gmail.com&gt;&quot;]readme = &quot;README.md&quot;packages = [{include = &quot;ntust_simslab&quot;}][tool.poetry.dependencies]python = &quot;^3.8&quot;requests = &quot;^2.28.2&quot;[build-system]requires = [&quot;poetry-core&quot;]build-backend = &quot;poetry.core.masonry.api&quot; Sign up for a PyPI account at https://pypi.org/ to publish your package. 🔁 Recap Building a Python package helps maintain code organization in larger projects. Using setup.py is the traditional method, while pyproject.toml is the modern approach with Poetry. It’s essential to have an account on PyPI to publish your package. 🔗 References https://github.com/NTUST-SiMS-Lab/tutorial-simple-pypkg https://pypi.org/","link":"/blog/tutorial_pypi_pkg/"},{"title":"[note] Installing GitHub Copilot CLI and Usage Guide","text":"📌 IntroductionThis article discusses how to install and use the GitHub Copilot CLI. It covers the installation process using npm, setting execution policies on Windows, and gives an example of how to use the CLI to get help on certain git commands. 🚀 Quick Start Install GitHub Copilot CLI:1npm install -g @githubnext/github-copilot-cli Set execution policy for PowerShell:1Set-ExecutionPolicy RemoteSigned -Scope CurrentUser Authenticate with GitHub Copilot CLI:1github-copilot-cli auth Test the CLI:1github-copilot-cli what-the-shell how to delete branch Output:──────────────────── Command ──────────────────── git branch -d ────────────────── Explanation ────────────────── ○ git branch is used to list branches. ◆ -d deletes the branch . ✅ Run this command 📝 Revise query ❌ Cancel 🔁 Recap GitHub Copilot CLI can be installed easily via npm. Windows users need to set the execution policy to allow running scripts. The CLI provides assistance with git commands and outputs the command along with an explanation.","link":"/blog/note_installation_of_github_cli/"},{"title":"[note] Efficient Mind Mapping with Markmap: A Markdown-Based VScode Extension","text":"📌 IntroductionThis article describes how to use the Markmap extension for Visual Studio Code to convert Markdown syntax into a mind map, facilitating effective organization and visualization of thoughts and information. 🚀 Quick StartInstall this extension on VS Code 123456789101112131415161718192021# **My Education**## Vocational high school### KFHS### Applied Foreign Languages## Bachelor### NKUST### Department of Money and Banking## Master### NTUST### Department of Industrial Management#### Data Science#### Introduction to Blockchain and Its Applications#### Industrial Internet of Things and Operational Technology Security#### Artificial Intelligence Technologies and Business Applications#### Machine Learning#### Sustainable Management for the Enterprises#### Production Management Preview 🔁 Recap Use the Markmap extension to visualize Markdown documents as interactive mind maps. Installation is simple and allows you to create a structured representation of your content. The preview feature provides a visual representation to enhance understanding.","link":"/blog/note_markmap/"},{"title":"[tutorial] Setting up Miniconda on Ubuntu","text":"📌 IntroductionThis article details the steps required to install Miniconda on Ubuntu, including downloading the installer and setting up the initial environment. 🚀 Quick Start1sudo wget -c https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh 1sudo chmod +x Miniconda3-latest-Linux-x86_64.sh 1./Miniconda3-latest-Linux-x86_64.sh 12conda activateconda env list 🔁 Recap Miniconda is a minimal installer for conda, useful for managing environments and packages in Python. The installation process includes downloading the installer, making it executable, and running it to set up Miniconda. After installation, you can easily create and manage Python environments using conda commands. 🔗 References https://medium.com/featurepreneur/setting-up-miniconda-on-ubuntu-4bf6bece6f9b","link":"/blog/tutorial_ubuntu_miniconda/"},{"title":"[note] Gatsby Usage","text":"📌 IntroductionThis article provides a guide on how to install Gatsby and create a new Gatsby site using starter themes. It covers the installation steps, commands to set up a Gatsby site, and links to troubleshoot common errors. 🚀 Quick StartInstall Gatsby12npm install -g gatsby-cligatsby --version gatsby-starter-blog123gatsby new hjl https://github.com/gatsbyjs/gatsby-starter-blogcd hjlgatsby develop gatsby-starter-julia12gatsby new RN https://github.com/niklasmtj/gatsby-starter-juliacd rn Use Legacy Peer Dependencies1--legacy-peer-deps 🔁 Recap Installation of Gatsby CLI using npm is straightforward with the command npm install -g gatsby-cli. After installation, you can check the version of Gatsby installed. To create a new Gatsby site, several starter themes can be used, such as gatsby-starter-blog and gatsby-starter-julia. Common errors related to npm and Gatsby are well documented through various links provided in the article. 🔗 References Commands (Gatsby CLI) npm WARN old lockfile The package-lock.json file was created with an old version of npm Error: Command failed with exit code 1: npm install #27548 npm-upgrade","link":"/blog/note_gatsby/"}],"tags":[{"name":"docker","slug":"docker","link":"/blog/tags/docker/"},{"name":"ubuntu","slug":"ubuntu","link":"/blog/tags/ubuntu/"},{"name":"windows","slug":"windows","link":"/blog/tags/windows/"},{"name":"intel rst","slug":"intel-rst","link":"/blog/tags/intel-rst/"},{"name":"linux","slug":"linux","link":"/blog/tags/linux/"},{"name":"static-site","slug":"static-site","link":"/blog/tags/static-site/"},{"name":"gatsby","slug":"gatsby","link":"/blog/tags/gatsby/"},{"name":"go","slug":"go","link":"/blog/tags/go/"},{"name":"python","slug":"python","link":"/blog/tags/python/"},{"name":"markdown","slug":"markdown","link":"/blog/tags/markdown/"},{"name":"vs-code","slug":"vs-code","link":"/blog/tags/vs-code/"},{"name":"note","slug":"note","link":"/blog/tags/note/"},{"name":"git","slug":"git","link":"/blog/tags/git/"},{"name":"pip","slug":"pip","link":"/blog/tags/pip/"},{"name":"snap","slug":"snap","link":"/blog/tags/snap/"},{"name":"permission denied","slug":"permission-denied","link":"/blog/tags/permission-denied/"},{"name":"ollama","slug":"ollama","link":"/blog/tags/ollama/"},{"name":"picgo","slug":"picgo","link":"/blog/tags/picgo/"},{"name":"mailgun","slug":"mailgun","link":"/blog/tags/mailgun/"}],"categories":[],"pages":[{"title":"","text":"@import url('https://fonts.googleapis.com/css2?family=Lato:ital,wght@0,100;0,300;0,400;0,700;0,900;1,100;1,300;1,400;1,700;1,900&display=swap'); @font-face { font-family: 'jf-openhuninn'; src: url('https://hsiangjenli.github.io/static/font/jf-openhuninn/jf-openhuninn.ttf'); } :root { --global-text-color: #4e4e4e; } body { font-family: \"Lato\", 'jf-openhuninn', \"Verdana\" !important; < HEAD ======= } .section { background-color: #e1e1e1 !important; >>>>>>> ab6907511f947861e6203c41a9f40d03cc1697aa } strong { color: var(--global-text-color) !important; font-weight: 700 !important; } em { color: var(--global-text-color) !important; } .title { font-weight: bolder !important; color: var(--global-text-color) !important; } .content h1, .content h2, .content h3, .content h4, .content h5, .content h6 { color: var(--global-text-color) !important; font-weight: bolder !important; } .content h1, .card-content h2 { padding-bottom: .75rem !important; border-bottom: 1px solid #e4e4e7 !important; } .card-content .article { color: var(--global-text-color) !important; } .navbar-item { color: var(--global-text-color) !important; font-weight: 700 !important; } .highlight-body { background-color: #eaeaea !important; }","link":"/blog/css/custom.css"}]}