{"posts":[{"title":"[chatgpt] 企業架構師、解決方案架構師與 DevOps 角色比較與轉型路徑","text":"📌 介紹 ⭐ 注意 本篇文章由 ChatGPT 生成，經人工審閱後發佈，內容僅供參考。內容主要是講述 DevOps、SA、EA 三者角色之間的關係以及 DevOps 如何轉換跑道至 SA 或 EA。 🧭 角色定位與差異概覽 企業架構師（Enterprise Architect，EA）：站在整個企業層面制定長遠的 IT 策略與架構藍圖，確保技術方案與企業使命和業務目標保持一致 [1] [2] EA 就像城市規劃師，為企業的技術土地繪製總體藍圖 [3] 他們關注大局與長期策略，定義標準與治理架構，指引各項技術決策方向。 解決方案架構師（Solution Architect，SA）：著眼於特定產品或專案，評估業務需求並設計對應的技術解決方案 [1:1] SA 扮演橋樑角色，連接業務需求和最終的技術實現 [1:2] 他們類似建築師，為某棟建築（單一系統）繪製藍圖，確保該解決方案既符合企業整體架構規範又滿足專案需求 [3:1] SA 關注具體細節與落地實施，帶領團隊將架構方案轉化為可交付的系統。 DevOps 工程師（開發運維工程師）：專注於軟體的交付管線與運維自動化，負責開發與運維之間的協作，實現持續整合/交付（CI/CD）流程、自動化部署與系統監控，確保軟體可靠且快速地交付 [2:1] DevOps 注重工具與流程優化，就像城市中的基礎建設維運者，建立道路管線（部署流程）並保持交通暢通（穩定運營）。 共同點：這三種角色都需要廣泛的技術知識和良好的溝通協調能力，但側重面不同。企業架構師偏重策略與全局觀，解決方案架構師偏重專案技術設計與協調落實，DevOps 工程師偏重工程實作與自動化效率。隨著企業規模和產業不同，是否設置這些角色及角色間職責劃分也會不同——公司規模越大、系統越複雜，越需要明確區分 EA、SA 等架構角色 [1:3]。 以下將針對新創公司與金融業的情境，分別說明 EA、SA 和 DevOps 三種角色的工作內容、所需技能與常用技術差異，接著提供從 DevOps 轉型為 SA 或 EA 的具體建議與學習資源。 🏗️ 企業架構師（Enterprise Architect，EA） 角色職責與定位：企業架構師在組織中負責制定整體技術藍圖，確保 IT 策略與公司業務戰略保持一致 [1:4] 他們分析企業內外部需求，識別業務能力差距，規劃未來的技術路線圖 [1:5] EA 通常不深入實作細節，而是制定標準並將具體實作任務分配給解決方案架構師或技術架構師 [1:6] EA 的一項關鍵任務是架構治理：透過架構模型和原則，指導各專案遵循企業標準，避免各自為政。EA 經常與高階管理層合作，確定哪些新興技術（如 AI、區塊鏈等）可為企業帶來競爭優勢 [1:7] 核心技能：企業架構師需要跨域的技術知識與商業敏銳度。他們必須精通企業架構框架（如 TOGAF、Zachman）、瞭解業務流程和行業趨勢，能將複雜的技術概念與商業戰略聯結 [1:8] [1:9] EA 要具備卓越的策略規劃與分析能力，可以透過架構視圖與模型來分析整體 IT 版圖，發現運作瓶頸並規劃改進路徑 [1:10] 同時，EA 需要極強的溝通與影響力，善於向高層闡述 IT 策略價值，協調各部門達成共識 [1:11] 在軟性能力上，EA 必須有條理地工作並注重架構治理，確保技術決策符合集團的合規與標準要求。 常用技術與工具：由於 EA 著眼全局，其技術偏向架構建模與策略管理工具，而非具體程式語言。常用的有企業架構管理工具（EAM），例如 Archi、Sparx EA、LeanIX，用於繪製架構藍圖、資產清單和路線圖 [1:12] EA 也需熟悉主流雲端平台（如 AWS、Azure、GCP）及企業級解決方案（如資料庫、ERP、中介軟體）的概況，以便在高層次做出技術選型決策。雖然 EA 不親自寫程式，但瞭解各種技術標準與框架很重要，例如微服務架構、企業整合模式、資安框架等，以便評估方案的可行性與相容性。 新創 vs. 金融業情境差異：在新創公司，通常公司規模小、產品單一，EA 可能由技術長（CTO）扮演，架構較簡單且演進快速，強調敏捷調整而非嚴格治理。因此新創的 EA 可能兼任 SA 和技術主管，以靈活方式制定架構方向。相反地，在金融業大型企業（如銀行、保險），業務線複雜且合規要求高，通常有專門的企業架構師團隊。金融業的 EA 往往遵循嚴謹的架構框架（如 TOGAF），制定標準化的架構藍圖與治理流程，確保各系統（含遺留主機、數據倉庫、新應用等）都符合整體策略和法規。金融業 EA 也需要關注風險控制、資料隱私與法規遵循，在引入新技術時特別審慎評估。 🧱 解決方案架構師（Solution Architect，SA） 角色職責與定位：解決方案架構師專注於特定專案或產品的架構設計。他們承接企業架構師制定的原則與藍圖，深入分析業務需求，設計出切實可行的技術解決方案 [1:13] SA 的工作從需求分析開始：與產品經理和業務單位確認功能需求、品質要求（QA）等，然後在眾多技術選項中設計出架構方案（包含系統元件劃分、模組互動、資料流程等）。在方案設計過程中，SA 需要在企業整體架構與技術實現細節之間取得平衡 [1:14] 一旦方案得到批准，SA 常肩負技術領導角色：指導開發團隊理解架構設計、選定技術，並在開發全過程中把關架構的正確落地。SA 也負責評估實施中的技術風險，確保最終交付的系統符合最初架構設計的願景和各項需求 [1:15] 可以說，SA 是專案中的技術主導，確保「對的方案」得以「正確地實現」。 核心技能：作為連接業務與技術的橋梁，SA 需要兼具廣度與深度的技能組合。一方面，SA 要精通系統設計原則與架構模式（如分層架構、微服務、事件驅動架構、雲原生設計等），能夠針對不同類型的問題選擇合適的架構解決方案。另一方面，SA 通常從資深開發人員成長而來，具備至少一兩種技術堆疊的深厚經驗（例如精通 Java/Spring、.NET、生態或前後端某個領域），了解程式碼層面的實踐細節，才能設計出可實現的方案。此外，SA 必須具備良好的溝通協調能力，因為他們需要向開發團隊闡述架構、與企業架構師討論方案一致性，並向非技術的業務關係人解釋技術方案如何解決業務問題。專案管理技能也很重要。SA 經常要在項目中擔任技術項目經理，確保各方步調一致推進 [1:16] 總而言之，SA 要有分析複雜問題並分解為可執行方案的能力，同時具備領導團隊落實的軟實力。 常用技術與工具：SA 的技術會因行業和專案而異，但通常包括廣泛的開發技術和架構工具。在雲端平台方面，SA 需要熟悉 AWS、Azure、GCP 等主流雲服務，懂得運用各種雲服務（計算、存儲、資料庫、消息隊列等）構建可擴展的系統 [2:2] 在應用架構方面，SA 常用 UML 或 C4 Model 繪製系統結構圖，使用架構設計工具（如 Visio、draw.io、PlantUML）來表達設計。程式語言與框架則取決於具體領域：例如在金融業後端可能偏好 Java/Spring 或 .NET；在新創網路產品則可能採用 Python/Django、Node.js/Express、Go 等。SA 必須根據需求選擇合適的資料庫（如關聯式 SQL 或 NoSQL）、訊息中介（Kafka、RabbitMQ）等。除了應用開發技術，SA 也需要掌握 DevOps CI/CD 工具的原理，如容器與 Kubernetes、持續整合工具（Jenkins, GitLab CI）等，以便設計出能順利部署和運營的解決方案 [2:3] 另外，SA 經常需要考慮性能與安全，因此對性能測試工具和安全最佳實踐也要有涉獵。總之，SA 的技術就是「能把系統從白板構想到生產環境」所需的一切技術知識。 新創 vs. 金融業情境差異：在新創公司，解決方案架構師往往兼任技術團隊領導。由於團隊人力有限，SA 可能既負責架構設計又直接參與編碼實作，角色上更「hands-on」。新創環境強調快速迭代，SA 在保證架構合理性的同時會傾向使用輕量級框架和雲服務來加速開發，上線後再逐步演進。反之，在金融業這類大型組織，SA 通常是明確獨立的角色，不太參與日常 Coding，而是把重心放在架構設計與協調。金融業 SA 需要面對大量遺留系統整合問題，經常要在遵循企業架構標準下，為某業務領域（如支付系統、風險控管系統等）提出解決方案。因此他們更常使用企業級技術（如 IBM WebSphere、Oracle數據庫）和強調安全性、交易一致性的設計。在金融業專案中，SA 需密切配合 EA 確保方案合規，並與專案經理、外部供應商協作。簡而言之，新創的 SA 更靈活多面，能快速切換技術以適應變化；金融業的 SA 更專精穩健，確保在嚴格環境中方案可靠可控。 🔧 DevOps 工程師（DevOps Engineer） 角色職責與定位：DevOps 工程師旨在打通軟體開發（Dev）與運維（Ops）的壁壘，建立高效、自動化的軟體交付流程。其核心職責包括：設計和實施 CI/CD 管道，自動化從程式建置、測試到部署的過程 [2:4]；編寫基礎設施即程式碼（IaC），例如利用 Terraform、CloudFormation 等工具來自動佈署和管理雲端基礎設施 [2:5]；配置和管理持續監控與警報系統（如 Prometheus、Grafana、CloudWatch）以確保系統運行穩定 [2:6]；推動配置管理與自動化（使用 Ansible、Chef 等），減少人工操作帶來的錯誤。DevOps 工程師還肩負環境管理責任，維護開發、測試、Stage、生產環境的一致性，並協助開發團隊快速交付、快速迭代。簡言之，DevOps 角色關注軟體交付生命周期的效率和可靠性，是團隊落實快速交付、持續改進文化的關鍵推手。 核心技能：DevOps 工程師需要廣泛的工具鏈知識與協作能力。技術上，他們必須熟練使用各種 CI/CD 工具（如 Jenkins、GitLab CI/CD）、版本控制系統（Git）、容器技術（Docker）及容器編排（Kubernetes）等。此外，對作業系統和網路有深入理解也是必要的，因為部署環境常涉及 Linux 系統調優、服務配置、網路路由、防火牆設定等。DevOps 通常也具備一定的編程或腳本能力，常用 Python、Shell Script、Go 等來編寫自動化腳本或開發輔助工具。他們還需要了解雲端架構和服務（AWS、Azure、GCP），因為大多數現代應用都部署在雲端或混合雲環境。軟性能力方面，DevOps 工程師充當開發與 IT 運維團隊之間的粘合劑，需要優秀的溝通協調能力來推動 DevOps 文化變革。在問題發生時，DevOps 人員往往也是主要的故障排查協調者，需要快速聯絡相關人員共同解決問題 [4] 最後，他們應具備持續學習心態，因為 DevOps 領域工具和最佳實踐演進迅速，不斷學習新技術（例如服務網格 Service Mesh、GitOps流程等）以提升團隊效率。 常用技術：DevOps 的日常工作圍繞各種自動化與基礎架構技術。常見技術包括： 雲端與容器：AWS、Azure、GCP 等公有雲平台及其服務（如EC2、S3、RDS等），Linux 容器（Docker）和容器編排系統（Kubernetes, OpenShift）。DevOps 需要撰寫 Kubernetes YAML 部署檔、使用 Helm Chart 等來管理容器化應用。 CI/CD &amp; 配置管理：Jenkins、GitHub Actions、GitLab CI、CircleCI 等作為持續整合/交付工具；Ansible、Chef、Puppet 等用於配置管理和佈署自動化；Terraform、CloudFormation 用於基礎設施即程式碼（IaC）管理環境 [2:7] 這些工具組合起來實現一鍵部署和基礎設施自動化。 監控與日誌：Prometheus、Grafana 用於監控指標；ELK/EFK（Elasticsearch + Kibana + Logstash/Fluentd）用於集中日誌管理；或雲端監控服務（CloudWatch、Azure Monitor）等。DevOps 設置警報和儀表板以實時監控系統健康狀況。 版本控制與協作：Git 是必備，瞭解 Git Flow 或 Pull Request 流程以協助團隊協作。例如 Nexus/Artifactory 用於二進制發布管理，Docker Registry 用於容器映像管理。 程式語言：雖然 DevOps 焦點不在開發業務邏輯，但通常會寫腳本和工具。常用 Shell 腳本做系統任務，自動化腳本多用 Python，近年來也有使用 Golang 開發 DevOps 工具（如 Kubernetes 的CLI 工具）。DevOps 人員還需能看懂開發程式碼以排查問題，因此對團隊主要使用的語言（Java、Python、JavaScript等）保持一定熟悉度有助益。 新創 vs. 金融業情境差異：在新創公司，DevOps 工程師常是初期團隊中關鍵的一員，負責從零打造公司的整套雲基礎設施與 CI/CD 流程。由於新創產品迭代快速，DevOps 會選擇高度自動化和以雲服務為主的方案，加速部署（例如全面採用雲端服務和 Serverless 架構以減少基礎設施維護）。新創團隊小，DevOps 可能同時涉足開發、測試等，因此技能覆蓋面更廣，解決問題更機動靈活。相反，在金融業大型公司中，DevOps 的推行可能受到傳統流程和合規的挑戰。一些金融機構引入 DevOps 文化較晚，往往以專案制或試點團隊的形式逐步推動。金融業的 DevOps 工程師需要適應嚴格的變更管理流程和安全審計要求，在自動化時加入完整的審批與紀錄。技術上，部分金融機構仍有自建資料中心，DevOps 可能需管理混合雲（本地機房 + 私有雲 + 公有雲）環境，並確保關鍵系統的高可用和災備。金融業也更強調權限控管與監控，DevOps 工具鏈的使用須配合公司安全政策（例如敏感資料不得上傳雲端、CI/CD pipeline 需經變更審批等）。總的來說，新創的 DevOps 更偏創新實踐，追求速度和迭代；金融業的 DevOps 則偏重穩健合規，在速度與風險之間取得平衡。 小結：不同產業與規模下，EA、SA、DevOps 三角色的設置與分工靈活調整。在小型新創，可能根本沒有正式的 EA 職稱，或一人多責；而在金融巨頭，這三種角色界線清晰，各司其職但也需緊密協作。隨著企業成長，架構治理的重要性提升，會逐步從以 Tech Lead 為中心的非正式架構設計，演變到建立 SA 團隊，再到引入 EA 從戰略高度統籌全局 [3:2]。了解這些角色在不同情境下的定位，有助於我們制定合適的職業發展與學習路徑。 🗺️ DevOps 轉型學習路線圖 DevOps 工程師積累了豐富的實作經驗和對整體交付流程的瞭解，這為轉型成架構師奠定了良好基礎 [4:1]。然而，從注重工具與執行的 DevOps 角色轉型為站在更高層次設計的 Solution Architect（SA）或 Enterprise Architect（EA），仍需要在技術深度與廣度、業務理解、架構思維等方面進一步提升。下面提供一份逐步進階的學習與思維轉變指南： 技術與知識學習順序（基礎→進階→實戰）： 基礎階段：強化計算機科學與軟體工程基本原理，包括資料結構、演算法、網路協定、作業系統等知識，為架構設計打下理論根基。此外學習軟體設計準則與面向對象原則（如 SOLID 原則）、基本的設計模式。對於 DevOps 出身的人，這一步有助於補齊在軟體設計方面的理論短板。可以透過經典書籍（例如 Clean Code, Design Patterns）和線上課程來夯實這些基礎。 進階階段：深入研究軟體架構理論與模式。學習常見架構風格（單體 vs. 微服務、分散式系統原則、事件驅動、CQRS 等）、架構模式（如分層架構、六邏輯架構、乾淨架構 Clean Architecture）以及架構決策的權衡取捨。同時了解企業架構框架（對於立志 EA 的人，如 TOGAF、企業架構域 BDAT 等）以掌握架構治理的方法論。對於想成為 SA 的人，深入一兩種主流技術的系統設計很重要，例如研究網站在高並發下的架構設計、金融交易系統如何確保 ACID 特性等。在這階段，還應該擴展雲端與基礎設施知識：既然 DevOps 本就熟悉 CI/CD 與容器，進一步學習雲端架構設計（如 AWS Well-Architected Framework 雲端最佳實踐、混合雲架構）、網路與安全架構（虛擬網路、VPC 設計、零信任安全模型）等 [5] 另外，涉獵資料庫原理與大型分散式系統知識（例如 NoSQL vs SQL 的取捨、CAP 定理、一致性算法如 Paxos/Raft）有助於架構師在做技術選型時更具前瞻性。 實戰階段：紙上得來終覺淺，開始架構設計實戰演練。一種方式是在現有工作中主動承擔小型專案的架構設計：例如重新設計一個模組的架構、優化一個系統的部署拓撲，並將你的設計與團隊討論獲取反饋。也可以參與系統設計討論（Design Review）的過程，觀察資深架構師如何權衡決策。如果在工作中缺乏機會，可考慮自行構思並實作一兩個架構項目：例如設計一個縮網址服務或電商系統的完整架構，包括前後端、資料庫、緩存、消息系統等，寫下架構說明書和關鍵模組的 PoC 程式碼。透過實踐，你會發現理論與現實的差距並學會折衷。這種經驗將成為日後勝任架構師工作的寶貴財產。 補足業務理解與架構設計能力：架構師不僅是技術高手，更是懂業務的設計師。DevOps 背景的人需要特別加強業務領域知識和需求分析能力。建議： 深化業務領域知識：不論你服務的產業是金融、電商還是其他領域，都應主動學習該行業的業務流程和專業知識。例如金融業的架構師要懂核心銀行系統運作、支付清算流程、監管合規要求；電商領域則要理解訂單流程、庫存管理、SEO 等。可以透過向業務部門請教、參與業務會議或讀相關行業報告來獲取知識。有了業務洞察力，才能設計出真正契合業務需要的系統架構。 練習需求分析與架構設計：訓練自己從模糊的業務需求中提煉技術需求的能力。嘗試撰寫架構說明書或技術提案：當接到一項新需求時，先分析功能性需求與非功能性需求（性能、伸縮性、安全、合規等），然後產出架構方案，包括系統上下游關係、組件劃分、資料流和控制流、關鍵技術選型的理由等。這個過程可以提升你全盤思考和架構決策的能力。對照業界案例或請教有經驗的架構師，反覆改進你的方案。 學習架構評審與決策：架構師經常需要做技術選型和決策，這涉及考慮多種權衡因素（trade-offs）。培養這種能力的途徑包括：學習經典的架構評估方法（如 ATAM 架構評估法），閱讀系統設計案例分析，特別是他人如何在相互衝突的需求間做取捨。例如，瞭解在高可用和一致性、延遲和吞吐量、開發效率和可維護性之間如何平衡。隨著經驗增長，你做架構決策將更加駕輕就熟。 專案參與類型與負責範圍建議：為順利轉型，應有意識地尋找能鍛鍊架構能力的專案和職責： 從小型架構設計做起：主動承擔現有團隊中小型專案或模組的設計工作。在 DevOps 崗位上，你或許熟悉整個交付流程，嘗試超出純粹運維自動化的職責，參與到系統設計層面。例如，負責設計新的日誌收集系統架構、優化現有系統的模組劃分，或者領導實施一個性能瓶頸的重構專案。通過負責這些範圍適中的架構任務，累積設計經驗並建立信心。 涉入端到端解決方案：爭取參與端到端的專案生命周期，而不僅是其中的交付環節。比如參與一個新產品從需求討論、架構設計、研發到部署的完整過程。在這過程中觀察並學習架構師如何與各方互動、如何做設計抉擇。同時主動請纓負責某些子系統的架構工作。端到端的參與有助於培養整體觀，理解每個環節對架構的影響。 加入架構評審或設計委員會：很多大型企業有架構評審委員會或設計審查會議。即使作為聽眾，爭取加入這類討論，可以讓你接觸到公司內不同專案的架構方案、了解到高階架構師關心的問題。如果有機會，在這些會議中發表意見和提問，讓架構團隊的人了解到你的熱情與見解。有時候這也會帶來導師指點或更多參與架構工作的機會。 擔任聯絡人/協調人角色：利用 DevOps 與開發、運維多方協作的特性，主動扮演技術協調人。例如在一個跨部門專案中，負責串聯前後端、資料庫、運維團隊的技術溝通，確保各模組集成順暢。這培養你從更高層次看系統、協調多方需求的能力，也是架構師每日工作的一部分 [1:17] 透過在項目中充當「小架構師」角色，你實際上已開始履行部分架構師的職責。 尋求導師與反饋：若公司內有資深的 SA 或 EA，主動請教並爭取在專案中接受他們的指導。在提交自己的架構方案後，邀請經驗豐富的同事或導師評論，虛心接受改進建議。透過導師制，你能更快發現自己在架構設計和思維上的不足，進而針對性地提高。 思維模式轉換建議（從工具導向轉向策略導向）：轉型架構師不僅是技能上的提升，更重要的是思維方式的轉變： 從執行者到設計者：DevOps 習慣親手解決問題、動手實作，而架構師需要學會站高一級看問題。要從「我如何把這件事做好」轉變為「我們應該做哪件事、為什麼？」，著重思考做什麼以及為何這樣做。培養系統性思維，在腦中隨時保持整個系統的概念模型，思考一個決策對全局的影響，而非只看局部。 從工具導向到問題導向：DevOps 常以工具和技術解決具體問題，而架構師首先關注的是業務問題本質和需求優先級。轉變思維時，要練習先不考慮具體技術，問自己：「這個需求背後真正要解決的業務問題是什麼？成功的關鍵指標是什麼？」然後再反推適合的技術方案。避免一開始就陷入選擇哪種框架或工具的思維陷阱，而是先定義問題，再挑工具。 從追求新技術到強調穩定架構：DevOps 工程師樂於嘗試新工具新技術，而架構師更保守理性，注重技術選型的長遠影響。需要培養一種技術冷靜：並非追最新最酷的技術，而是評估其成熟度、與現有環境的契合度以及為企業帶來的價值。如果新技術能解決關鍵問題當然值得引入，但若只是增添複雜度，架構師應果斷拒絕。換言之，從關注「技術本身」轉變為關注「技術能創造的價值」。 從局部優化到全局權衡：DevOps 多關注交付流程的效率和單個系統的可靠性，而架構師必須在全局視角下做出權衡。例如，一個方案在單個服務看來性能最佳，但從整體生態看可能增加了系統複雜性或技術孤島風險。架構師思維要求權衡利弊：學會在性能、成本、開發效率、可維護性、擴展性等多維標準下做平衡決策。接受「沒有完美的架構，只有適合當下需求的架構」這一點，在設計時設定優先級，滿足核心需求的同時允許次要方面做出讓步。 加強溝通與領導：從個人貢獻者轉型為架構師，意味著需要影響和帶領他人。培養溝通技巧，能將複雜技術觀念用簡潔比喻向非技術人士說明白，這是 EA/SA 的基本功 [6] 同時練習傾聽反饋和協商：架構方案往往需要協調不同團隊的利益，多問問他人的想法，在堅守原則與靈活調整之間取得平衡。建立可信賴的技術領導形象，讓團隊願意追隨你的技術決策。可以從小處著手，例如在團隊內主持技術討論、主動分享自己的學習，增強影響力。 策略思維：特別是瞄準 EA 角色時，要養成策略性思維，關注市場與競爭、公司整體發展方向。要思考「未來 2 ~ 3 年業務可能怎樣變化，我們的技術應提前做哪些準備？」EA 需要與高層共同制定 IT 策略，因此平時可多關注行業趨勢報告、競爭對手的技術動向，學習用商業語言討論技術。從只關注技術執行，轉變為能將技術作為實現商業目標的策略資源來看待。 上述步驟並非絕對線性，有些可以並行進行。例如在學習理論時也爭取實踐，同時培養軟技能。在這轉型過程中，DevOps 背景實際上是你的優勢：因為你對整個交付流程的掌握讓你比一般開發人員更具大局觀與跨領域經驗，這正是架構師需要的素質 [4:2]。事實上，DevOps 到架構師是常見的職涯路徑之一，許多成功案例表明只要不斷學習、拓展視野，完全可以從 DevOps 工程師成長為優秀的解決方案架構師，甚至未來的企業架構師 [4:3]。關鍵在於保持耐心與熱情，把每一個專案當作鍛鍊架構思維的機會，相信你的 DevOps 經驗最終會成為你架構決策時的獨特優勢。 ⚡ 學習資源 轉型之路需要持續學習，下列資源涵蓋 GitHub 儲存庫、線上課程、書籍和專業部落格社群，能提供深入的知識與實戰經驗參考： 💻 GitHub Solution Architect Learning Path：github.com 一個專為準架構師設計的完整學習資源彙編，涵蓋架構導論、基礎知識、雲平台、架構模式、工具與認證等主題，適合 DevOps 工程師系統性地學習架構知識。 Awesome Software Architecture：github.com 開源社群維護的軟體架構資源大全，整理了大量優質文章、影片和練習項目，涵蓋軟體架構模式與原則，是快速瞭解架構全貌的極佳入口。 System Design Primer：github.com 知名的系統設計入門教程，包含如何構建大型系統、面試常見的系統設計題，以及豐富的真實案例（如設計Twitter、Facebook等）。非常適合透過實例來鍛鍊架構設計思維。 Awesome DevOps：DevOps 相關的優秀工具和實踐清單，儘管你已熟悉 DevOps，但該清單可幫助你檢視是否遺漏任何對架構決策有幫助的領域，例如新的基礎設施技術或SRE最佳實踐（例如 Awesome DevOps 文件列出了雲平台、配置管理、容器、監控等各分類的頂尖方案 awesome-devops.xyz）。 🎓 線上課程 Coursera：軟體架構與設計專項課程：coursera.org 由知名大學提供的系列課程，如 Software Design and Architecture 專項課程，在此系列中學習如何應用設計原則、模式和架構來創建可重用、可維護的系統架構。 Coursera：TOGAF 認證課程：coursera.org 專注於企業架構的核心概念（如商業/資料/應用/技術架構領域 BDAT、架構開發方法 ADM 等），有助於理解 EA 所需的框架知識和方法論。 Pluralsight：Developer to Architect：classcentral.com 這門課專為開發人員 DevOps 轉型架構師而設計，內容涵蓋架構師角色的重要性、所需技能與知識，以及如何在專案生命周期各階段履行架構師職責 課程最後強調了設計與溝通方案給技術及非技術利害關係人的技巧，堪稱轉職架構師的路線圖。 Udemy：Microservices Architecture &amp; Patterns：在 Udemy 等平台上，也有許多實戰取向的課程，例如微服務架構實作、雲原生應用設計等，可以幫助你從具體技術入手理解架構原理。選擇高評價的課程（例如由資深架構師主講的）進行學習，將理論應用於實際案例中，加深理解。 📘 推薦書籍 《Fundamentals of Software Architecture》 系統闡述軟體架構各方面主題的經典之作，由 Mark Richards 和 Neal Ford 所著。內容涵蓋架構模式、品質屬性權衡、架構師職責等，是 DevOps 工程師拓寬架構視野的入門書。 《Domain-Driven Design: Tackling Complexity in the Heart of Software》 Eric Evans 所著的經典著作。架構師必須學會將業務知識融入技術設計，此書提供了如何與業務專家合作建模核心領域的方法，適合提升業務理解和架構設計融合的能力。 《The Software Architect Elevator》 由 Gregor Hohpe 撰寫，聚焦數位化轉型時代架構師的角色轉變與軟技能培養。特別適合即將進入大型企業任職的架構師，書中「電梯」比喻架構師需要在高層戰略與底層技術間上下切換。閱讀此書有助於 DevOps 工程師轉變思維，用更高的視角看待技術與組織的關係。 《Accelerate》 由 Nicole Forsgren 等人基於科學研究撰寫，討論 DevOps 實踐如何驅動商業價值。對於從 DevOps 轉型架構師的人，此書能強化你對技術與商業成果關聯的理解，幫助你在架構決策時關注商業價值。書中關於性能指標與組織轉型的內容也能讓你在日後推廣架構或 DevOps 變革時受益。 《Software Architecture in Practice》 Len Bass 等人的經典教材，涵蓋軟體架構設計的方方面面，以及大量實例分析。對希望全面系統學習架構知識的人而言是必讀之作。 此外，Martin Fowler 的著作如 《Patterns of Enterprise Application Architecture》 和他在部落格上發表的架構文章，也非常值得參考。Fowler 對企業級架構和重構的見解深入淺出，有助於建立良好的架構思維。 🌐 部落格與專業社群 Medium 技術專欄：Medium 上有許多軟體架構師和雲架構師分享的文章。例如 ITnext、Towards Data Science、The Startup 等專欄經常有架構相關內容。此外，一些個人作者（如前述的 Usman Aslam、Sharon Sahadevan 等）分享了從 DevOps 成長為架構師的經驗和雲端架構實踐案例，閱讀這些故事可以獲得實務建議和心得。 Reddit 社群：Reddit 平台有多個相關的討論版可以訂閱，例如： r/softwarearchitecture – 專門討論軟體架構議題的板塊，社群成員會分享架構設計經驗、書籍推薦並討論各種架構難題。 r/DevOps – 雖然以 DevOps 為主題，但也常涉及架構決策（如 CI/CD 設計、大規模系統部署策略等）的討論。 r/cscareerquestions 及 r/ExperiencedDevs – 這些職涯類板有不少關於從工程師轉型的討論，包含許多過來人提供的建議。 Stack Overflow / Stack Exchange：在 Stack Overflow 可關注 architecture、system-design 等標籤的問答學習具體技術問題。在其它站點 Software Engineering Stack Exchange 上，有很多關於架構和設計決策的討論。透過參與問答，既能解決技術難題，也能學習他人是如何分析架構問題的。 InfoQ 與 IBM Developer 等技術網站：InfoQ 上有大量關於微服務、架構案例研究、企業架構治理的文章（InfoQ 有中文版提供本土案例）。IBM Developer、Microsoft Architecture Center 等也提供架構師指南、參考架構文件。這些平台的內容緊跟業界趨勢，適合持續關注。 專業組織與論壇：可以參加一些架構師的線上論壇或本地社群活動。例如 The Open Group 的架構師社群（關注 TOGAF 討論）、IEEE Software 的討論群組等。在 LinkedIn 上也有「Software Architects」或「Enterprise Architecture Network」等群組，加入後可看到專業人士分享文章和看法，主動參與討論有助於建立人脈並吸收新知。 本地社群與部落格：對於使用繁體中文的讀者，建議關注台灣和香港的一些技術社群與部落格平台。例如 iT 邦幫忙 上有專欄討論架構與 DevOps 轉型的文章系列，或是台灣的架構師社群活動（如 Taiwan Architecture Summit 等）。本地語言的資源更貼近在地產業情境，從中可獲得寶貴的在地實務經驗分享。 🔑 關鍵字 企業架構管理工具（Enterprise Architecture Management Tools，EAM） 開放群組架構架構框架（The Open Group Architecture Framework，TOGAF） Zachman 架構框架（Zachman Framework） 微服務架構（Microservices Architecture） 企業整合模式（Enterprise Integration Patterns，EIP） 資訊安全框架（Security Framework） 系統元件劃分（System Component Decomposition） 系統設計原則（System Design Principles） 架構模式（Architectural Patterns） 分層架構（Layered Architecture） 事件驅動架構（Event-Driven Architecture，EDA） 雲原生設計（Cloud-Native Design） 輕量級框架（Lightweight Frameworks） 二進位制發布管理（Binary Release Management） 容器映像管理（Container Image Management） Docker Registry（Docker Registry） SOLID 原則（SOLID Principles） 設計模式（Design Patterns） 單體應用程式（Monolithic Application） 分散式系統原則（Distributed System Principles） 命令查詢責任分離（Command Query Responsibility Segregation，CQRS） 六邏輯架構（Hexagonal Architecture） 乾淨架構（Clean Architecture） 架構決策的權衡取捨（Architectural Trade-offs） 企業架構域（Business/Data/Application/Technology Architecture，BDAT） 架構治理方法論（Architecture Governance Methodology） 交易的原子性、一致性、隔離性與持久性特性（Atomicity, Consistency, Isolation, Durability，ACID） 零信任安全模型（Zero Trust Security Model） 一致性演算法（Consensus Algorithms） Paxos 演算法（Paxos Algorithm） Raft 演算法（Raft Algorithm） 架構說明書（Architecture Documentation） 技術提案（Technical Proposal） 功能性需求分析（Functional Requirement Analysis） 非功能性需求分析（Non-Functional Requirement Analysis） 架構方案設計（Architecture Solution Design） 系統上下游關係（System Upstream and Downstream Relationships） 資料流與控制流（Data Flow and Control Flow） 技術選型理由（Technology Selection Rationale） 架構評估方法（Architecture Evaluation Methods） ATAM 架構評估法（Architecture Tradeoff Analysis Method，ATAM） 架構層面平衡（Availability, Consistency, Latency, Throughput, Developer Efficiency, Maintainability Trade-offs） 架構開發方法（Architecture Development Method，ADM） 🔖 參考資料 Enterprise Architect vs. Solution Architect vs. Technical Architect https://www.leanix.net/en/wiki/ea/enterprise-architect-vs-solution-architect-vs-technical-architect-whats-the-difference ↩︎ ↩︎ ↩︎ ↩︎ ↩︎ ↩︎ ↩︎ ↩︎ ↩︎ ↩︎ ↩︎ ↩︎ ↩︎ ↩︎ ↩︎ ↩︎ ↩︎ ↩︎ Distinguishing Between DevOps Roles and AWS Solution Architects https://www.linkedin.com/pulse/distinguishing-between-devops-roles-aws-solution-architects-yagci-6jbqf/ ↩︎ ↩︎ ↩︎ ↩︎ ↩︎ ↩︎ ↩︎ ↩︎ Navigating the Architecture from Startup to Enterprise https://dilankam.medium.com/navigating-the-architecture-from-startup-to-enterprise-c355f6d3dd17 ↩︎ ↩︎ ↩︎ IT careers: 4 ways DevOps bolsters your architect skill set https://www.redhat.com/en/blog/devops-career-architecture ↩︎ ↩︎ ↩︎ ↩︎ How to Seamlessly Transition from DevOps to Cloud Architect Role https://cloudmize.medium.com/how-to-seamlessly-transition-from-devops-to-cloud-architect-role-8eb8fe02cd5f ↩︎ How can I switch roles from DevOps to Architect? https://www.reddit.com/r/AWSCertifications/comments/1aorad5/how_can_i_switch_roles_from_devops_to_architect ↩︎","link":"/blog/chatgpt_devops_sa_ea/"},{"title":"[note] Solving fstatat canonical snap directory: Permission denied","text":"📌 Introduction When using Snap apps on Ubuntu, you might encounter a confusing permission error related to fstatat. This note documents a real-world issue, explores possible causes, and shares the simple solution that worked. ⭐ Note This article was initially drafted with the help of ChatGPT based on a real issue I encountered. I verified the solution and revised the content to ensure accuracy and clarity for others facing similar problems. 📚 Prerequisite AppArmor LDAP (Lightweight Directory Access Protocol) fstatat snap Below are some key concepts mentioned in this article: Term 中文說明 English Description AppArmor Ubuntu 的一種安全模組，用來限制應用程式能存取的資源，例如檔案、網路。 A security module in Ubuntu that restricts what resources an application can access. LDAP (Lightweight Directory Access Protocol) 一種常見的用戶驗證協定，常用於企業環境集中管理帳號。 A common user authentication protocol used for centralized account management, especially in enterprise environments. fstatat 一個 Linux 系統呼叫，用來查詢檔案資訊。這個錯誤就是因為它失敗了。 A Linux system call used to get information about files. The error occurs when this call fails. Snap Ubuntu 推出的套件系統，讓應用程式更容易安裝、升級與隔離管理。 A packaging system by Ubuntu that makes applications easy to install, update, and sandbox. Non-standard home directory: The user’s home directory is located outside the default /home/username path, often on a different drive or mount point Home directory is symlinked: The home directory appears to be in /home/username, but it’s actually a symbolic link pointing to another location 🧭 Problem-solving Framework Problem 1cannot fstatat canonical snap directory: Permission denied Root Cause Analysis In general, there are two common causes for this issue: The system is installed on an NTFS partition. The home directory is symlinked to a non-standard location. Check Filesystem Type 1234df -T /Filesystem Type 1K-blocks Used Available Use% Mounted on/dev/nvme0n1p4 ext4 669754920 44435324 591224492 7% / The system is installed on an ext4 partition Check for Symlinks 123456789ls -l /home/hsiangjenli/Documents/githubdrwxrwxr-x 10 hsiangjenli hsiangjenli 4096 一 27 17:05 blogdrwxrwxr-x 11 hsiangjenli hsiangjenli 4096 三 28 17:03 default-of-credit-card-clients-mlopsdrwxrwxr-x 8 hsiangjenli hsiangjenli 4096 一 29 16:40 hsiangjenli.github.iodrwxrwxr-x 5 hsiangjenli hsiangjenli 4096 三 27 14:28 java-from-pythondrwxrwxr-x 4 hsiangjenli hsiangjenli 4096 一 29 17:19 pic-beddrwxrwxr-x 11 hsiangjenli hsiangjenli 4096 二 16 08:44 python-package-templatedrwxrwxr-x 6 hsiangjenli hsiangjenli 4096 一 27 17:25 star-to-review None of the folders are symbolic links Why This Happens I don’t know … Solution Surprisingly, running the following command solved the issue: 1sudo dpkg-reconfigure apparmor Enter the destination directory that you want to use Reboot the computer~~ 🔁 Recap ✅ The error cannot fstatat canonical snap directory: Permission denied is often related to AppArmor restrictions ✅ Common causes include: Using an NTFS partition for your system or home directory Having a symlinked or non-standard home directory 🔍 In this case: The system is on an ext4 partition — ✅ not NTFS. The home directory is not a symlink — ✅ not symlinked. ⚠️ The root cause remains unclear 🛠 The problem was resolved by: Running sudo dpkg-reconfigure apparmor Entering the actual path to the home directory during configuration Rebooting the system 🔗 References ‘Permission denied’ when running snap applications on Ubuntu 16.04 as a LDAP user Permission denied error when running apps installed as snap packages - Ubuntu 17.04","link":"/blog/note_snap_permission_denied/"},{"title":"[tutorial] Using Mailgun + Python to send email","text":"📌 Introduction This tutorial covers how to send emails using Mailgun and Python. You’ll learn how to set up Mailgun, generate an API key, and write Python code to send emails with or without attachments. 🚀 Quick Start Mailgun Mailgun provides a free plan allows sending up to 100 emails per day. Here are three things you need to do Generate a Mailgun API key Remember your Mailgun domain name (used for sending email) Add your email to Mailgun (Mailgun only allows sending an email to authorized recipients) Create an API key Get your domain from Mailgun Set up your email &amp; verify it Add your email to mailgun Check your mailbox to verify it Python To see the entire code : mailgun/demo.py 12345MAILGUN_API_KEY = os.getenv(&quot;MAILGUN_API_KEY&quot;)MAILGUN_DOMAIN_NAME = os.getenv(&quot;MAILGUN_DOMAIN_NAME&quot;)MAILGUN_API_URL = ( f&quot;https://api.mailgun.net/v3/{MAILGUN_DOMAIN_NAME}.mailgun.org/messages&quot;) 1234567891011@error_handler_for_send_emaildef send_email(from_email: str, to_email: Union[str, list], subject: str, text: str): # Define the email parameters email_data = {&quot;from&quot;: from_email, &quot;to&quot;: to_email, &quot;subject&quot;: subject, &quot;text&quot;: text} # Send the email r = requests.post( url=MAILGUN_API_URL, auth=(&quot;api&quot;, MAILGUN_API_KEY), data=email_data ) return r 1234567891011121314151617181920212223@error_handler_for_send_emaildef send_email_with_attachment( from_email: str, to_email: Union[str, list], subject: str, text: str, attachment_paths: list,): # Define the email parameters email_data = {&quot;from&quot;: from_email, &quot;to&quot;: to_email, &quot;subject&quot;: subject, &quot;text&quot;: text} # Read the attachment files = [ (&quot;attachment&quot;, open(attachment_path, &quot;rb&quot;)) for attachment_path in attachment_paths ] # Send the email r = requests.post( url=MAILGUN_API_URL, auth=(&quot;api&quot;, MAILGUN_API_KEY), data=email_data, files=files ) return r Gmail After sending the email from Mailgun, you can check your inbox. It might be marked as spam, so you can check your spam folder to see if the email is there. 🔁 Recap Mailgun Setup: Generate an API key, retrieve your domain name, and verify your email Python Integration: Use the Mailgun API with Python to send emails programmatically Sending Attachments: Learn how to send emails with attachments using the Mailgun API 🔗 References https://www.mailgun.com/blog/it-and-engineering/send-email-using-python/ https://stackoverflow.com/questions/53861582/sent-email-via-python-using-mailgun-api","link":"/blog/tutorial_mailgun_python/"},{"title":"[note] Strategic Thinking Models","text":"📌 Introduction “ Unlocking Minds, Structuring Thoughts ” 🚀 曼陀羅九宮格 🚀 心流八通道","link":"/blog/note_strategic_thinking_models/"},{"title":"[tutorial] GitHub + PicGo + VSCode Extension","text":"📌 Introduction This article provides a tutorial on setting up GitHub, PicGo, and a VSCode extension to facilitate image uploading to GitHub repositories. It outlines the necessary prerequisites, the procedure to generate a GitHub token, and essential steps for configuring the PicGo extension in VSCode. 🚀 Quick Start Before You Start Make sure you have following: A Github Token with access to your repo A repo to store images GitHUb Generate GitHub Token Go to Settings/Developer settings/Personal access tokens/Token (classic) Click Generate new token (classic) Set a name for the token to identify it easily and choose No expiration Select the required scopes for the token Set Up Repo To ensure your images are accessible, set your repo to public. VScode Extension Install PicGo extension in VScode Set Pic Bed: Current to github Set Pic Bed &gt; Github: Repo to your previously created public repo. Format is {username}/{repo_name} Set Pic Bed: Uploader to github Set Pic Bed &gt; Github: Branch to the branch of your public repo Set Pic Bed &gt; Github: Path (Optional). If you want to store images in specific folder (e.g. images). Make sure to include a trailing slash (/), otherwise, it will be used as a prefix for image names Set Pic Bed &gt; Github: Token to the Github token you created earlier Troubleshooting If you see the following error, it means xclip is not installed: 1PicGo: xclip not found! Please install xclip before run picgo. To fix this, install xclip using the following command: 1sudo apt install xclip 🔁 Recap You need a Github token and a public repository for image storage. Install the PicGo extension in VSCode for image uploading. Follow specific configuration steps in the PicGo extension to link it with GitHub. Potential troubleshooting includes ensuring xclip is installed on your system.","link":"/blog/tutorial_github_picgo_vscode/"},{"title":"[note] Window 11 + Ubuntu 雙系統安裝紀錄","text":"🎒 預先準備 💻 電腦資訊 型號：VivoBook 14 X1405VA-0041K 系統：Windows 11 CPU：i5-13500H SSD：NVMe SAMSUNG MZVL4512HBLU-00BTW 進入 BIOS 快捷鍵：F2 選擇開機碟快捷鍵：F12 🎯 目標 目前的 SSD 已經安裝上 win 11，目標是將 1 TB 的 SSD 做磁碟分割後安裝上 Ubuntu 20.04 LTS - 350 GB - 650 GB 💻 操作流程 🚨 注意事項 根據網路上的教學文章，大部分的修改都是在 BIOS 選單內 但是，現在有些電腦的廠商會把這些選項關掉（避免使用者把電腦弄壞） 這也讓更改變得麻煩，最後可能會搞到需要重設 windows，需把電腦備份好 關掉 Bitlocker 確認 BIOS 已更新至最新版本 最新版本的 BIOS 通常包含修復錯誤和改進硬體相容性的功能，有助於避免安裝過程中的不必要問題 將 BIOS 的 Boot Mode 設定為 UEFI UEFI 是現代系統的標準開機模式，具有更好的硬碟分割支援、快速啟動和安全功能。Ubuntu 和 Windows 都建議使用 UEFI 而非傳統的 BIOS（CSM） 關閉 Secure Boot Secure Boot 的作用是防止未授權的操作系統啟動，但某些 Ubuntu 發行版本或自訂驅動程式可能無法正確通過驗證，導致安裝失敗 在 BIOS 中找到 Secure Boot 設定，將其設為 Disabled 關閉 Fast Boot（BIOS &amp; Windows Control Panel） Fast Boot 會跳過部分硬體初始化過程，可能導致 USB 開機盤無法被檢測到，從而影響 Ubuntu 的安裝 進入 BIOS，找到 Fast Boot 設定，將其設為 Disabled 在 Windows 中的 Control Panel 找到 Hardware and Sound 底下的 Power Option，把 Fast Starup 關閉 確認 SATA Configuration 設定為 AHCI 模式（這邊最有可能出現問題，BIOS 有些會沒有這些選項可以更改） 不能是 Raid 關閉 CSM（Compatibility Support Module） CSM 是用於支援傳統 BIOS 的相容性模式，關閉後系統會專注於使用 UEFI 啟動，減少可能的相容性問題 在 BIOS 中找到 CSM 設定，將其設為 Disabled Step 1 磁碟分割 首先會在 windows 上做磁碟分割，分成 windows 跟 ubuntu 兩個系統 在電腦上搜尋 Create and format hard disk partitions Step 2 關閉快速啟動 Windows - Fast Startup BIOS - Fast Boot Windows 在 windows 中 的 control panel 找到管理電源的選項，把 fast startup 關掉 Step 3 跟 Intel RST 有關的 driver 刪除 [1] 這個步驟會讓之後電腦開機的時候失敗，會需要整台電腦重設（需要有一顆強壯的心臟 💔💔💔…） 但是重設完之後才可以順利把 RST 關掉（把硬碟從 Raid 改成 AHCI），否則 ubuntu 在安裝的時候會讀取不到這個 SSD 按 Win + X 快捷鍵後找到 Device Manager 進去裡面找到 Storage Controllers，在裡面會看到 Intel RST 的 driver 這個就是安裝 ubuntu 過程中導致無法偵測到 SSD 的罪魁禍首！！！！ 請按照 Ubuntu Documentation - RST &amp; Ubuntu installation 裡面的步驟一步一步的卸載 Intel RST driver 按 Win + R，搜尋 regedit HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\iaStorV\\ 找到 Start 選項，把值改成 0 找到 StartOverride 把值改成 0 HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\storahci\\ 找到 Start 選項，把值改成 0 找到 StartOverride 把值改成 0 把 Intel RST driver 卸載 把 Intel RST driver 完全 uninstall，然後重新開機 重新開機的過程會藍屏，上面是顯示 INACCESSIBLE_BOOT_DEVICE，解決方式就是重新設定整台電腦 重設完之後 一樣按 Win + X 進入 Device Manager 看 Storage Controllers 裡面確認 Intel RST 是否還在 Step 4 安裝 Ubuntu 使用隨身碟安裝 Ubuntu 按 F12 選擇隨身碟當作開機碟 因為已經預先切好磁碟區，Installation Type 就選 Something else 一路按確認即可，後續安裝不太會有問題 驅動問題 過往安裝桌機跟自己舊筆電的時候都沒遇到 wifi 驅動問題 但是這台 vivobook 遇到了，最快的解法是直接買一個支援 linux 的無線連接器 TP-Link TL-WN725N22 專有名詞 CSM - Compatibility Support Module Intel RST - Intel Rapid Storage Technology Ubuntu Documentation - RST &amp; Ubuntu installation https://help.ubuntu.com/rst/ ↩︎","link":"/blog/note_chinese_u2004_win11/"},{"title":"[note] Want to install the latest version from a GitHub repo using pip","text":"📌 Introduction This article explains how to install a specific branch of a GitHub repository using pip, particularly focusing on the ‘devel’ branch, which is typically used for development purposes rather than stable releases. 🚀 Quick Start To install the development version from GitHub using pip, execute the following command: 1pip install git+https://github.com/username/repository.git@devel 🔁 Recap You can install a specific branch from GitHub using pip. The ‘devel’ branch typically contains unstable development versions. To install, use the command format: pip install git+{repo_url}@{branch_name}. Replace {repo_url} with your repository URL and {branch_name} with ‘devel’. Ensure you have pip installed to use this command.","link":"/blog/note_pip_github_branch/"},{"title":"[note] Fish?","text":"📌 Introduction This article introduces the FISH shell, a user-friendly interactive shell designed to improve the command line experience. It highlights its installation on MacOS and basic usage. 🚀 Quick Start Installation on MacOS 1brew install fish Using Fish Shell By typing fish to enter FISH’s shell 🔁 Recap FISH is a friendly interactive shell that enhances the command line experience. Installation on MacOS can be done using Homebrew with the command brew install fish. To start using FISH, simply type fish in the terminal. 🔗 References 如何在 Linux 中安裝、配置和使用 Fish Shell？ Finally, a command line shell for the 90s","link":"/blog/note_fish/"},{"title":"[note] MarkItDown: A tool for smoothly converting docx and pptx into markdown","text":"📌 Introduction This article discusses MarkItDown, a tool specifically designed to effortlessly convert docx and pptx files into markdown format. It highlights various Python libraries that serve as dependencies for this conversion process, enabling users to handle documents and multimedia content effectively. 🚀 Quick Start How MarkItDown works? Down below are the module use for MarkItDown 12345678910111213141516dependencies = [ &quot;beautifulsoup4&quot;, &quot;requests&quot;, &quot;mammoth&quot;, &quot;markdownify&quot;, &quot;numpy&quot;, &quot;python-pptx&quot;, &quot;pandas&quot;, &quot;openpyxl&quot;, &quot;pdfminer.six&quot;, &quot;puremagic&quot;, &quot;pydub&quot;, &quot;youtube-transcript-api&quot;, &quot;SpeechRecognition&quot;, &quot;pathvalidate&quot;,] mammoth https://pypi.org/project/mammoth/ Mammoth is a tool designed for converting documents like MS Word, Google Docs, and LibreOffice files into HTML python-pptx https://github.com/scanny/python-pptx A Python library that can create/read/update .pptx file openpyxl https://openpyxl.readthedocs.io/en/stable/ A Python library to read/write Excel 2010 xlsx xlsm xltx xltm file pdfminer https://github.com/pdfminer/pdfminer.six Pdfminer.six is a community-maintained version that was forked from original PDFMiner. This module helps users extract information from PDF files. pydub https://github.com/jiaaro/pydub Make it easy for you to manipulate audio in a simple way youtube-transcript-api https://github.com/jdepoix/youtube-transcript-api A Python API allows you to get the transcript for a given YouTube video SpeechRecognition https://github.com/Uberi/speech_recognition/tree/master Support for speech-to-text engines like Google Cloud Speech API, Wit.ai, Whisper, etc markdownify https://github.com/matthewwithanm/python-markdownify Convert HTML file into Markdown pathvalidate https://github.com/thombashi/pathvalidate A Python library to sanitize and validate strings such as filenames, file paths, etc puremagic https://github.com/cdgriffith/puremagic/tree/master Puremagic is a file type detection tool that can identify the type of an input file without relying on its extension. Since file extensions can be easily changed, using them alone to identify file type can be risky. This module defines a set of rules to read the file content and determine its type. 123456789101112131415# puremagic/magic_data.json{ &quot;extension_only&quot;: [ [&quot;&quot;, 0, &quot;.txt&quot;, &quot;text/plain&quot;, &quot;Text File&quot;], [&quot;&quot;, 0, &quot;.log&quot;, &quot;text/plain&quot;, &quot;Logger File&quot;], [&quot;&quot;, 0, &quot;.yaml&quot;, &quot;application/x-yaml&quot;, &quot;YAML File&quot;], [&quot;&quot;, 0, &quot;.yml&quot;, &quot;application/x-yaml&quot;, &quot;YAML File&quot;], [&quot;&quot;, 0, &quot;.toml&quot;, &quot;application/toml&quot;, &quot;TOML File&quot;], [&quot;&quot;, 0, &quot;.py&quot;, &quot;text/x-python&quot;, &quot;Python File&quot;], [&quot;&quot;, 0, &quot;.pyc&quot;, &quot;application/x-python&quot;, &quot;Python Complied File&quot;], [&quot;&quot;, 0, &quot;.pyd&quot;, &quot;application/x-python&quot;, &quot;Python Complied File&quot;], [&quot;&quot;, 0, &quot;.python_history&quot;, &quot;text/plain&quot;, &quot;Python History File&quot;], [&quot;&quot;, 0, &quot;.bat&quot;, &quot;application/x-script&quot;, &quot;Windows BAT file&quot;], [&quot;&quot;, 0, &quot;.gitconfig&quot;, &quot;text/plain&quot;, &quot;Git Ignore File&quot;],... 🔁 Recap MarkItDown allows smooth conversion of docx and pptx files to markdown format. A variety of dependencies are required for this conversion, including libraries for handling documents, audio, and data. Each library mentioned has its own specific functionality, such as converting Word documents to HTML or reading Excel files. 🔗 References https://pypi.org/project/mammoth/ https://github.com/scanny/python-pptx https://openpyxl.readthedocs.io/en/stable/ https://github.com/pdfminer/pdfminer.six https://github.com/jiaaro/pydub https://github.com/jdepoix/youtube-transcript-api https://github.com/Uberi/speech_recognition/tree/master https://github.com/matthewwithanm/python-markdownify https://github.com/thombashi/pathvalidate https://github.com/cdgriffith/puremagic/tree/master","link":"/blog/note_markitdown/"},{"title":"[note] Fixing Git Installation Issues in apache&#x2F;airflow:2.10.2 Docker Image","text":"📌 Introduction The article discusses the issue of permission errors when attempting to install packages from GitHub while using the apache/airflow:2.10.2 Docker image. It presents a solution that involves temporarily switching to the root user to install ‘git’ and then reverting to the airflow user for further installations. 🚀 Quick Start 12345678FROM apache/airflow:slim-2.10.2USER rootRUN apt-get update &amp;&amp; apt-get install -y gitUSER airflowCOPY requirements.txt requirements.txtRUN pip install --no-cache-dir -r requirements.txt 🔁 Recap Permission errors can occur with the apache/airflow:2.10.2 image when installing packages from GitHub. To resolve this issue, install git as the root user before switching back to the airflow user. The Dockerfile provided demonstrates the steps to perform these actions.","link":"/blog/note_airflow_docker_permission_error/"},{"title":"[note] Enhancing Code Clarity with TypedDict","text":"📌 Introduction This article discusses the benefits of using TypedDict in Python for enhancing code clarity when storing complex data. It highlights how TypedDict helps developers by providing suggestions through their IDE, while also noting its limitations regarding strict type enforcement. 🚀 Quick Start 12345678from typing import TypedDictimport datetimeclass News(TypedDict): title: str create_date: datetime.datetime content: str 🔁 Recap TypedDict is useful for maintaining code clarity with predefined fields. It enhances development efficiency by providing IDE suggestions. There are limitations to TypedDict, particularly regarding strict type checking. 🔗 References https://juejin.cn/post/7342790243009363977","link":"/blog/note_typedict/"},{"title":"[tutorial] Enhancing Commit Messages with commitollama: A Guide for VSCode and Local LLM Integration","text":"📌 Introduction This article introduces commitollama, an alternative to GitHub Copilot designed for generating commit messages using local LLMs, ensuring privacy for confidential projects. It outlines the installation process for the commitollama extension in VSCode and necessary setup steps to start using it effectively. 🚀 Quick Start How to use Install the extension in VSCode. Install Ollama to integrate the LLM. Installing Ollama Run the following command to install Ollama: 1curl -fsSL https://ollama.com/install.sh | sh After installation, you can run Ollama using: 1ollama This will display a list of available commands: 12345678910111213141516171819202122Usage: ollama [flags] ollama [command]Available Commands: serve Start ollama create Create a model from a Modelfile show Show information for a model run Run a model pull Pull a model from a registry push Push a model to a registry list List models ps List running models cp Copy a model rm Remove a model help Help about any commandFlags: -h, --help help for ollama -v, --version Show version informationUse &quot;ollama [command] --help&quot; for more information about a command. Download the Phi3 model (3.8b) by running: 1ollama pull phi3:3.8b Start the Ollama service using: 1ollama serve If you encounter the error message Error: listen tcp 127.0.0.1:11434: bind: address already in use, you can find a solution here . To restart Ollama, stop the current service and relaunch it: 12systemctl stop ollama.serviceollama serve To prevent the model from being deleted after downloading, refer to this discussion here . Setting Up VSCode After installing the extension, use a custom model for commit message generation. Press the button in the interface to automatically generate the commit message. 🔁 Recap commitollama is a privacy-focused commit message generator alternative to GitHub Copilot. The tool leverages open-source LLMs like Llama, Mistral, and Phi3. Easy integration with VSCode through a simple extension installation process. Users can easily retrieve models, run services, and generate commit messages efficiently. 🔗 References https://github.com/ollama/ollama/issues/707 https://github.com/ollama/ollama/issues/1493","link":"/blog/tutorial_commitollama/"},{"title":"[tutorial] Using Ollama with OpenCommit for Local Commit Message Generation","text":"📌 Introduction This article covers using Ollama with OpenCommit for generating commit messages locally. It includes an overview of running Ollama in a Docker container, instructions for using the Ollama CLI, and how to combine Ollama with OpenCommit for generating commit messages. 🚀 Quick Start Start a container 1docker run -d -v ollama:/root/.ollama -p 11434:11434 --name ollama-commit ollama/ollama:0.3.6 Enter the Docker container 1docker exec -it ollama-commit bash Pull model 1ollama run gemma2:2b Start a chat 1&gt;&gt;&gt; Send a message (/? for help) Exit the chat Type /bye to exit the chat. Install opencommit 1npm install -g opencommit Generate commit messages with local ollama server 1OCO_AI_PROVIDER='ollama/gemma2:2b' opencommit output: 1234567891011121314151617181920212223242526┌ open-commit│◇ 1 staged files: README.md│◇ 📝 Commit message generated│└ Generated commit message:——————————————————feat(README.md): add link to Ollama website and examples of running models——————————————————│◇ Confirm the commit message?│ No│◇ Do you want to regenerate the message ?│ Yes│◇ 📝 Commit message generated│└ Generated commit message:——————————————————feat(README.md): add link to Ollama website and examples of model usage in README.md Error code 127 123456789101112Error: llama runner process has terminated: exit status 127&gt;&gt;&gt; [GIN] 2024/08/28 - 18:43:24 | 200 | 68.455µs | 127.0.0.1 | HEAD &quot;/&quot;&gt;&gt;&gt; [GIN] 2024/08/28 - 18:43:24 | 200 | 7.845273ms | 127.0.0.1 | POST &quot;/api/show&quot;&gt;&gt;&gt; time=2024-08-28T18:43:24.392Z level=INFO source=memory.go:309 msg=&quot;offload to cpu&quot; layers.requested=-1 layers.model=33 layers.offload=0 layers.split=&quot;&quot; memory.available=&quot;[7.3 GiB]&quot; memory.required.full=&quot;5.5 GiB&quot; memory.required.partial=&quot;0 B&quot; memory.required.kv=&quot;1.0 GiB&quot; memory.required.allocations=&quot;[5.5 GiB]&quot; memory.weights.total=&quot;4.7 GiB&quot; memory.weights.repeating=&quot;4.6 GiB&quot; memory.weights.nonrepeating=&quot;105.0 MiB&quot; memory.graph.full=&quot;560.0 MiB&quot; memory.graph.partial=&quot;585.0 MiB&quot;&gt;&gt;&gt; time=2024-08-28T18:43:24.392Z level=INFO source=server.go:391 msg=&quot;starting llama server&quot; cmd=&quot;/tmp/ollama731275887/runners/cpu/ollama_llama_server --model /root/.ollama/models/blobs/sha256-ff82381e2bea77d91c1b824c7afb83f6fb73e9f7de9dda631bcdbca564aa5435 --ctx-size 8192 --batch-size 512 --embedding --log-disable --no-mmap --parallel 4 --port 33357&quot;&gt;&gt;&gt; time=2024-08-28T18:43:24.392Z level=INFO source=sched.go:450 msg=&quot;loaded runners&quot; count=1&gt;&gt;&gt; time=2024-08-28T18:43:24.393Z level=INFO source=server.go:591 msg=&quot;waiting for llama runner to start responding&quot;&gt;&gt;&gt; time=2024-08-28T18:43:24.393Z level=INFO source=server.go:625 msg=&quot;waiting for server to become available&quot; status=&quot;llm server error&quot;&gt;&gt;&gt; /tmp/ollama731275887/runners/cpu/ollama_llama_server: error while loading shared libraries: libllama.so: cannot open shared object file: No such file or directory&gt;&gt;&gt; time=2024-08-28T18:43:24.644Z level=ERROR source=sched.go:456 msg=&quot;error loading llama server&quot; error=&quot;llama runner process has terminated: exit status 127&quot;[GIN] 2024/08/28 - 18:43:24 | 500 | 266.021797ms | 127.0.0.1 | POST &quot;/api/chat&quot; The error code occurs when the Docker image version is greater than 0.3.6. Therefore, you need to pull the ollama image with version 0.3.6 and run the container. Click here to view the discussion. 🔁 Recap Ollama allows for the generation of commit messages using AI models. The article details setting up Ollama in a Docker environment. OpenCommit is integrated to simplify the process of generating commit messages using an AI model. Users can interact with the AI model through a chat interface. 🔗 References https://ollama.com/models https://github.com/ollama/ollama/issues/6541","link":"/blog/tutorial_ollama_opencommit/"},{"title":"[note] Installation of Golang (PATH)","text":"📌 Introduction This article provides a step-by-step guide on how to install Go on macOS and configure the system’s PATH variable to include Go binaries. 🚀 Quick Start Install Go using Homebrew: 1brew install go Verify the Installation: 1ls ~/go/bin/ Update PATH Temporarily: 1export PATH=$PATH:~/go/bin Update PATH Permanently: 12echo 'export PATH=$PATH:~/go/bin' &gt;&gt; ~/.zshrcsource ~/.zshrc 🔁 Recap The guide covers how to install Go programming language on macOS. It includes verification steps to check the installation. Instructions are provided for temporarily and permanently updating the PATH environment variable.","link":"/blog/note_go/"},{"title":"[tutorial] How to use psutil to monitor CPU and memory usage in python","text":"📌 Introduction This article introduces psutil, an open-source Python package that provides system information about CPU, memory, disks, and networks. It covers the installation of psutil and demonstrates useful functions for monitoring CPU and memory usage, as well as how to integrate it into Python code using decorators. 🚀 Quick Start 1pip install psutil Useful functions in psutil CPU 1234psutil.cpu_count() # get the number of CPUpsutil.cpu_percent() # get the usage of all CPUpsutil.cpu_percent(percpu=True) # get the usage of per CPUpsutil.cpu_percent(interval=1) # get the usage of all CPU in 1 second, using interval will get more robust result Memory 1234567info = psutil.virtual_memory()# total memoryinfo.total / 1024 / 1024 / 1024 # bytes -&gt; GB# the usage of memoryinfo.percent MacOS 1# svmem(total=25769803776, available=7726628864, percent=70.0, used=9045114880, free=791134208, active=6949453824, inactive=6915768320, wired=2095661056) Ubuntu 12# will get more information like buffers, cached etc..# svmem(total=33541988352, available=25899790336, percent=22.8, used=7087771648, free=2703233024, active=15287881728, inactive=14264188928, buffers=965103616, cached=22785880064, shared=8265728, slab=904495104) How to integrate psutil into our code? We can use psutil to monitor each function cpu and memory usage by using decorator. 1234567891011121314151617import psutildef monitor(func): def wrapper(*args, **kwargs): process = psutil.Process() cur_func_pid = process.pid process = psutil.Process(cur_func_pid) func(*args, **kwargs) cpu_usage = process.cpu_percent(interval=0.01) memory_usage = process.memory_info().rss / 1024 / 1024 / 1024 # bytes -&gt; GB print(f&quot;CPU usage: {cpu_usage}%&quot;) print(f&quot;Memory usage: {memory_usage}GB&quot;) return wrapper Example 12345678@monitordef example_code(): import numpy as np for i in range(100): np.random.rand(100, 100, 100)example_code() 🔁 Recap psutil is an open-source Python package for system monitoring. It provides useful functions to get CPU and memory usage information. You can use decorators to monitor CPU and memory usage of Python functions easily. 🔗 References Python常用库之psutil使用指南 简单介绍psutil库（virtual_memory()、cpu_percent() Python System Monitoring and Profiling with the psutil Module Psutil module in Python Administrative Tasks for Oracle Machine Learning for Python","link":"/blog/tutorial_psutil/"},{"title":"[tutorial] Build your own python package","text":"📌 Introduction Building your own Python package is beneficial for maintaining large projects, as it helps manage code that is otherwise scattered across directories. 🚀 Quick Start Create a setup.py file: 123from setuptools import setup, find_packagessetup(name=&quot;ntust_simslab&quot;, version=&quot;0.13&quot;, packages=find_packages()) Create a pyproject.toml file: 123456789101112131415[tool.poetry]name = &quot;ntust_simslab&quot;version = &quot;0.13&quot;description = &quot;A simple example for building a Python package.&quot;authors = [&quot;Hsiang-Jen Li &lt;hsiangjenli@gmail.com&gt;&quot;]readme = &quot;README.md&quot;packages = [{include = &quot;ntust_simslab&quot;}][tool.poetry.dependencies]python = &quot;^3.8&quot;requests = &quot;^2.28.2&quot;[build-system]requires = [&quot;poetry-core&quot;]build-backend = &quot;poetry.core.masonry.api&quot; Sign up for a PyPI account at https://pypi.org/ to publish your package. 🔁 Recap Building a Python package helps maintain code organization in larger projects. Using setup.py is the traditional method, while pyproject.toml is the modern approach with Poetry. It’s essential to have an account on PyPI to publish your package. 🔗 References https://github.com/NTUST-SiMS-Lab/tutorial-simple-pypkg https://pypi.org/","link":"/blog/tutorial_pypi_pkg/"},{"title":"[note] Installing GitHub Copilot CLI and Usage Guide","text":"📌 Introduction This article discusses how to install and use the GitHub Copilot CLI. It covers the installation process using npm, setting execution policies on Windows, and gives an example of how to use the CLI to get help on certain git commands. 🚀 Quick Start Install GitHub Copilot CLI:1npm install -g @githubnext/github-copilot-cli Set execution policy for PowerShell:1Set-ExecutionPolicy RemoteSigned -Scope CurrentUser Authenticate with GitHub Copilot CLI:1github-copilot-cli auth Test the CLI:1github-copilot-cli what-the-shell how to delete branch Output: ──────────────────── Command ──────────────────── git branch -d ────────────────── Explanation ────────────────── ○ git branch is used to list branches. ◆ -d deletes the branch . ✅ Run this command 📝 Revise query ❌ Cancel 🔁 Recap GitHub Copilot CLI can be installed easily via npm. Windows users need to set the execution policy to allow running scripts. The CLI provides assistance with git commands and outputs the command along with an explanation.","link":"/blog/note_installation_of_github_cli/"},{"title":"[note] Efficient Mind Mapping with Markmap: A Markdown-Based VScode Extension","text":"📌 Introduction This article describes how to use the Markmap extension for Visual Studio Code to convert Markdown syntax into a mind map, facilitating effective organization and visualization of thoughts and information. 🚀 Quick Start Install this extension on VS Code 123456789101112131415161718192021# **My Education**## Vocational high school### KFHS### Applied Foreign Languages## Bachelor### NKUST### Department of Money and Banking## Master### NTUST### Department of Industrial Management#### Data Science#### Introduction to Blockchain and Its Applications#### Industrial Internet of Things and Operational Technology Security#### Artificial Intelligence Technologies and Business Applications#### Machine Learning#### Sustainable Management for the Enterprises#### Production Management Preview 🔁 Recap Use the Markmap extension to visualize Markdown documents as interactive mind maps. Installation is simple and allows you to create a structured representation of your content. The preview feature provides a visual representation to enhance understanding.","link":"/blog/note_markmap/"},{"title":"[tutorial] Setting up Miniconda on Ubuntu","text":"📌 Introduction This article details the steps required to install Miniconda on Ubuntu, including downloading the installer and setting up the initial environment. 🚀 Quick Start 1sudo wget -c https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh 1sudo chmod +x Miniconda3-latest-Linux-x86_64.sh 1./Miniconda3-latest-Linux-x86_64.sh 12conda activateconda env list 🔁 Recap Miniconda is a minimal installer for conda, useful for managing environments and packages in Python. The installation process includes downloading the installer, making it executable, and running it to set up Miniconda. After installation, you can easily create and manage Python environments using conda commands. 🔗 References https://medium.com/featurepreneur/setting-up-miniconda-on-ubuntu-4bf6bece6f9b","link":"/blog/tutorial_ubuntu_miniconda/"},{"title":"[note] Gatsby Usage","text":"📌 Introduction This article provides a guide on how to install Gatsby and create a new Gatsby site using starter themes. It covers the installation steps, commands to set up a Gatsby site, and links to troubleshoot common errors. 🚀 Quick Start Install Gatsby 12npm install -g gatsby-cligatsby --version gatsby-starter-blog 123gatsby new hjl https://github.com/gatsbyjs/gatsby-starter-blogcd hjlgatsby develop gatsby-starter-julia 12gatsby new RN https://github.com/niklasmtj/gatsby-starter-juliacd rn Use Legacy Peer Dependencies 1--legacy-peer-deps 🔁 Recap Installation of Gatsby CLI using npm is straightforward with the command npm install -g gatsby-cli. After installation, you can check the version of Gatsby installed. To create a new Gatsby site, several starter themes can be used, such as gatsby-starter-blog and gatsby-starter-julia. Common errors related to npm and Gatsby are well documented through various links provided in the article. 🔗 References Commands (Gatsby CLI) npm WARN old lockfile The package-lock.json file was created with an old version of npm Error: Command failed with exit code 1: npm install #27548 npm-upgrade","link":"/blog/note_gatsby/"}],"tags":[{"name":"docker","slug":"docker","link":"/blog/tags/docker/"},{"name":"ubuntu","slug":"ubuntu","link":"/blog/tags/ubuntu/"},{"name":"windows","slug":"windows","link":"/blog/tags/windows/"},{"name":"intel rst","slug":"intel-rst","link":"/blog/tags/intel-rst/"},{"name":"devops","slug":"devops","link":"/blog/tags/devops/"},{"name":"sa","slug":"sa","link":"/blog/tags/sa/"},{"name":"ea","slug":"ea","link":"/blog/tags/ea/"},{"name":"linux","slug":"linux","link":"/blog/tags/linux/"},{"name":"static-site","slug":"static-site","link":"/blog/tags/static-site/"},{"name":"gatsby","slug":"gatsby","link":"/blog/tags/gatsby/"},{"name":"go","slug":"go","link":"/blog/tags/go/"},{"name":"python","slug":"python","link":"/blog/tags/python/"},{"name":"markdown","slug":"markdown","link":"/blog/tags/markdown/"},{"name":"vs-code","slug":"vs-code","link":"/blog/tags/vs-code/"},{"name":"note","slug":"note","link":"/blog/tags/note/"},{"name":"git","slug":"git","link":"/blog/tags/git/"},{"name":"pip","slug":"pip","link":"/blog/tags/pip/"},{"name":"snap","slug":"snap","link":"/blog/tags/snap/"},{"name":"permission denied","slug":"permission-denied","link":"/blog/tags/permission-denied/"},{"name":"ollama","slug":"ollama","link":"/blog/tags/ollama/"},{"name":"picgo","slug":"picgo","link":"/blog/tags/picgo/"},{"name":"mailgun","slug":"mailgun","link":"/blog/tags/mailgun/"}],"categories":[],"pages":[{"title":"","text":"@import url('https://fonts.googleapis.com/css2?family=Lato:ital,wght@0,100;0,300;0,400;0,700;0,900;1,100;1,300;1,400;1,700;1,900&display=swap'); @font-face { font-family: 'jf-openhuninn'; src: url('https://hsiangjenli.github.io/static/font/jf-openhuninn/jf-openhuninn.ttf'); } :root { --global-text-color: #4e4e4e; } body { font-family: \"Lato\", 'jf-openhuninn', \"Verdana\" !important; < HEAD ======= } .section { background-color: #e1e1e1 !important; >>>>>>> ab6907511f947861e6203c41a9f40d03cc1697aa } strong { color: var(--global-text-color) !important; font-weight: 700 !important; } em { color: var(--global-text-color) !important; } .title { font-weight: bolder !important; color: var(--global-text-color) !important; } .content h1, .content h2, .content h3, .content h4, .content h5, .content h6 { color: var(--global-text-color) !important; font-weight: bolder !important; } .content h1, .card-content h2 { padding-bottom: .75rem !important; border-bottom: 1px solid #e4e4e7 !important; } .card-content .article { color: var(--global-text-color) !important; } .navbar-item { color: var(--global-text-color) !important; font-weight: 700 !important; } .highlight-body { background-color: #eaeaea !important; }","link":"/blog/css/custom.css"}]}