{"posts":[{"title":"[note] Higgs-Audio Common Token Summary","text":"Note: This page is an AI-generated (gpt-5-mini-2025-08-07) translation from Traditional Chinese and may contain minor inaccuracies. 📌 Introduction When encountering errors while working with Higgs-Audio, I plan to carefully study the entire operation of Higgs-Audio from start to finish, so I’ll start by understanding tokens. Because Higgs-Audio needs to handle both “text” and “audio” tokens simultaneously, it looks rather complicated at first, so I plan to thoroughly organize how many tokens there are. 🚀 Introduction to Tokens Used in Higgs-Audio Lowercase tokens: boundary control (start / end) Uppercase tokens: content replacement (replaced with actual data during preprocessing) Text Text markers &lt;|begin_of_text|&gt;: start of text sequence &lt;|end_of_text|&gt;: end of text sequence &lt;|eom_id|&gt;: end of message &lt;|eot_id|&gt;: end of turn Message roles (System, User, Assistant) &lt;|start_header_id|&gt;: marks the start of a message role &lt;|end_header_id|&gt;: marks the end of a message role Audio &lt;|audio_bos|&gt;: marks the start of an input audio segment &lt;|audio_eos|&gt;: marks the end of an input audio segment &lt;|audio_out_bos|&gt;: marks the starting point of output audio tokens &lt;|scene_desc_start|&gt;: start of recording environment/scene description &lt;|scene_desc_end|&gt;: end of recording environment/scene description &lt;|AUDIO|&gt;: audio input &lt;|AUDIO_OUT|&gt;: discrete audio tokens Others Tools &lt;|recipient|&gt;: tool call Reserved words &lt;|reserved_special_token_*|&gt; Generation style guidelines &lt;|generation_instruction_start|&gt;: start of generation rules/style instructions &lt;|generation_instruction_end|&gt;: end of generation rules/style instructions Event-type sound effects &lt;SE&gt; &lt;SE_s&gt; &lt;SE_e&gt; 12345678910111213for tag, replacement in [ (&quot;[laugh]&quot;, &quot;&lt;SE&gt;[Laughter]&lt;/SE&gt;&quot;), (&quot;[humming start]&quot;, &quot;&lt;SE_s&gt;[Humming]&lt;/SE_s&gt;&quot;), (&quot;[humming end]&quot;, &quot;&lt;SE_e&gt;[Humming]&lt;/SE_e&gt;&quot;), (&quot;[music start]&quot;, &quot;&lt;SE_s&gt;[Music]&lt;/SE_s&gt;&quot;), (&quot;[music end]&quot;, &quot;&lt;SE_e&gt;[Music]&lt;/SE_e&gt;&quot;), (&quot;[music]&quot;, &quot;&lt;SE&gt;[Music]&lt;/SE&gt;&quot;), (&quot;[sing start]&quot;, &quot;&lt;SE_s&gt;[Singing]&lt;/SE_s&gt;&quot;), (&quot;[sing end]&quot;, &quot;&lt;SE_e&gt;[Singing]&lt;/SE_e&gt;&quot;), (&quot;[applause]&quot;, &quot;&lt;SE&gt;[Applause]&lt;/SE&gt;&quot;), (&quot;[cheering]&quot;, &quot;&lt;SE&gt;[Cheering]&lt;/SE&gt;&quot;), (&quot;[cough]&quot;, &quot;&lt;SE&gt;[Cough]&lt;/SE&gt;&quot;),]: 🔁 Recap Learned there are two main token categories: boundary control and content replacement Compiled the tokens appearing in Higgs-Audio and their uses 🔗 References boson-ai/higgs-audio","link":"/blog/note-higgs-audio-token.en/"},{"title":"[note] Higgs-Audio 常用 token 彙整","text":"📌 簡介 在操作 Higgs-Audio 的時候遇到錯誤，打算從頭到尾好好認真研究 Higgs-Audio 的整個運作過程，所以打算先從 token 開始了解，因為在 Higgs-Audio 內需要同時處理「文字」以及「音訊」兩種 token，初次看頗為複雜，打算好好整理裡面有多少 token。 🚀 介紹 Higgs-Audio 內使用到的 Token 小寫 token：邊界控制（開始 / 結束） 大寫 token：內容替換（前處理時會替換成實際資料） 文字 文字標記 &lt;|begin_of_text|&gt;：文字序列開頭 &lt;|end_of_text|&gt;：文字序列結束 &lt;|eom_id|&gt;：訊息結束 &lt;|eot_id|&gt;：回合結束 訊息角色（System、User、Assistant） &lt;|start_header_id|&gt;：界定一段訊息的角色開始 &lt;|end_header_id|&gt;：界定一段訊息的角色結束 音訊 &lt;|audio_bos|&gt;：標示輸入音訊片段的開始 &lt;|audio_eos|&gt;：標示輸入音訊片段的結束 &lt;|audio_out_bos|&gt;：標示輸出音訊 token 的起點 &lt;|scene_desc_start|&gt;：錄音環境／場景描述開始 &lt;|scene_desc_end|&gt;：錄音環境／場景描述節結束 &lt;|AUDIO|&gt;：音訊輸入 &lt;|AUDIO_OUT|&gt;：離散音訊 token 其它 工具 &lt;|recipient|&gt;：工具呼叫 保留字 &lt;|reserved_special_token_*|&gt; 生成風格規範 &lt;|generation_instruction_start|&gt;：生成規則／風格等指示開始 &lt;|generation_instruction_end|&gt;：生成規則／風格等指示結束 事件類音效 &lt;SE&gt; &lt;SE_s&gt; &lt;SE_e&gt; 12345678910111213for tag, replacement in [ (&quot;[laugh]&quot;, &quot;&lt;SE&gt;[Laughter]&lt;/SE&gt;&quot;), (&quot;[humming start]&quot;, &quot;&lt;SE_s&gt;[Humming]&lt;/SE_s&gt;&quot;), (&quot;[humming end]&quot;, &quot;&lt;SE_e&gt;[Humming]&lt;/SE_e&gt;&quot;), (&quot;[music start]&quot;, &quot;&lt;SE_s&gt;[Music]&lt;/SE_s&gt;&quot;), (&quot;[music end]&quot;, &quot;&lt;SE_e&gt;[Music]&lt;/SE_e&gt;&quot;), (&quot;[music]&quot;, &quot;&lt;SE&gt;[Music]&lt;/SE&gt;&quot;), (&quot;[sing start]&quot;, &quot;&lt;SE_s&gt;[Singing]&lt;/SE_s&gt;&quot;), (&quot;[sing end]&quot;, &quot;&lt;SE_e&gt;[Singing]&lt;/SE_e&gt;&quot;), (&quot;[applause]&quot;, &quot;&lt;SE&gt;[Applause]&lt;/SE&gt;&quot;), (&quot;[cheering]&quot;, &quot;&lt;SE&gt;[Cheering]&lt;/SE&gt;&quot;), (&quot;[cough]&quot;, &quot;&lt;SE&gt;[Cough]&lt;/SE&gt;&quot;),]: 🔁 重點回顧 了解到 Token 兩大分類：邊界控制、內容替換 整理在 Higgs-Audio 出現的 Token 以及其用處 🔗 參考資料 boson-ai/higgs-audio","link":"/blog/note_higgs_audio_token/"},{"title":"[tutorial] Docling + ibm-granite&#x2F;granite-docling-258M","text":"Note: This page is an AI-generated (gpt-5-mini-2025-08-07) translation from Traditional Chinese and may contain minor inaccuracies. 📌 Introduction This demonstrates how to use the Docling document conversion tool with IBM’s newly released VLM ibm-granite/granite-docling-258M to convert PDFs, images, and other files into structured Markdown or HTML formats for easier downstream use with LLMs. 🚀 Introducing the document conversion tool + Vision Language Model Docling Input: PDF, DOCX, PPTX, XLSX, HTML, WAV, MP3, VTT, images (PNG, TIFF, JPEG, …) Output: a unified DoclingDocument Purpose: provide a unified and simple tool to convert various documents into a structured (LLM-Ready) format Vision Language Model (VLM) This test uses IBM’s newly released VLM model ibm-granite/granite-docling-258M. Compared to the older ds4sd/SmolDocling-256M-preview, with nearly the same number of parameters, the model size was reduced from 3.55 GB to 530 MB. VLM used by the older Docling VLM used by the new Docling Practical steps Docling + ibm-granite/granite-docling-258M 12uv add docling uv add mlx-vlm # I use a Mac; install only if you need acceleration with M-series chips Supported VLM models Old: vlm_model_specs.SMOLDOCLING_MLX New: vlm_model_specs.GRANITEDOCLING_MLX Module overview VlmPipelineOptions: configuration for using a VLM for document conversion (e.g., model name, saving images, etc.) DocumentConverter: configures processing methods for different input formats Image handling modes 123456class ImageRefMode(str, Enum): &quot;&quot;&quot;ImageRefMode.&quot;&quot;&quot; PLACEHOLDER = &quot;placeholder&quot; # just a place-holder EMBEDDED = &quot;embedded&quot; # embed the image as a base64 REFERENCED = &quot;referenced&quot; # reference the image via uri PLACEHOLDER: use &lt;!-- IMAGE --&gt; to represent images (does not save the image) EMBEDDED: convert the image to base64 and store it directly in the converted document REFERENCED: reference the image via a URI Full code 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556from pathlib import Pathfrom docling.datamodel.base_models import InputFormatfrom docling.document_converter import ( DocumentConverter, ImageFormatOption, PdfFormatOption,)from docling.pipeline.vlm_pipeline import VlmPipelinefrom docling.datamodel.pipeline_options import VlmPipelineOptionsfrom docling.datamodel import vlm_model_specsfrom docling_core.types.doc import ImageRefModeimport osmodel = vlm_model_specs.GRANITEDOCLING_MLXvlm_pipeline_options = VlmPipelineOptions( vlm_options=model, generate_page_images=True, generate_picture_images=False, images_scale=2.0, do_picture_description=True,)converter = DocumentConverter( format_options={ InputFormat.IMAGE: ImageFormatOption( pipeline_cls=VlmPipeline, pipeline_options=vlm_pipeline_options, ), InputFormat.PDF: PdfFormatOption( pipeline_cls=VlmPipeline, pipeline_options=vlm_pipeline_options, ), })FILE_PATHS = os.listdir(&quot;data/raw/&quot;)output_dir = Path(f&quot;data/output/{model.repo_id.replace('/', '_')}&quot;)output_dir.mkdir(parents=True, exist_ok=True)for file_path in FILE_PATHS: input_file_path = Path(f&quot;data/raw/{file_path}&quot;) output_file_path = output_dir / f&quot;{input_file_path.stem}.md&quot; doc = converter.convert(source=input_file_path, raises_on_error=True).document output_file_path.parent.mkdir(parents=True, exist_ok=True) with open(output_file_path, &quot;w&quot;, encoding=&quot;utf-8&quot;) as f: f.write(doc.export_to_markdown(image_mode=ImageRefMode.EMBEDDED)) with open(output_file_path.with_suffix(&quot;.html&quot;), &quot;w&quot;, encoding=&quot;utf-8&quot;) as f: f.write( doc.export_to_html(image_mode=ImageRefMode.EMBEDDED, split_page_view=True) ) 🔁 Key takeaways Install docling and use the latest model ibm-granite/granite-docling-258M for recognition On Macs with M-series chips you can additionally install mlx-vlm and choose models that support acceleration Two output modes: export directly to Markdown or HTML 🔗 References Docling/Vision models Docling/Usage/Basic-usage","link":"/blog/tutorial-docling-ibm-granite-granite-docling-258m.en/"},{"title":"[tutorial] Docling + ibm-granite&#x2F;granite-docling-258M","text":"📌 簡介 示範如何使用 Docling 文件轉換工具與 IBM 最新推出的 ibm-granite/granite-docling-258M VLM，將 PDF、Image 等檔案轉換成結構化的 Markdown 或 HTML 格式，方便後續搭配 LLM 使用 🚀 介紹文件轉換工具 + 視覺語言模型 Docling 輸入：PDF、DOCX、PPTX、XLSX、HTML、WAV、MP3、VTT、images（PNG, TIFF, JPEG, …） 輸出：統一的 DoclingDocument 目的：提供一個統一且簡單的工具，把各種文件轉換成結構化格式（LLM-Ready Format） 視覺語言模型（Vision Language Model, VLM） 本次實測 IBM 最新推出的 VLM 模型 ibm-granite/granite-docling-258M，相較於舊版的 ds4sd/SmolDocling-256M-preview，兩者參數量幾乎一樣的情況下，模型體積從 3.55 GB 降到 530 MB 舊版 Docling 使用的 VLM 新版 Docling 使用的 VLM 實際操作 Docling + ibm-granite/granite-docling-258M 12uv add docling uv add mlx-vlm # 筆者使用 Mac，要使用 M 系列晶片加速才需要裝 支援的 VLM 模型 舊版：vlm_model_specs.SMOLDOCLING_MLX 新版：vlm_model_specs.GRANITEDOCLING_MLX 模組介紹 VlmPipelineOptions：使用 VLM 進行文件轉換的設定檔（例如：模型名稱、保存圖片等等…） DocumentConverter：設定不同 Input Format 的處理方式 圖片處理方式 123456class ImageRefMode(str, Enum): &quot;&quot;&quot;ImageRefMode.&quot;&quot;&quot; PLACEHOLDER = &quot;placeholder&quot; # just a place-holder EMBEDDED = &quot;embedded&quot; # embed the image as a base64 REFERENCED = &quot;referenced&quot; # reference the image via uri PLACEHOLDER：使用 &lt;!-- IMAGE --&gt; 來代表圖片（不保存圖片的意思） EMBEDDED：把圖片轉換成 base64，直接保存在轉換後的文件內 REFERENCED：使用 URI 引用圖片 完整程式碼 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556from pathlib import Pathfrom docling.datamodel.base_models import InputFormatfrom docling.document_converter import ( DocumentConverter, ImageFormatOption, PdfFormatOption,)from docling.pipeline.vlm_pipeline import VlmPipelinefrom docling.datamodel.pipeline_options import VlmPipelineOptionsfrom docling.datamodel import vlm_model_specsfrom docling_core.types.doc import ImageRefModeimport osmodel = vlm_model_specs.GRANITEDOCLING_MLXvlm_pipeline_options = VlmPipelineOptions( vlm_options=model, generate_page_images=True, generate_picture_images=False, images_scale=2.0, do_picture_description=True,)converter = DocumentConverter( format_options={ InputFormat.IMAGE: ImageFormatOption( pipeline_cls=VlmPipeline, pipeline_options=vlm_pipeline_options, ), InputFormat.PDF: PdfFormatOption( pipeline_cls=VlmPipeline, pipeline_options=vlm_pipeline_options, ), })FILE_PATHS = os.listdir(&quot;data/raw/&quot;)output_dir = Path(f&quot;data/output/{model.repo_id.replace('/', '_')}&quot;)output_dir.mkdir(parents=True, exist_ok=True)for file_path in FILE_PATHS: input_file_path = Path(f&quot;data/raw/{file_path}&quot;) output_file_path = output_dir / f&quot;{input_file_path.stem}.md&quot; doc = converter.convert(source=input_file_path, raises_on_error=True).document output_file_path.parent.mkdir(parents=True, exist_ok=True) with open(output_file_path, &quot;w&quot;, encoding=&quot;utf-8&quot;) as f: f.write(doc.export_to_markdown(image_mode=ImageRefMode.EMBEDDED)) with open(output_file_path.with_suffix(&quot;.html&quot;), &quot;w&quot;, encoding=&quot;utf-8&quot;) as f: f.write( doc.export_to_html(image_mode=ImageRefMode.EMBEDDED, split_page_view=True) ) 🔁 重點回顧 安裝 docling 以及使用最新的模型 ibm-granite/granite-docling-258M 進行辨識 使用 Mac 的 M 系列晶片可額外安裝 mlx-vlm，並挑選可以加速的模型 兩種輸出模式（直接匯出成 Markdown 或是 HTML） 🔗 參考資料 Docling/Vision models Docling/Usage/Basic-usage","link":"/blog/tutorial_docling_ibm_granite258m/"},{"title":"[note] Introduction to the Easy Approach to Requirements Syntax (EARS)","text":"Note: This page is an AI-generated (gpt-5-mini-2025-08-07) translation from Traditional Chinese and may contain minor inaccuracies. 📌 Introduction With the rise of AI Code Assist, many have found that pure “vibe coding” is hard to maintain, and Context Engineering along with traditional development processes (BDD, TDD, SDD) are being re-emphasized. This article introduces two simple and useful requirement writing templates: EARS and GWT. 🚀 Introduction to EARS Differences between EARS and BDD’s GWT statements EARS GWT Used for writing requirements describing behavior Focuses on stating clear requirements verifying requirements Characteristics emphasizes single-sentence, verifiable requirement statements uses “scenarios” for acceptance testing Sentence template When an error occurs, the system Shall record the error Given the system is operating normally, When an error occurs, Then it should record the error EARS: use sentence templates to ‘write’ requirements GWT: use scenarios to ‘verify’ requirements Common EARS sentence types Ubiquitous: the requirement must always hold (no trigger or condition needed) State-driven (While): the requirement must hold while a certain state is true Event-driven (When): the system must respond when an event occurs Complex: a combination of the above patterns (e.g., event + state together) Option (Where): handles variant requirements of the product or system (e.g., different configurations, regions) 🔁 Key takeaways Highlights the difference in use cases between EARS and GWT 🔗 References Introduction to Requirements Engineering Using the EARS method to improve requirements engineering Introduction to EARS (Easy Approach to Requirements Syntax)","link":"/blog/note-easy-approach-to-requirements-syntax-ears.en/"},{"title":"[note] 介紹簡易需求結構方法（Easy Approach to Requirements Syntax，EARS）","text":"📌 簡介 隨著 AI Code Assist 盛行，大家發現單純的「Vibe Coding」難以維護，Context Engineering 與傳統開發流程（BDD、TDD、SDD）開始被重新重視。本文將介紹 EARS 與 GWT 兩種簡單好用的需求撰寫模版。 🚀 介紹 EARS EARS 與 BDD 的 GWT 語句差別 EARS GWT 用在 撰寫需求 描述行為 著重在 講出清楚的需求 驗證需求 特色 強調「單句、可驗證」的需求條文 用「情境」來「驗收」測試 句型模板 When 錯誤發生，系統 Shall 紀錄錯誤 Given 系統正常運作，When 錯誤發生，Then 應紀錄錯誤 EARS：用句型「寫」需求 GWT：用情境「驗證」需求 EARS 常見句型 Ubiquitous：需求永遠都要成立（不用加觸發或條件） State-driven（While）：在某個狀態成立時，需求必須成立 Event-driven（When）：在某事件發生時，系統必須回應 Complex：以上句型的組合（例如事件 + 狀態一起描述） Option（Where）：處理產品或系統的變體需求（例如不同配置、地區） 🔁 重點回顧 介紹 EARS 與 GWT 的使用場景差別 🔗 參考資料 需求工程簡介 Introduction to Requirements Engineering 采用 EARS 方法来改进需求工程 Introduction to EARS (Easy Approach to Requirements Syntax)","link":"/blog/note_ears_gwt/"},{"title":"[注意] Docker Model Runner 安裝","text":"註記：此頁為由 AI（gpt-5-mini-2025-08-07）自動翻譯自英文原文，可能含有少量不準確之處。 📌 介紹 在 Ubuntu 24.04 上安裝 Docker Model Plugin 時，我遇到 apt 找不到該套件的問題。原來 Docker 軟體庫指向了錯誤的發行版本（focal 而不是 noble）。 ⭐ 注意 這篇文章最初在我遇到實際問題時，在 ChatGPT 的協助下草擬。我已驗證解決方案並修訂內容，以確保面對類似問題的其他人可以得到準確且清楚的說明。 🚀 快速開始 12345678910111213141516171819sudo apt-get updatesudo apt-get install docker-model-plugin -yHit:1 http://tw.archive.ubuntu.com/ubuntu noble InRelease Hit:2 http://tw.archive.ubuntu.com/ubuntu noble-updates InRelease Hit:3 http://tw.archive.ubuntu.com/ubuntu noble-backports InRelease Hit:4 https://packages.microsoft.com/repos/edge stable InRelease Hit:5 https://brave-browser-apt-release.s3.brave.com stable InRelease Hit:6 https://packages.microsoft.com/repos/code stable InRelease Hit:7 http://security.ubuntu.com/ubuntu noble-security InRelease Get:8 https://download.docker.com/linux/ubuntu focal InRelease [57.7 kB] Hit:9 https://ppa.launchpadcontent.net/mozillateam/ppa/ubuntu jammy InRelease Fetched 57.7 kB in 7s (8650 B/s)Reading package lists... DoneN: Skipping acquire of configured file 'main/binary-i386/Packages' as repository 'https://brave-browser-apt-release.s3.brave.com stable InRelease' doesn't support architecture 'i386'Reading package lists... DoneBuilding dependency tree... DoneReading state information... DoneE: Unable to locate package docker-model-plugin 當我依照 How to Run Docker Model Runner on Ubuntu 24.04 的教學操作時，發現 apt install 找不到 docker-model-plugin。解決方法是 12345678910111213sudo apt-get updatesudo apt-get install \\ ca-certificates curl gnupg lsb-releasesudo mkdir -p /etc/apt/keyringssudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg \\ | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpgecho \\ &quot;deb [arch=$(dpkg --print-architecture) \\ signed-by=/etc/apt/keyrings/docker.gpg] \\ https://download.docker.com/linux/ubuntu \\ $(lsb_release -cs) stable&quot; \\ | sudo tee /etc/apt/sources.list.d/docker.list &gt; /dev/nullsudo apt-get update 🔁 小結 此錯誤發生是因為 Docker APT 軟體庫指向了錯誤的發行版本（focal 而非 noble） 修正此問題需要新增正確的 Docker GPG 金鑰並為 Ubuntu 24.04 設定正確的軟體庫 更新 APT 來源後，docker-model-plugin 套件就能安裝了 🔗 參考資料 How to Run Docker Model Runner on Ubuntu 24.04","link":"/blog/note-docker-model-runner-installation.zh-TW/"},{"title":"[note] Docker Model Runner Installation","text":"📌 Introduction While installing the Docker Model Plugin on Ubuntu 24.04, I ran into an issue where apt couldn’t locate the package. It turned out that the Docker repository was pointing to the wrong release (focal instead of noble). ⭐ Note This article was initially drafted with the help of ChatGPT based on a real issue I encountered. I verified the solution and revised the content to ensure accuracy and clarity for others facing similar problems. 🚀 Quick Start 12345678910111213141516171819sudo apt-get updatesudo apt-get install docker-model-plugin -yHit:1 http://tw.archive.ubuntu.com/ubuntu noble InRelease Hit:2 http://tw.archive.ubuntu.com/ubuntu noble-updates InRelease Hit:3 http://tw.archive.ubuntu.com/ubuntu noble-backports InRelease Hit:4 https://packages.microsoft.com/repos/edge stable InRelease Hit:5 https://brave-browser-apt-release.s3.brave.com stable InRelease Hit:6 https://packages.microsoft.com/repos/code stable InRelease Hit:7 http://security.ubuntu.com/ubuntu noble-security InRelease Get:8 https://download.docker.com/linux/ubuntu focal InRelease [57.7 kB] Hit:9 https://ppa.launchpadcontent.net/mozillateam/ppa/ubuntu jammy InRelease Fetched 57.7 kB in 7s (8650 B/s)Reading package lists... DoneN: Skipping acquire of configured file 'main/binary-i386/Packages' as repository 'https://brave-browser-apt-release.s3.brave.com stable InRelease' doesn't support architecture 'i386'Reading package lists... DoneBuilding dependency tree... DoneReading state information... DoneE: Unable to locate package docker-model-plugin When I following the tuorial from How to Run Docker Model Runner on Ubuntu 24.04. I found an issue that apt install cannot find docker-model-plugin. The solution is 12345678910111213sudo apt-get updatesudo apt-get install \\ ca-certificates curl gnupg lsb-releasesudo mkdir -p /etc/apt/keyringssudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg \\ | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpgecho \\ &quot;deb [arch=$(dpkg --print-architecture) \\ signed-by=/etc/apt/keyrings/docker.gpg] \\ https://download.docker.com/linux/ubuntu \\ $(lsb_release -cs) stable&quot; \\ | sudo tee /etc/apt/sources.list.d/docker.list &gt; /dev/nullsudo apt-get update 🔁 Recap The error occurred because the Docker APT repository was pointing to the wrong release (focal instead of noble) Fixing the issue required adding the correct Docker GPG key and configuring the proper repository for Ubuntu 24.04 After updating the APT sources, the docker-model-plugin package became available for installation 🔗 References How to Run Docker Model Runner on Ubuntu 24.04","link":"/blog/note_docker_model_runner/"},{"title":"[note] ngrok - 免費靜態網域","text":"註記：此頁為由 AI（gpt-5-mini-2025-08-07）自動翻譯自英文原文，可能含有少量不準確之處。 📌 簡介 ngrok 為使用者提供免費的靜態網域！ 🚀 快速開始 安裝 ngrok 1sudo snap install ngrok 建立網域 登入 ngrok 並建立你的個人網域（隨機） 設定 Token 1ngrok config add-authtoken $YOUR_AUTHTOKEN 建立隧道 1ngrok http --url=$URL $PORT 🔗 參考資料 適用於所有 ngrok 使用者的靜態網域","link":"/blog/note-ngrok-static-domain-for-free.zh-TW/"},{"title":"[note] ngrok - static domain for free","text":"📌 Introduction ngrok provides users with free static domains! 🚀 Quick Start Install ngrok 1sudo snap install ngrok Create Domain Login to ngrok and create your personal domain (random) Setup Token 1ngrok config add-authtoken $YOUR_AUTHTOKEN Create Tunnel 1ngrok http --url=$URL $PORT 🔗 References Static domains for all ngrok users","link":"/blog/note_ngrok_free_static_domain/"},{"title":"[note] AWS encounters InvalidToken or InvalidClientTokenId","text":"Note: This page is an AI-generated (gpt-5-mini-2025-08-07) translation from Traditional Chinese and may contain minor inaccuracies. 📌 Introduction When using the AWS CLI, if the MFA-generated AWS_SESSION_TOKEN expires, it can cause InvalidToken or InvalidClientTokenId errors 🚀 Quick Start Issue description The Token ID and Secret are correct, but operations fail to authenticate (InvalidToken) Running aws s3 ls shows the following error 1An error occurred (InvalidToken) when calling the ListBuckets operation: The provided token is malformed or otherwise invalid. Running aws sts get-session-token to generate a token shows the following error 1An error occurred (InvalidClientTokenId) when calling the GetSessionToken operation: The security token included in the request is invalid Solution This issue occurs when an AWS_SESSION_TOKEN was previously used and has likely expired, causing authentication to fail. You should first unset the following environment variables 123unset AWS_ACCESS_KEY_IDunset AWS_SECRET_ACCESS_KEYunset AWS_SESSION_TOKEN 🔁 Recap Session tokens obtained via AWS MFA become unusable after expiration You need to remove AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY, and AWS_SESSION_TOKEN from environment variables 🔗 References An error occurred (InvalidToken) when calling the ListBuckets operation: The provided token is malformed or otherwise invalid. aws s3 ls aws cli get error “The security token included in the request is invalid”","link":"/blog/note-aws-invalidtoken-invalidclienttokenid.en/"},{"title":"[note] AWS 遇到 InvalidToken 或是 InvalidClientTokenId","text":"📌 Introduction 使用 AWS CLI 時，若 MFA 產生的 AWS_SESSION_TOKEN 過期，會導致 InvalidToken 或 InvalidClientTokenId 錯誤 🚀 Quick Start 問題描述 Token ID、Secret 都是正確，卻在操作時無法順利登入（InvalidToken） 使用 aws s3 ls 出現下面錯誤 1An error occurred (InvalidToken) when calling the ListBuckets operation: The provided token is malformed or otherwise invalid. 使用 aws sts get-session-token 產生 Token 時出現下面錯誤 1An error occurred (InvalidClientTokenId) when calling the GetSessionToken operation: The security token included in the request is invalid 解決方法 會發生這類型問題在於過去曾經使用過 AWS_SESSION_TOKEN，可能已經過期導致無法順利登入，要先 unset 以下參數 123unset AWS_ACCESS_KEY_IDunset AWS_SECRET_ACCESS_KEYunset AWS_SESSION_TOKEN 🔁 Recap 使用 AWS MFA 進行登入的 Session Token 會在過期後無法使用 需要先把 AWS_ACCESS_KEY_ID、AWS_SECRET_ACCESS_KEY、AWS_SESSION_TOKEN 從環境變數中去除 🔗 References An error occurred (InvalidToken) when calling the ListBuckets operation: The provided token is malformed or otherwise invalid. aws s3 ls aws cli get error “The security token included in the request is invalid”","link":"/blog/note_aws_mfa_login_error/"},{"title":"[tutorial] Using AWS SAM to Create and Run Lambda Functions","text":"Note: This page is an AI-generated (gpt-5-mini-2025-08-07) translation from Traditional Chinese and may contain minor inaccuracies. 📌 Introduction This guide explains how to use AWS SAM to create and run Lambda functions, including basic installation, project structure explanation, and the workflow for running Lambdas locally 🚀 Quick Start AWS CLI 1brew install awscli AWS SAM (Serverless Application Model) CLI 1brew install aws-sam-cli Initialize SAM project 1sam init Project structure overview 1234567891011121314151617181920.├── __init__.py├── events│ └── event.json├── hello_world│ ├── __init__.py│ ├── app.py│ └── requirements.txt├── README.md├── samconfig.toml├── template.yaml└── tests ├── __init__.py ├── integration │ ├── __init__.py │ └── test_api_gateway.py ├── requirements.txt └── unit ├── __init__.py └── test_handler.py events/ - Directory for JSON files containing mock events (event payloads) used to test Lambda functions hello_world/ - Where the application is placed; Lambda-related functions including the handler (e.g., app.py) and dependencies (e.g., requirements.txt) tests/ - Folder for unit tests samconfig.toml - Stores SAM CLI execution parameters (e.g., deployment region, Stack name, S3 bucket) to simplify configuration when running sam deploy template.yaml - Defines all Lambda functions; the main IaC core file (which services are used and their dependencies); it’s an extension of AWS CloudFormation syntax template.yaml You can use the CloudFormation Linter tool cfn-lint to detect formatting and property errors in the file Header 1234AWSTemplateFormatVersion: '2010-09-09'Transform: AWS::Serverless-2016-10-31Description: &gt; TODO.... AWSTemplateFormatVersion - The version number of AWS CloudFormation Transform - Tells CloudFormation that this template uses SAM to extend the syntax Description - Project description Content Globals - Default settings provided to Resources Resources - AWS resources to create; refer to AWS resource and property types reference, AWS SAM resources and properties Outputs - Expected outputs after deployment (the information you need to know) samconfig.toml See AWS SAM CLI configuration file, Configuring the AWS SAM CLI, AWS SAM CLI command reference The purpose is to simplify the complexity when using sam commands Original Optimized with samconfig sam build --cached --parallel --use-containers sam build sam local invoke --env-vars locals.json sam local invoke sam local start-api --env-vars locals.json --warm-containers EAGER sam local start-api Local Invoke 1sam local invoke 1234567891011No current session found, using default AWS::AccountId Invoking app.lambda_handler (python3.13) Local image is up-to-date Using local image: public.ecr.aws/lambda/python:3.13-rapid-x86_64. Mounting /Users/XXXXXX/Documents/TEST/hello_world as /var/task:ro,delegated, inside runtime container START RequestId: f6a6ec50-58b2-432c-9381-ec45ca43b130 Version: $LATESTEND RequestId: e883464b-1216-43ae-b0fe-f7f803a73057REPORT RequestId: e883464b-1216-43ae-b0fe-f7f803a73057 Init Duration: 1.26 ms Duration: 381.91 ms Billed Duration: 382 ms Memory Size: 128 MB Max Memory Used: 128 MB{&quot;statusCode&quot;: 200, &quot;body&quot;: &quot;{\\&quot;message\\&quot;: \\&quot;hello world\\&quot;}&quot;} 🔁 Recap Installation commands Understand the AWS SAM project structure Know the purpose of specific files template.yaml and samconfig.toml and their official documentation for fields Invoke a simple Hello World Lambda function locally 🔗 References Day02 - Environment Setup (1): Install AWS CLI, Docker, AWS SAM CLI","link":"/blog/tutorial-aws-sam-lambda.en/"},{"title":"[tutorial] 使用 AWS SAM 建立與執行 Lambda 函數","text":"📌 Introduction 主要介紹如何使用 AWS SAM 建立與執行 Lambda 函數，包含基本安裝、專案結構說明，以及在本地端執行 Lambda 的操作流程 🚀 Quick Start AWS CLI 1brew install awscli AWS SAM (Serverless Application Model) CLI 1brew install aws-sam-cli 初始化 SAM project 1sam init 介紹專案架構 1234567891011121314151617181920.├── __init__.py├── events│ └── event.json├── hello_world│ ├── __init__.py│ ├── app.py│ └── requirements.txt├── README.md├── samconfig.toml├── template.yaml└── tests ├── __init__.py ├── integration │ ├── __init__.py │ └── test_api_gateway.py ├── requirements.txt └── unit ├── __init__.py └── test_handler.py events/ - 放置模擬事件（Event Payload）的 Json 檔，用來測試 Lambda 函數 hello_world/ - Application 的放置處，與 Lambda 有關的函數，包含 handler 函式（例如 app.py）以及依賴（例如 requirements.txt） tests/ - 單元測試的資料夾 samconfig.toml - 儲存 SAM CLI 執行參數（如部署區域、Stack 名稱、S3 bucket 等），用來簡化 sam deploy 時的設定流程 template.yaml - 定義所有 Lambda 函數，IaC 的主要核心檔案（主要會用到哪些服務，互相的相依關係），是基於 AWS CloudFormation 的擴充語法 template.yaml 可使用 CloudFormation Linter 工具 cfn-lint 對檔案偵測格式、屬性錯誤 Header 1234AWSTemplateFormatVersion: '2010-09-09'Transform: AWS::Serverless-2016-10-31Description: &gt; TODO.... AWSTemplateFormatVersion - AWS CloudFormation 的版本號 Transform - 告訴 CloudFormation 這個模板要額外使用 SAM 來擴充語法 Description - 專案介紹 Content Globals - 預設設定，提供給 Resources 使用 Resources - 建立的 AWS 資源，可參考 AWS resource and property types reference、AWS SAM resources and properties Outputs - 在部署完後預期印出的結果（你需要知道哪些資訊） samconfig.toml 可參考 AWS SAM CLI configuration file、Configuring the AWS SAM CLI、AWS SAM CLI command reference 目的是為了簡化使用 sam 指令時的複雜度 Original Optimized with samconfig sam build --cached --parallel --use-containers sam build sam local invoke --env-vars locals.json sam local invoke sam local start-api --env-vars locals.json --warm-containers EAGER sam local start-api Local Invoke 1sam local invoke 1234567891011No current session found, using default AWS::AccountId Invoking app.lambda_handler (python3.13) Local image is up-to-date Using local image: public.ecr.aws/lambda/python:3.13-rapid-x86_64. Mounting /Users/XXXXXX/Documents/TEST/hello_world as /var/task:ro,delegated, inside runtime container START RequestId: f6a6ec50-58b2-432c-9381-ec45ca43b130 Version: $LATESTEND RequestId: e883464b-1216-43ae-b0fe-f7f803a73057REPORT RequestId: e883464b-1216-43ae-b0fe-f7f803a73057 Init Duration: 1.26 ms Duration: 381.91 ms Billed Duration: 382 ms Memory Size: 128 MB Max Memory Used: 128 MB{&quot;statusCode&quot;: 200, &quot;body&quot;: &quot;{\\&quot;message\\&quot;: \\&quot;hello world\\&quot;}&quot;} 🔁 Recap 安裝指令 理解 AWS SAM 的專案架構 知道特定檔案 template.yaml、samconfig.toml 檔案用途以及欄位的官方相關文件 在地端 Invoke 一個簡單的 Hello World Lambda Function 🔗 References Day02-環境準備(一)安裝AWS CLI、Docker、AWS SAM CLI","link":"/blog/tutorial_chinese_aws_sam_install_and_lambda/"},{"title":"[教學] 掃描模型的簡單範例","text":"註記：此頁為由 AI（gpt-5-mini-2025-08-07）自動翻譯自英文原文，可能含有少量不準確之處。 📌 介紹 本文示範如何使用一個簡單的範例與 modelscan 工具來偵測不安全的 PyTorch 模型。 🚀 快速開始 開始之前，您需要安裝以下套件 1pip install numpy torch modelscan 準備安全模型 1234567891011121314151617from torch import nnimport torchclass SafeModel(nn.Module): def __init__(self): super(SafeModel, self).__init__() self.linear = nn.Linear(10, 1) def forward(self, x): return self.linear(x) if __name__ == &quot;__main__&quot;: model = SafeModel() # save the model torch.save(model.state_dict(), &quot;safe_model.pth&quot;) 準備惡意模型 這是一個在載入時會產生輸出的惡意模型。 123456789101112131415from torch import nnimport torchimport osclass MaliciousModel: def __reduce__(self): print(&quot;Reduce called!&quot;) # 應該會印出 return (os.system, (&quot;echo 'This is a malicious model!' &gt; malicious_output.txt&quot;,)) if __name__ == &quot;__main__&quot;: model = MaliciousModel() # save the model torch.save(model, &quot;malicious_model.pth&quot;) 載入模型 Torch 已經有基本保護，因此我們需要暫時關閉 weights_only 選項。當你載入該模型後，你會看到名為 malicious_output.txt 的檔案。這表示惡意行為已經在載入時發生。 1234567import torchsafe_model_path = &quot;safe_model.pth&quot;malicious_model_path = &quot;malicious_model.pth&quot;s_model = torch.load(safe_model_path)m_model = torch.load(malicious_model_path, weights_only=False) 使用 modelscan 掃描模型 安全模型 1modelscan -p safe_model.pth 123456789Scanning /Users/hsiangjenli/Documents/github/mlops-survey/safe_model.pth:safe_model/data.pkl using modelscan.scanners.PickleUnsafeOpScan model scan--- Summary --- No issues found! 🎉--- Skipped --- Total skipped: 7 - run with --show-skipped to see the full list. 惡意模型 1modelscan -p malicious_model.pth 12345678910111213141516171819202122232425Scanning /Users/hsiangjenli/Documents/github/mlops-survey/malicious_model.pth:malicious_model/data.pkl using modelscan.scanners.PickleUnsafeOpScan model scan--- Summary ---Total Issues: 1Total Issues By Severity: - LOW: 0 - MEDIUM: 0 - HIGH: 0 - CRITICAL: 1--- Issues by Severity ------ CRITICAL ---Unsafe operator found: - Severity: CRITICAL - Description: Use of unsafe operator 'system' from module 'posix' - Source: /Users/hsiangjenli/Documents/github/mlops-survey/malicious_model.pth:malicious_model/data.pkl--- Skipped --- Total skipped: 5 - run with --show-skipped to see the full list. 🔁 重點回顧 建立了一個安全模型與一個惡意模型（在載入時會產生輸出） 使用 modelscan 掃描了兩個模型 🔗 參考資料 https://github.com/protectai/modelscan","link":"/blog/tutorial-a-toy-example-of-scanning-models.zh-TW/"},{"title":"[tutorial] A toy example of scanning models","text":"📌 Introduction This article shows how to detect unsafe PyTorch models using a simple example and the modelscan tool. 🚀 Quick Start Before start you need to install following packages 1pip install numpy torch modelscan Prepare Safe Model 1234567891011121314151617from torch import nnimport torchclass SafeModel(nn.Module): def __init__(self): super(SafeModel, self).__init__() self.linear = nn.Linear(10, 1) def forward(self, x): return self.linear(x) if __name__ == &quot;__main__&quot;: model = SafeModel() # save the model torch.save(model.state_dict(), &quot;safe_model.pth&quot;) Prepare Malicious Model This is a malicious model that will generate an output when you load it. 123456789101112131415from torch import nnimport torchimport osclass MaliciousModel: def __reduce__(self): print(&quot;Reduce called!&quot;) # 應該會印出 return (os.system, (&quot;echo 'This is a malicious model!' &gt; malicious_output.txt&quot;,)) if __name__ == &quot;__main__&quot;: model = MaliciousModel() # save the model torch.save(model, &quot;malicious_model.pth&quot;) Load model Torch already has basic protection, so we need to temporarily turn off the weights_only option. After you load the model, you will see a file called malicious_output.txt. This means the malicious behavior has already happened suddenly. 1234567import torchsafe_model_path = &quot;safe_model.pth&quot;malicious_model_path = &quot;malicious_model.pth&quot;s_model = torch.load(safe_model_path)m_model = torch.load(malicious_model_path, weights_only=False) Using modelscan to scan the model Safe Model 1modelscan -p safe_model.pth 123456789Scanning /Users/hsiangjenli/Documents/github/mlops-survey/safe_model.pth:safe_model/data.pkl using modelscan.scanners.PickleUnsafeOpScan model scan--- Summary --- No issues found! 🎉--- Skipped --- Total skipped: 7 - run with --show-skipped to see the full list. Malicious Model 1modelscan -p malicious_model.pth 12345678910111213141516171819202122232425Scanning /Users/hsiangjenli/Documents/github/mlops-survey/malicious_model.pth:malicious_model/data.pkl using modelscan.scanners.PickleUnsafeOpScan model scan--- Summary ---Total Issues: 1Total Issues By Severity: - LOW: 0 - MEDIUM: 0 - HIGH: 0 - CRITICAL: 1--- Issues by Severity ------ CRITICAL ---Unsafe operator found: - Severity: CRITICAL - Description: Use of unsafe operator 'system' from module 'posix' - Source: /Users/hsiangjenli/Documents/github/mlops-survey/malicious_model.pth:malicious_model/data.pkl--- Skipped --- Total skipped: 5 - run with --show-skipped to see the full list. 🔁 Recap Created a safe model and a malicious model (which generates output on load) Scanned both models using modelscan 🔗 References https://github.com/protectai/modelscan","link":"/blog/tutorial_modelscan_toy_example/"},{"title":"[reflection] First Experience with Codex","text":"📌 Introduction In short, Codex didn’t perform well at all. 🚀 Quick Start Background - This repo is a refactor of my 30 days of daily notes. The goal is to make the structure more clear and organized. Task 1 – This repo contains my daily notes. Your job is to read all the notes and help reorganize them. Task 2 – Read all the notes and rewrite them using the same structure: Abstract, Content, Recap, and Reference. Also, check for spelling errors and improve the content. Task 1 Result Maybe it’s my fault. Maybe my instruction was not clear. Codex created a README.md file with a table of contents (TOC) like this. It looks okay, but I wanted it to read all notes and help reorganize them, not just create a TOC. Task 2 Result I don’t know why, but Codex followed my instruction to rewrite the notes… However, it removed almost all content and only kept a very short abstract (1–2 lines). The quality of the rewritten content is also very bad.","link":"/blog/reflection_codex/"},{"title":"[reflection] 與 Codex 的第一次體驗","text":"註記：此頁為由 AI（gpt-5-mini-2025-08-07）自動翻譯自英文原文，可能含有少量不準確之處。 📌 介紹 簡而言之，Codex 完全表現不佳。 🚀 快速開始 Background - 此倉儲是我 30 天每日筆記的重構。目標是讓結構更清晰且有條理。 Task 1 – 此倉儲包含我的每日筆記。你的工作是閱讀所有筆記並協助重新整理它們。 Task 2 – 閱讀所有筆記並以相同結構重寫：Abstract、Content、Recap 和 Reference。同時檢查拼字錯誤並改善內容。 任務 1 結果 也許是我的錯。也許我的指示不夠清楚。Codex 建立了一個 README.md 檔案，內含如下的目錄 (TOC)。看起來沒問題，但我希望它能閱讀所有筆記並協助重新整理，而不只是建立一個目錄。 任務 2 結果 我不知道為何，但 Codex 照著我的指示去重寫筆記……然而，它幾乎刪除了所有內容，只保留了一個非常短的摘要（1–2 行）。重寫後內容的品質也很差。","link":"/blog/reflection-first-experience-with-codex.zh-TW/"},{"title":"[注意] OCI 工件？","text":"註記：此頁為由 AI（gpt-5-mini-2025-08-07）自動翻譯自英文原文，可能含有少量不準確之處。 📌 什麼是 OCI Artifact? OCI Artifact 的全名是 Open Container Initiative Artifact。它是一種統一的格式，可用來儲存任何內容——無論是 Docker image、Helm chart、WASM module、ML 模型、SBOM、政策或掃描報告。 🚀 OCI Artifact 結構 Tag – 一個可讀的人類名稱（例如 nginx:1.0），用來指向 manifest 或 index。Tag 是版本標籤。 Index – 一個 manifest 的清單，常用於多平台工件。 Manifest – 描述一個工件（例如 Docker image、Helm chart）並參考 blobs。 Blobs – 實際內容，例如 .tar.gz、二進位檔或工件使用的設定檔。 🔗 參考資料 OCI Image Layout Specification ORAS - Understanding OCI artifacts","link":"/blog/note-oci-artifact.zh-TW/"},{"title":"[note] OCI Artifact?","text":"📌 What is an OCI Artifact? The full name of OCI Artifact is Open Container Initiative Artifact. It is a unified format that can be used to store anything — whether it’s a Docker image, Helm chart, WASM module, ML model, SBOM, policy, or scan report. Most importantly, anything that follows the OCI format can be uploaded to or downloaded from a registry (e.g., Harbor, DockerHub, Artifact Hub). 🚀 OCI Artifact Structure Tag – A human-readable name (e.g., nginx:1.0) that points to a manifest or index. Tags are version labels. Index – A list of manifests, often used for multi-platform artifacts. Manifest – Describes an artifact (e.g., Docker image, Helm chart) and references blobs. Blobs – Actual content like .tar.gz, binaries, or configs used by the artifact. 🔗 References OCI Image Layout Specification ORAS - Understanding OCI artifacts","link":"/blog/note_oci_artifact/"},{"title":"[note] Mac — Using Colima instead of Docker Desktop: FAQ","text":"Note: This page is an AI-generated (gpt-5-mini-2025-08-07) translation from Traditional Chinese and may contain minor inaccuracies. 📌 Introduction To use Docker on a Mac, you don’t have to install the official Docker Desktop; you can use lighter alternatives like Colima. However, if you previously installed Docker Desktop and later installed the Docker CLI via Homebrew, leftover settings may cause some errors. 🚀 Steps Error messages 12# Error 1docker: Cannot connect to the Docker daemon at unix:///Users/XXXXXXXX/.docker/run/docker.sock. Is the docker daemon running? 12# Error 2docker: error getting credentials - err: exec: &quot;docker-credential-desktop&quot;: executable file not found in $PATH, out: `` Cause These errors occur when Docker Desktop was initially used and then removed in favor of Colima, but some original settings remained in use. Solution Error 1 Installing with brew install docker installs the Docker CLI only, not the Docker Engine. Because the Docker Engine must run on a Linux-based system and macOS isn’t Linux, you need to provide a VM. Docker Desktop used to run a VM in the background, so this wasn’t noticeable; after removing Docker Desktop you must provide a VM for Docker to run. Install colima 1brew install colima Start colima 1colima start Use Docker commands normally Error 2 If Docker Desktop was previously installed, some settings may persist and cause this error. Edit config.json 1nano ~/.docker/config.json Remove the following section 123{ &quot;credsStore&quot;: &quot;desktop&quot;} 🔁 Recap This note summarizes two common errors: Docker cannot connect to the daemon docker-credential-desktop not found causing credential errors 🔗 References Day 07：Developing for Kubernetes with KinD - MacOS Using Colima to quickly build a Kubernetes development environment","link":"/blog/note-mac-docker-desktop-colima.en/"},{"title":"[note] Mac 不裝 Docker Desktop，改用 Colima 常見問題整理","text":"📌 介紹 在 Mac 上要用 Docker，不一定要裝官方的 Docker Desktop，也可以改用像 Colima 這種比較輕量的選擇。不過，如果之前有裝過 Docker Desktop，後來又直接用 Homebrew 裝 Docker CLI，可能會因為一些舊設定沒清乾淨，遇到一些錯誤。 🚀 操作 錯誤訊息 12# 錯誤 1docker: Cannot connect to the Docker daemon at unix:///Users/XXXXXXXX/.docker/run/docker.sock. Is the docker daemon running? 12# 錯誤 2docker: error getting credentials - err: exec: &quot;docker-credential-desktop&quot;: executable file not found in $PATH, out: `` 原因 因為剛開始使用 Docker Desktop 安裝，而後又將其刪除，改用 Colima，然原先的設定繼續沿用，故造成錯誤。 解法 錯誤 1 直接使用 brew install docker 安裝的是 Docker 的 CLI，而非 Docker Engine。因為 Docker Engine 必須跑在 Linux-based 的系統上，但是 mac 並非使用 Linux，所以需要額外開 VM。過去 Docker Desktop 會在背後開 VM，所以沒注意到，這次將 Docker Desktop 移除就需要額外準備 VM 給 Docker 運作。 安裝 colima 1brew install colima 執行 colima 1colima start 正常操作 Docker 指令 錯誤 2 若一開始先安裝 Docker Desktop 有些設定會沿用，進而導致錯誤發生。 至 config.json 中修改 1nano ~/.docker/config.json 把裡面的這段刪除 123{ &quot;credsStore&quot;: &quot;desktop&quot;} 🔁 Recap 這篇筆記整理了兩個常見錯誤： Docker 無法連線到 daemon 找不到 docker-credential-desktop 導致憑證錯誤 🔗 參考資料 Day 07：Developing for Kubernetes with KinD - MacOS 使用 Colima 快速打造 Kubernetes 開發環境","link":"/blog/note_chinese_mac_docker_colima/"},{"title":"[chatgpt] Comparison and Transition Paths: Enterprise Architect, Solution Architect, and DevOps Roles","text":"Note: This page is an AI-generated (gpt-5-mini-2025-08-07) translation from Traditional Chinese and may contain minor inaccuracies. 📌 Introduction ⭐ Note This article was generated by ChatGPT and published after human review. Content is for reference only. It mainly discusses the relationship between DevOps, SA, and EA roles and how a DevOps engineer can transition to an SA or EA role. 🧭 Role Positioning and Differences Overview Enterprise Architect (EA): Operates at the enterprise level to define long-term IT strategy and architecture blueprints, ensuring technical solutions align with the company mission and business objectives [1] [2] EA is like a city planner, drawing the master plan for the company’s technical land [3] They focus on the big picture and long-term strategy, defining standards and governance frameworks to guide technical decision-making. Solution Architect (SA): Focuses on a specific product or project, assesses business requirements, and designs the corresponding technical solution [1:1] SA acts as a bridge, connecting business needs to the final technical implementation [1:2] They are similar to an architect who draws the blueprint for a single building (a single system), ensuring the solution complies with enterprise architecture standards while meeting project requirements [3:1] SA pays attention to concrete details and implementation, leading teams to translate the architecture into deliverable systems. DevOps Engineer: Focuses on software delivery pipelines and operations automation, responsible for collaboration between development and operations, implementing CI/CD processes, automated deployment, and system monitoring to ensure reliable and fast software delivery [2:1] DevOps emphasizes tools and process optimization, like the city’s infrastructure maintainer, building roads and pipelines (deployment processes) and keeping traffic flowing (stable operations). Commonality: All three roles require broad technical knowledge and good communication and coordination skills, but they emphasize different aspects. EA prioritizes strategy and a holistic view, SA emphasizes project technical design and coordination for implementation, and DevOps emphasizes engineering practice and automation efficiency. Depending on company size and industry, whether these roles exist and how responsibilities are divided vary — the larger and more complex the company, the more necessary it is to clearly distinguish roles like EA and SA [1:3]. Below we describe the job content, required skills, and common technology differences for EA, SA, and DevOps in startup and financial industry contexts, and then offer concrete advice and learning resources for DevOps transitioning to SA or EA. 🏗️ Enterprise Architect (EA) Role Responsibilities and Positioning: The EA is responsible for creating the overall technical blueprint in an organization and ensuring IT strategy aligns with business strategy [1:4] They analyze internal and external enterprise needs, identify capability gaps, and plan future technology roadmaps [1:5] EA typically does not dive into implementation details but sets standards and delegates implementation tasks to Solution Architects or Technical Architects [1:6] A key EA task is architecture governance: using architectural models and principles to guide projects to follow enterprise standards and avoid siloed approaches. EAs often collaborate with senior management to determine which emerging technologies (e.g., AI, blockchain) can provide competitive advantage [1:7] Core Skills: EAs need cross-domain technical knowledge and business acumen. They must be familiar with enterprise architecture frameworks (e.g., TOGAF, Zachman), understand business processes and industry trends, and connect complex technical concepts to business strategy [1:8] [1:9] EA should have excellent strategic planning and analytical skills, using architecture views and models to analyze the overall IT landscape, identify bottlenecks, and plan improvements [1:10] They also require strong communication and influence to articulate IT strategy value to executives and coordinate departments to reach consensus [1:11] Soft skills: EA must work systematically and focus on architecture governance to ensure technical decisions comply with corporate standards and regulations. Common Technologies and Tools: Because EA looks at the big picture, their technical focus is on architecture modeling and strategy management tools rather than specific programming languages. Common tools include enterprise architecture management (EAM) tools like Archi, Sparx EA, LeanIX for drawing architecture blueprints, asset inventories, and roadmaps [1:12] EA also needs to be familiar with major cloud platforms (AWS, Azure, GCP) and enterprise solutions (databases, ERP, middleware) at a high level to make strategic technology selection decisions. Although EAs don’t write code, understanding technical standards and frameworks (like microservices architecture, enterprise integration patterns, security frameworks) is important to assess feasibility and compatibility. Startup vs. Financial Industry Differences: In startups, companies are small and products are single-focused; EA may be played by the CTO, architecture is simple and evolves quickly with emphasis on agility rather than strict governance. Therefore a startup EA may concurrently act as SA and technical lead and set architecture direction flexibly. In contrast, in large financial enterprises (banks, insurers) with complex business lines and high compliance demands, there are usually dedicated EA teams. Financial EAs tend to follow formal architecture frameworks (e.g., TOGAF), produce standardized architecture blueprints and governance processes, ensuring systems (legacy mainframes, data warehouses, new apps) comply with strategy and regulations. Financial EAs also focus on risk control, data privacy, and regulatory compliance, and are particularly cautious when introducing new technologies. 🧱 Solution Architect (SA) Role Responsibilities and Positioning: Solution Architects focus on specific projects or products. They take the principles and blueprints set by EAs, analyze business needs deeply, and design feasible technical solutions [1:13] SA work begins with requirements analysis: confirming functional and quality requirements (QA) with product managers and business units, then designing an architecture solution (system component decomposition, module interactions, data flows, etc.) among many technical options. During design, SA must balance enterprise-wide architecture with technical implementation details [1:14] Once the solution is approved, SA often assumes a technical leadership role: guiding development teams to understand the design, selecting technologies, and ensuring the architecture is properly implemented throughout development. SA also assesses implementation risks to ensure the delivered system matches the original architecture and requirements [1:15] In short, SA is the technical lead in a project, ensuring the right solution is correctly implemented. Core Skills: As a bridge between business and technology, SA needs both breadth and depth. They must master system design principles and architecture patterns (layered architectures, microservices, event-driven, cloud-native design), choosing suitable architecture for different problems. Typically coming from senior developer backgrounds, SAs have deep experience in at least one or two technology stacks (e.g., Java/Spring, .NET, or specific front-end/back-end domains) and understand code-level practices to design realizable solutions. Additionally, SA must have good communication and coordination to explain architecture to development teams, discuss consistency with EA, and explain how the technical solution solves business problems to non-technical stakeholders. Project management skills are also important, as SAs often act as technical project managers ensuring aligned progress [1:16] Overall, SA must be able to analyze complex problems and decompose them into executable plans while possessing the soft skills to lead implementation. Common Technologies and Tools: SA technologies vary by industry and project but typically include a broad set of development and architecture tools. For cloud platforms, SA needs familiarity with AWS, Azure, GCP and the ability to use cloud services (compute, storage, databases, messaging) to build scalable systems [2:2] For application architecture, SA commonly uses UML or the C4 Model to draw system diagrams and architecture tools (Visio, draw.io, PlantUML). Languages and frameworks depend on domain: backend in finance often favors Java/Spring or .NET; startups might use Python/Django, Node.js/Express, Go. SA must choose appropriate databases (SQL vs NoSQL), message brokers (Kafka, RabbitMQ), etc. Beyond development tech, SA should understand DevOps CI/CD tools principles—containers, Kubernetes, CI tools (Jenkins, GitLab CI)—to design deployable and operable solutions [2:3] SA also needs to consider performance and security, so familiarity with performance testing tools and security best practices is necessary. In short, SA’s tech knowledge covers everything needed to take a system from whiteboard to production. Startup vs. Financial Industry Differences: In startups, SAs often also serve as technical team leads. With limited staff, SAs may design architecture and directly code, being more hands-on. Startups emphasize rapid iteration, so SAs favor lightweight frameworks and cloud services to speed development and evolve after launch. In financial enterprises, SAs are usually distinct roles and less involved in daily coding, focusing on architecture design and coordination. Financial SAs face extensive legacy system integration and must propose solutions for business domains (payments, risk control) while complying with enterprise architecture standards. They often use enterprise-grade technologies (IBM WebSphere, Oracle DB) and designs that stress security and transactional consistency. Financial SAs must closely align with EA, coordinate with project managers and external vendors. In short, startup SAs are more versatile and fast-moving; financial SAs are more specialized and ensure reliability in strict environments. 🔧 DevOps Engineer Role Responsibilities and Positioning: DevOps engineers aim to bridge development (Dev) and operations (Ops), establishing efficient, automated software delivery processes. Core responsibilities include designing and implementing CI/CD pipelines, automating build, test, and deployment processes [2:4]; writing Infrastructure as Code (IaC) using Terraform, CloudFormation, etc., to deploy and manage cloud infrastructure [2:5]; configuring and managing continuous monitoring and alerting systems (Prometheus, Grafana, CloudWatch) to ensure system stability [2:6]; promoting configuration management and automation (Ansible, Chef) to reduce human error. DevOps engineers also maintain environment consistency (dev, test, staging, production), helping development teams deliver and iterate quickly. In short, DevOps focuses on the efficiency and reliability of the software delivery lifecycle and is key to promoting a culture of rapid delivery and continuous improvement. Core Skills: DevOps needs broad toolchain knowledge and collaboration skills. Technically, they must be proficient with CI/CD tools (Jenkins, GitLab CI/CD), version control (Git), container tech (Docker), and orchestration (Kubernetes). Deep knowledge of OS and networking is necessary since deployment environments involve Linux tuning, service config, routing, firewall setups. DevOps often has scripting/programming skills—Python, Shell, Go—to write automation scripts or tools. They also need to understand cloud architectures and services (AWS, Azure, GCP) as modern apps run in cloud or hybrid cloud. Soft skills: DevOps acts as a glue between dev and ops teams and needs excellent communication and coordination to drive cultural change. When incidents occur, DevOps is often the main incident coordinator, quickly contacting relevant people to resolve issues [4] They should have a continuous learning mindset as tools and best practices evolve rapidly (e.g., Service Mesh, GitOps). Common Technologies: DevOps daily work revolves around automation and infrastructure tech. Common tech includes: Cloud &amp; Containers: AWS, Azure, GCP and services (EC2, S3, RDS, etc.), Linux containers (Docker), orchestration (Kubernetes, OpenShift). DevOps writes Kubernetes YAML, uses Helm charts to manage containerized apps. CI/CD &amp; Configuration Management: Jenkins, GitHub Actions, GitLab CI, CircleCI for CI/CD; Ansible, Chef, Puppet for config management and automation; Terraform, CloudFormation for IaC [2:7] These tools enable one-click deployments and infrastructure automation. Monitoring &amp; Logging: Prometheus, Grafana for metrics; ELK/EFK (Elasticsearch + Kibana + Logstash/Fluentd) for centralized logging; cloud monitoring (CloudWatch, Azure Monitor). DevOps sets alerts and dashboards for real-time system health. Version Control &amp; Collaboration: Git is essential; understanding Git Flow or Pull Request workflows helps team collaboration. Nexus/Artifactory for binary management, Docker Registry for container images. Programming Languages: Although not focused on business logic, DevOps writes scripts and tools. Shell scripting for system tasks, Python for automation scripts, and increasingly Go for DevOps tools (e.g., Kubernetes CLI tools). DevOps should also be able to read application code (Java, Python, JavaScript) to debug issues. Startup vs. Financial Industry Differences: In startups, DevOps is crucial early on to build cloud infrastructure and CI/CD from scratch. Because of rapid iteration, DevOps picks highly automated, cloud-first solutions (often serverless) to reduce infrastructure maintenance. In small teams, DevOps may touch development and testing, giving a broader skill set and more agility. In large financial companies, DevOps adoption may face traditional processes and compliance constraints. Financial organizations often introduce DevOps gradually via pilot teams. DevOps in finance must adapt to strict change management and security audits, adding approval and logging to automation. Some financial institutions still run on on-prem data centers, so DevOps manages hybrid cloud (on-prem + private cloud + public cloud) and ensures high availability and disaster recovery. Finance places heavier emphasis on access control and monitoring, so toolchains must comply with security policies (e.g., sensitive data not uploaded to public cloud, CI/CD pipelines require change approvals). Overall, startup DevOps focuses on innovation, speed, and iteration; financial DevOps focuses on stability, compliance, and balancing speed with risk. Summary: Depending on industry and scale, EA, SA, and DevOps roles and divisions are flexible. In small startups, there may be no formal EA title or one person wearing multiple hats; in large financial organizations, the three roles are distinct yet closely collaborative. As companies grow, architecture governance becomes more important, typically evolving from informal tech-lead-centered design to establishing SA teams, and eventually introducing EA for strategic oversight [3:2]. Understanding these roles across contexts helps craft appropriate career and learning plans. 🗺️ DevOps Transition Roadmap DevOps engineers accumulate extensive implementation experience and a deep understanding of the delivery process, which provides a strong foundation for transitioning to an architect role [4:1]. However, moving from a tools-and-execution-focused DevOps role to a higher-level Solution Architect (SA) or Enterprise Architect (EA) role requires further growth in technical depth and breadth, business understanding, and architectural thinking. Below is a step-by-step learning and mindset-change guide: Technical and Knowledge Learning Sequence (Foundations → Advanced → Practice): Foundation Stage: Strengthen computer science and software engineering fundamentals: data structures, algorithms, network protocols, operating systems to build theoretical foundations for architecture. Also learn software design principles and object-oriented principles (e.g., SOLID) and basic design patterns. For those from DevOps backgrounds, this fills theoretical gaps in software design. Classic books (Clean Code, Design Patterns) and online courses can solidify basics. Advanced Stage: Deep-dive into software architecture theories and patterns. Study architecture styles (monolith vs. microservices, distributed systems principles, event-driven, CQRS), architecture patterns (layered, hexagonal, clean architecture), and trade-offs in architectural decisions. Also learn enterprise architecture frameworks (for aspiring EAs, like TOGAF, BDAT) to master governance methods. For aspiring SAs, mastering system design in one or two mainstream technologies is important—e.g., designing architectures for high-concurrency websites, ensuring ACID properties in financial transaction systems. Also expand cloud and infrastructure knowledge: since DevOps already knows CI/CD and containers, further learn cloud architecture design (AWS Well-Architected Framework, hybrid cloud), and network and security architecture (virtual networks, VPC design, zero-trust). [5] Additionally, study database fundamentals and large distributed systems (SQL vs NoSQL trade-offs, CAP theorem, consensus algorithms like Paxos/Raft) to make more forward-looking technology selections. Practice Stage: Theory is not enough—start architecture design practice. One way is to take on small architecture design tasks at work: redesign a module, optimize deployment topology, and discuss your design with the team. Participate in design reviews to observe senior architects’ trade-offs. If at work you lack opportunities, build your own architecture projects: design a URL shortener or an e-commerce system architecture covering front-end/back-end, DB, caching, messaging, and write architecture docs plus PoC code. Practice reveals gaps between theory and reality and teaches trade-offs. This experience becomes valuable for future architect roles. Fill Business Understanding and Architecture Design Skills: Architects are technical designers who also understand business. DevOps professionals should strengthen domain knowledge and requirements analysis. Deepen domain knowledge: Regardless of industry (finance, e-commerce, etc.), proactively learn business processes and domain expertise. For finance, understand core banking systems, payment clearing, and compliance; for e-commerce, learn order flows, inventory, SEO. Ask the business team, attend business meetings, or read industry reports. Business insight enables designing systems that truly meet business needs. Practice requirements analysis and architecture design: Train extracting technical requirements from vague business needs. Try writing architecture documents or technical proposals: analyze functional and non-functional requirements (performance, scalability, security, compliance), propose architecture (upstream/downstream relationships, component decomposition, data/control flows), and justify key technology choices. This improves holistic thinking and architecture decision-making. Compare your proposals with industry cases or seek feedback from experienced architects. Learn architecture review and decision-making: Architects frequently make trade-off decisions. Build this skill by learning architecture evaluation methods (e.g., ATAM), reading system design case studies, and understanding how others balance conflicting requirements (availability vs consistency, latency vs throughput, dev efficiency vs maintainability). With experience, you’ll make architecture decisions more confidently. Recommended Project Participation Types and Scope: To transition smoothly, intentionally seek projects and responsibilities that build architecture skills: Start with small architecture designs: Volunteer for small projects or modules to design within your team. As DevOps you know delivery flows—try going beyond pure ops to participate in system design. Examples: design a logging architecture, optimize module decomposition, or lead a performance bottleneck refactor. These moderate-scope tasks build design experience and confidence. Engage in end-to-end solutions: Aim to participate in the full product lifecycle, not just delivery. Join a new product from requirements, architecture, development to deployment, observing how architects interact with stakeholders and make design choices. Volunteer to own sub-system architecture. End-to-end involvement fosters a holistic view of how each stage impacts architecture. Join architecture reviews or design boards: Many large companies have architecture review committees. Even as an observer, joining these discussions exposes you to company-wide architectural concerns and what senior architects care about. If possible, ask questions and offer comments to show your interest. This can lead to mentorship or more architecture opportunities. Act as liaison/coordinator: Use DevOps’ cross-team collaboration to be a technical coordinator—connecting front-end, back-end, DB, and ops to ensure smooth integration. This helps you view systems from a higher level and practices coordinating multiple stakeholders, a daily architects’ activity [1:17] By playing a “small architect” role in projects, you’ll start to perform parts of an architect’s job. Seek mentors and feedback: If experienced SAs or EAs exist in your company, proactively ask for mentorship and request that they review your architecture proposals. Invite feedback and improve. Mentorship accelerates identifying gaps and targeted improvement. Mindset Shift Recommendations (from tool-oriented to strategy-oriented): Transitioning to an architect is not only about skills but also about a change in mindset: From doer to designer: DevOps is used to hands-on problem solving, but architects must view problems from a higher level. Shift from “How do I get this done?” to “What should we do and why?” Focus on what to do and why, cultivating systems thinking and maintaining a mental model of the entire system and how a decision affects it. From tool-driven to problem-driven: DevOps often solves problems with tools; architects focus on the underlying business problem and requirement priorities. Practice asking: “What business problem is this requirement solving? What are the success metrics?” Then select technology accordingly. Avoid jumping to frameworks/tools before defining the problem. From chasing new tech to emphasizing stable architectures: DevOps enjoys new tools, but architects are more conservative, emphasizing long-term implications of technology choices. Develop a “technology calm”: evaluate maturity, fit with existing landscape, and business value. Adopt new tech only if it solves key problems; reject it if it only adds complexity. Shift from focusing on “cool tech” to “value created by tech.” From local optimization to global trade-offs: DevOps often optimizes delivery efficiency and single-system reliability; architects must make global trade-offs. A solution that is optimal for one service might increase complexity or create tech silos at the ecosystem level. Learn to weigh performance, cost, developer productivity, maintainability, scalability, etc., and accept that “there is no perfect architecture, only one suitable for current needs.” Set priorities and allow secondary aspects to make concessions. Improve communication and leadership: Moving from individual contributor to architect means influencing and leading others. Improve communication skills to explain complex technical ideas simply to non-technical people—this is basic for EA/SA [6] Practice listening and negotiation: architecture often requires reconciling different teams’ interests. Ask for others’ input and balance principle with flexibility. Build a trusted technical leadership presence so teams follow your decisions. Start by hosting technical discussions, sharing learnings, and increasing visibility. Strategic thinking: For those aiming for EA, cultivate strategic thinking: watch market and competitive trends, and ask “Where will the business be in 2–3 years and what technology preparation is needed?” EAs work with executives on IT strategy, so follow industry reports and competitors’ tech moves, and practice discussing technology in business terms. Shift from focusing on execution to viewing technology as a strategic resource for business goals. The above steps aren’t strictly linear and can be pursued in parallel. For example, practice while learning theory and concurrently build soft skills. In this transition, the DevOps background is actually an advantage: your grasp of the full delivery process gives you a stronger holistic view and cross-domain experience than many developers, which is essential for architects [4:2]. Many have successfully moved from DevOps to SA and even to EA. The key is patience and passion—treat each project as an opportunity to develop architectural thinking; your DevOps experience will become a unique asset in architecture decisions [4:3]. ⚡ Learning Resources Transitioning requires continuous learning. The resources below include GitHub repos, online courses, books, and professional blogs/communities to provide in-depth knowledge and practical experience: 💻 GitHub Solution Architect Learning Path: github.com A curated learning collection for aspiring architects covering architecture intro, fundamentals, cloud platforms, architecture patterns, tools, and certifications—good for DevOps engineers to systematically learn architecture. Awesome Software Architecture: github.com A community-maintained software architecture resources list aggregating articles, videos, and exercises covering architecture patterns and principles—an excellent entry point to grasp architecture scope. System Design Primer: github.com Well-known system design tutorial with guides on building large systems, common interview design problems, and real case studies (designing Twitter, Facebook, etc.). Great for practicing architecture thinking through examples. Awesome DevOps: A curated list of DevOps tools and practices. Even if you already know DevOps, this helps check if you’ve missed areas relevant to architecture decisions (new infra tech or SRE practices). The Awesome DevOps list covers cloud, config management, containers, monitoring, etc. awesome-devops.xyz 🎓 Online Courses Coursera: Software Design and Architecture Specialization: coursera.org A university-backed series (Software Design and Architecture) teaching how to apply design principles, patterns, and architecture to create reusable, maintainable systems. Coursera: TOGAF Certification Course: coursera.org Focuses on enterprise architecture core concepts (BDAT—business/data/application/technology architecture domains, ADM), helpful for understanding EA frameworks and methods. Pluralsight: Developer to Architect: classcentral.com Designed for developers and DevOps moving toward architect roles, covering the role, required skills, and how to perform architect responsibilities across the project lifecycle. Emphasizes design and communication for technical and non-technical stakeholders—an excellent roadmap for career transition. Udemy: Microservices Architecture &amp; Patterns: Platforms like Udemy have many hands-on courses (microservices, cloud-native design). Choose highly-rated courses taught by experienced architects to apply theory to practice. 📘 Recommended Books Fundamentals of Software Architecture — Mark Richards &amp; Neal Ford. A comprehensive book covering architecture patterns, quality attribute trade-offs, and architect responsibilities—great for DevOps engineers expanding their architecture perspective. Domain-Driven Design: Tackling Complexity in the Heart of Software — Eric Evans. Teaches integrating business knowledge into technical design and modeling core domains with business experts; useful for improving business understanding and design alignment. The Software Architect Elevator — Gregor Hohpe. Focuses on the architect’s evolving role in digital transformation and soft skills. The “elevator” metaphor highlights switching between executive strategy and technical details—helpful for DevOps moving into enterprise roles. Accelerate — Nicole Forsgren et al. Research-based book about how DevOps practices drive business value. For DevOps-to-architect transitions, this helps link technical practices to business outcomes and guides decisions that prioritize business value. Software Architecture in Practice — Len Bass et al. A classic covering many aspects of software architecture with case studies—recommended for systematic learning. Also, Martin Fowler’s works (e.g., Patterns of Enterprise Application Architecture) and his blog provide accessible insights on enterprise architectures and refactoring. 🌐 Blogs and Professional Communities Medium Tech Columns: Many architects and cloud practitioners share articles on Medium (ITnext, Towards Data Science, The Startup). Personal posts about transitioning from DevOps to architect or cloud case studies provide practical advice. Reddit communities: r/softwarearchitecture – discussions on architecture topics, case studies, and book recommendations. r/DevOps – DevOps topics often overlap with architecture decisions (CI/CD design, large-scale deployments). r/cscareerquestions and r/ExperiencedDevs – career transition discussions with many first-hand accounts. Stack Overflow / Stack Exchange: Follow tags like architecture and system-design. Software Engineering Stack Exchange hosts many discussions on architecture and design decisions. InfoQ and IBM Developer: InfoQ has many microservices, architecture case studies, and enterprise governance articles (some in Chinese). IBM Developer and Microsoft Architecture Center offer architect guides and reference architectures. Professional organizations and forums: Join architecture forums or local meetups (The Open Group, IEEE Software). LinkedIn groups like “Software Architects” or “Enterprise Architecture Network” share professional posts and discussions—active participation helps build networks and absorb knowledge. Local communities and blogs: For Traditional Chinese readers, follow Taiwan/HK tech communities (e.g., iT 邦幫忙) and local architect meetups (Taiwan Architecture Summit) for region-specific practice and insights. 🔑 Keywords Enterprise Architecture Management Tools (EAM) The Open Group Architecture Framework (TOGAF) Zachman Framework Microservices Architecture Enterprise Integration Patterns (EIP) Security Framework System Component Decomposition System Design Principles Architectural Patterns Layered Architecture Event-Driven Architecture (EDA) Cloud-Native Design Lightweight Frameworks Binary Release Management Container Image Management Docker Registry SOLID Principles Design Patterns Monolithic Application Distributed System Principles Command Query Responsibility Segregation (CQRS) Hexagonal Architecture Clean Architecture Architectural Trade-offs Business/Data/Application/Technology Architecture (BDAT) Architecture Governance Methodology Atomicity, Consistency, Isolation, Durability (ACID) Zero Trust Security Model Consensus Algorithms Paxos Algorithm Raft Algorithm Architecture Documentation Technical Proposal Functional Requirement Analysis Non-Functional Requirement Analysis Architecture Solution Design System Upstream and Downstream Relationships Data Flow and Control Flow Technology Selection Rationale Architecture Evaluation Methods Architecture Tradeoff Analysis Method (ATAM) Architecture-level Trade-offs (Availability, Consistency, Latency, Throughput, Developer Efficiency, Maintainability) Architecture Development Method (ADM) 🔖 References Enterprise Architect vs. Solution Architect vs. Technical Architect https://www.leanix.net/en/wiki/ea/enterprise-architect-vs-solution-architect-vs-technical-architect-whats-the-difference ↩︎ ↩︎ ↩︎ ↩︎ ↩︎ ↩︎ ↩︎ ↩︎ ↩︎ ↩︎ ↩︎ ↩︎ ↩︎ ↩︎ ↩︎ ↩︎ ↩︎ ↩︎ Distinguishing Between DevOps Roles and AWS Solution Architects https://www.linkedin.com/pulse/distinguishing-between-devops-roles-aws-solution-architects-yagci-6jbqf/ ↩︎ ↩︎ ↩︎ ↩︎ ↩︎ ↩︎ ↩︎ ↩︎ Navigating the Architecture from Startup to Enterprise https://dilankam.medium.com/navigating-the-architecture-from-startup-to-enterprise-c355f6d3dd17 ↩︎ ↩︎ ↩︎ IT careers: 4 ways DevOps bolsters your architect skill set https://www.redhat.com/en/blog/devops-career-architecture ↩︎ ↩︎ ↩︎ ↩︎ How to Seamlessly Transition from DevOps to Cloud Architect Role https://cloudmize.medium.com/how-to-seamlessly-transition-from-devops-to-cloud-architect-role-8eb8fe02cd5f ↩︎ How can I switch roles from DevOps to Architect? https://www.reddit.com/r/AWSCertifications/comments/1aorad5/how_can_i_switch_roles_from_devops_to_architect ↩︎","link":"/blog/chatgpt-devops.en/"},{"title":"[chatgpt] 企業架構師、解決方案架構師與 DevOps 角色比較與轉型路徑","text":"📌 介紹 ⭐ 注意 本篇文章由 ChatGPT 生成，經人工審閱後發佈，內容僅供參考。內容主要是講述 DevOps、SA、EA 三者角色之間的關係以及 DevOps 如何轉換跑道至 SA 或 EA。 🧭 角色定位與差異概覽 企業架構師（Enterprise Architect，EA）：站在整個企業層面制定長遠的 IT 策略與架構藍圖，確保技術方案與企業使命和業務目標保持一致 [1] [2] EA 就像城市規劃師，為企業的技術土地繪製總體藍圖 [3] 他們關注大局與長期策略，定義標準與治理架構，指引各項技術決策方向。 解決方案架構師（Solution Architect，SA）：著眼於特定產品或專案，評估業務需求並設計對應的技術解決方案 [1:1] SA 扮演橋樑角色，連接業務需求和最終的技術實現 [1:2] 他們類似建築師，為某棟建築（單一系統）繪製藍圖，確保該解決方案既符合企業整體架構規範又滿足專案需求 [3:1] SA 關注具體細節與落地實施，帶領團隊將架構方案轉化為可交付的系統。 DevOps 工程師（開發運維工程師）：專注於軟體的交付管線與運維自動化，負責開發與運維之間的協作，實現持續整合/交付（CI/CD）流程、自動化部署與系統監控，確保軟體可靠且快速地交付 [2:1] DevOps 注重工具與流程優化，就像城市中的基礎建設維運者，建立道路管線（部署流程）並保持交通暢通（穩定運營）。 共同點：這三種角色都需要廣泛的技術知識和良好的溝通協調能力，但側重面不同。企業架構師偏重策略與全局觀，解決方案架構師偏重專案技術設計與協調落實，DevOps 工程師偏重工程實作與自動化效率。隨著企業規模和產業不同，是否設置這些角色及角色間職責劃分也會不同——公司規模越大、系統越複雜，越需要明確區分 EA、SA 等架構角色 [1:3]。 以下將針對新創公司與金融業的情境，分別說明 EA、SA 和 DevOps 三種角色的工作內容、所需技能與常用技術差異，接著提供從 DevOps 轉型為 SA 或 EA 的具體建議與學習資源。 🏗️ 企業架構師（Enterprise Architect，EA） 角色職責與定位：企業架構師在組織中負責制定整體技術藍圖，確保 IT 策略與公司業務戰略保持一致 [1:4] 他們分析企業內外部需求，識別業務能力差距，規劃未來的技術路線圖 [1:5] EA 通常不深入實作細節，而是制定標準並將具體實作任務分配給解決方案架構師或技術架構師 [1:6] EA 的一項關鍵任務是架構治理：透過架構模型和原則，指導各專案遵循企業標準，避免各自為政。EA 經常與高階管理層合作，確定哪些新興技術（如 AI、區塊鏈等）可為企業帶來競爭優勢 [1:7] 核心技能：企業架構師需要跨域的技術知識與商業敏銳度。他們必須精通企業架構框架（如 TOGAF、Zachman）、瞭解業務流程和行業趨勢，能將複雜的技術概念與商業戰略聯結 [1:8] [1:9] EA 要具備卓越的策略規劃與分析能力，可以透過架構視圖與模型來分析整體 IT 版圖，發現運作瓶頸並規劃改進路徑 [1:10] 同時，EA 需要極強的溝通與影響力，善於向高層闡述 IT 策略價值，協調各部門達成共識 [1:11] 在軟性能力上，EA 必須有條理地工作並注重架構治理，確保技術決策符合集團的合規與標準要求。 常用技術與工具：由於 EA 著眼全局，其技術偏向架構建模與策略管理工具，而非具體程式語言。常用的有企業架構管理工具（EAM），例如 Archi、Sparx EA、LeanIX，用於繪製架構藍圖、資產清單和路線圖 [1:12] EA 也需熟悉主流雲端平台（如 AWS、Azure、GCP）及企業級解決方案（如資料庫、ERP、中介軟體）的概況，以便在高層次做出技術選型決策。雖然 EA 不親自寫程式，但瞭解各種技術標準與框架很重要，例如微服務架構、企業整合模式、資安框架等，以便評估方案的可行性與相容性。 新創 vs. 金融業情境差異：在新創公司，通常公司規模小、產品單一，EA 可能由技術長（CTO）扮演，架構較簡單且演進快速，強調敏捷調整而非嚴格治理。因此新創的 EA 可能兼任 SA 和技術主管，以靈活方式制定架構方向。相反地，在金融業大型企業（如銀行、保險），業務線複雜且合規要求高，通常有專門的企業架構師團隊。金融業的 EA 往往遵循嚴謹的架構框架（如 TOGAF），制定標準化的架構藍圖與治理流程，確保各系統（含遺留主機、數據倉庫、新應用等）都符合整體策略和法規。金融業 EA 也需要關注風險控制、資料隱私與法規遵循，在引入新技術時特別審慎評估。 🧱 解決方案架構師（Solution Architect，SA） 角色職責與定位：解決方案架構師專注於特定專案或產品的架構設計。他們承接企業架構師制定的原則與藍圖，深入分析業務需求，設計出切實可行的技術解決方案 [1:13] SA 的工作從需求分析開始：與產品經理和業務單位確認功能需求、品質要求（QA）等，然後在眾多技術選項中設計出架構方案（包含系統元件劃分、模組互動、資料流程等）。在方案設計過程中，SA 需要在企業整體架構與技術實現細節之間取得平衡 [1:14] 一旦方案得到批准，SA 常肩負技術領導角色：指導開發團隊理解架構設計、選定技術，並在開發全過程中把關架構的正確落地。SA 也負責評估實施中的技術風險，確保最終交付的系統符合最初架構設計的願景和各項需求 [1:15] 可以說，SA 是專案中的技術主導，確保「對的方案」得以「正確地實現」。 核心技能：作為連接業務與技術的橋梁，SA 需要兼具廣度與深度的技能組合。一方面，SA 要精通系統設計原則與架構模式（如分層架構、微服務、事件驅動架構、雲原生設計等），能夠針對不同類型的問題選擇合適的架構解決方案。另一方面，SA 通常從資深開發人員成長而來，具備至少一兩種技術堆疊的深厚經驗（例如精通 Java/Spring、.NET、生態或前後端某個領域），了解程式碼層面的實踐細節，才能設計出可實現的方案。此外，SA 必須具備良好的溝通協調能力，因為他們需要向開發團隊闡述架構、與企業架構師討論方案一致性，並向非技術的業務關係人解釋技術方案如何解決業務問題。專案管理技能也很重要。SA 經常要在項目中擔任技術項目經理，確保各方步調一致推進 [1:16] 總而言之，SA 要有分析複雜問題並分解為可執行方案的能力，同時具備領導團隊落實的軟實力。 常用技術與工具：SA 的技術會因行業和專案而異，但通常包括廣泛的開發技術和架構工具。在雲端平台方面，SA 需要熟悉 AWS、Azure、GCP 等主流雲服務，懂得運用各種雲服務（計算、存儲、資料庫、消息隊列等）構建可擴展的系統 [2:2] 在應用架構方面，SA 常用 UML 或 C4 Model 繪製系統結構圖，使用架構設計工具（如 Visio、draw.io、PlantUML）來表達設計。程式語言與框架則取決於具體領域：例如在金融業後端可能偏好 Java/Spring 或 .NET；在新創網路產品則可能採用 Python/Django、Node.js/Express、Go 等。SA 必須根據需求選擇合適的資料庫（如關聯式 SQL 或 NoSQL）、訊息中介（Kafka、RabbitMQ）等。除了應用開發技術，SA 也需要掌握 DevOps CI/CD 工具的原理，如容器與 Kubernetes、持續整合工具（Jenkins, GitLab CI）等，以便設計出能順利部署和運營的解決方案 [2:3] 另外，SA 經常需要考慮性能與安全，因此對性能測試工具和安全最佳實踐也要有涉獵。總之，SA 的技術就是「能把系統從白板構想到生產環境」所需的一切技術知識。 新創 vs. 金融業情境差異：在新創公司，解決方案架構師往往兼任技術團隊領導。由於團隊人力有限，SA 可能既負責架構設計又直接參與編碼實作，角色上更「hands-on」。新創環境強調快速迭代，SA 在保證架構合理性的同時會傾向使用輕量級框架和雲服務來加速開發，上線後再逐步演進。反之，在金融業這類大型組織，SA 通常是明確獨立的角色，不太參與日常 Coding，而是把重心放在架構設計與協調。金融業 SA 需要面對大量遺留系統整合問題，經常要在遵循企業架構標準下，為某業務領域（如支付系統、風險控管系統等）提出解決方案。因此他們更常使用企業級技術（如 IBM WebSphere、Oracle數據庫）和強調安全性、交易一致性的設計。在金融業專案中，SA 需密切配合 EA 確保方案合規，並與專案經理、外部供應商協作。簡而言之，新創的 SA 更靈活多面，能快速切換技術以適應變化；金融業的 SA 更專精穩健，確保在嚴格環境中方案可靠可控。 🔧 DevOps 工程師（DevOps Engineer） 角色職責與定位：DevOps 工程師旨在打通軟體開發（Dev）與運維（Ops）的壁壘，建立高效、自動化的軟體交付流程。其核心職責包括：設計和實施 CI/CD 管道，自動化從程式建置、測試到部署的過程 [2:4]；編寫基礎設施即程式碼（IaC），例如利用 Terraform、CloudFormation 等工具來自動佈署和管理雲端基礎設施 [2:5]；配置和管理持續監控與警報系統（如 Prometheus、Grafana、CloudWatch）以確保系統運行穩定 [2:6]；推動配置管理與自動化（使用 Ansible、Chef 等），減少人工操作帶來的錯誤。DevOps 工程師還肩負環境管理責任，維護開發、測試、Stage、生產環境的一致性，並協助開發團隊快速交付、快速迭代。簡言之，DevOps 角色關注軟體交付生命周期的效率和可靠性，是團隊落實快速交付、持續改進文化的關鍵推手。 核心技能：DevOps 工程師需要廣泛的工具鏈知識與協作能力。技術上，他們必須熟練使用各種 CI/CD 工具（如 Jenkins、GitLab CI/CD）、版本控制系統（Git）、容器技術（Docker）及容器編排（Kubernetes）等。此外，對作業系統和網路有深入理解也是必要的，因為部署環境常涉及 Linux 系統調優、服務配置、網路路由、防火牆設定等。DevOps 通常也具備一定的編程或腳本能力，常用 Python、Shell Script、Go 等來編寫自動化腳本或開發輔助工具。他們還需要了解雲端架構和服務（AWS、Azure、GCP），因為大多數現代應用都部署在雲端或混合雲環境。軟性能力方面，DevOps 工程師充當開發與 IT 運維團隊之間的粘合劑，需要優秀的溝通協調能力來推動 DevOps 文化變革。在問題發生時，DevOps 人員往往也是主要的故障排查協調者，需要快速聯絡相關人員共同解決問題 [4] 最後，他們應具備持續學習心態，因為 DevOps 領域工具和最佳實踐演進迅速，不斷學習新技術（例如服務網格 Service Mesh、GitOps流程等）以提升團隊效率。 常用技術：DevOps 的日常工作圍繞各種自動化與基礎架構技術。常見技術包括： 雲端與容器：AWS、Azure、GCP 等公有雲平台及其服務（如EC2、S3、RDS等），Linux 容器（Docker）和容器編排系統（Kubernetes, OpenShift）。DevOps 需要撰寫 Kubernetes YAML 部署檔、使用 Helm Chart 等來管理容器化應用。 CI/CD &amp; 配置管理：Jenkins、GitHub Actions、GitLab CI、CircleCI 等作為持續整合/交付工具；Ansible、Chef、Puppet 等用於配置管理和佈署自動化；Terraform、CloudFormation 用於基礎設施即程式碼（IaC）管理環境 [2:7] 這些工具組合起來實現一鍵部署和基礎設施自動化。 監控與日誌：Prometheus、Grafana 用於監控指標；ELK/EFK（Elasticsearch + Kibana + Logstash/Fluentd）用於集中日誌管理；或雲端監控服務（CloudWatch、Azure Monitor）等。DevOps 設置警報和儀表板以實時監控系統健康狀況。 版本控制與協作：Git 是必備，瞭解 Git Flow 或 Pull Request 流程以協助團隊協作。例如 Nexus/Artifactory 用於二進制發布管理，Docker Registry 用於容器映像管理。 程式語言：雖然 DevOps 焦點不在開發業務邏輯，但通常會寫腳本和工具。常用 Shell 腳本做系統任務，自動化腳本多用 Python，近年來也有使用 Golang 開發 DevOps 工具（如 Kubernetes 的CLI 工具）。DevOps 人員還需能看懂開發程式碼以排查問題，因此對團隊主要使用的語言（Java、Python、JavaScript等）保持一定熟悉度有助益。 新創 vs. 金融業情境差異：在新創公司，DevOps 工程師常是初期團隊中關鍵的一員，負責從零打造公司的整套雲基礎設施與 CI/CD 流程。由於新創產品迭代快速，DevOps 會選擇高度自動化和以雲服務為主的方案，加速部署（例如全面採用雲端服務和 Serverless 架構以減少基礎設施維護）。新創團隊小，DevOps 可能同時涉足開發、測試等，因此技能覆蓋面更廣，解決問題更機動靈活。相反，在金融業大型公司中，DevOps 的推行可能受到傳統流程和合規的挑戰。一些金融機構引入 DevOps 文化較晚，往往以專案制或試點團隊的形式逐步推動。金融業的 DevOps 工程師需要適應嚴格的變更管理流程和安全審計要求，在自動化時加入完整的審批與紀錄。技術上，部分金融機構仍有自建資料中心，DevOps 可能需管理混合雲（本地機房 + 私有雲 + 公有雲）環境，並確保關鍵系統的高可用和災備。金融業也更強調權限控管與監控，DevOps 工具鏈的使用須配合公司安全政策（例如敏感資料不得上傳雲端、CI/CD pipeline 需經變更審批等）。總的來說，新創的 DevOps 更偏創新實踐，追求速度和迭代；金融業的 DevOps 則偏重穩健合規，在速度與風險之間取得平衡。 小結：不同產業與規模下，EA、SA、DevOps 三角色的設置與分工靈活調整。在小型新創，可能根本沒有正式的 EA 職稱，或一人多責；而在金融巨頭，這三種角色界線清晰，各司其職但也需緊密協作。隨著企業成長，架構治理的重要性提升，會逐步從以 Tech Lead 為中心的非正式架構設計，演變到建立 SA 團隊，再到引入 EA 從戰略高度統籌全局 [3:2]。了解這些角色在不同情境下的定位，有助於我們制定合適的職業發展與學習路徑。 🗺️ DevOps 轉型學習路線圖 DevOps 工程師積累了豐富的實作經驗和對整體交付流程的瞭解，這為轉型成架構師奠定了良好基礎 [4:1]。然而，從注重工具與執行的 DevOps 角色轉型為站在更高層次設計的 Solution Architect（SA）或 Enterprise Architect（EA），仍需要在技術深度與廣度、業務理解、架構思維等方面進一步提升。下面提供一份逐步進階的學習與思維轉變指南： 技術與知識學習順序（基礎→進階→實戰）： 基礎階段：強化計算機科學與軟體工程基本原理，包括資料結構、演算法、網路協定、作業系統等知識，為架構設計打下理論根基。此外學習軟體設計準則與面向對象原則（如 SOLID 原則）、基本的設計模式。對於 DevOps 出身的人，這一步有助於補齊在軟體設計方面的理論短板。可以透過經典書籍（例如 Clean Code, Design Patterns）和線上課程來夯實這些基礎。 進階階段：深入研究軟體架構理論與模式。學習常見架構風格（單體 vs. 微服務、分散式系統原則、事件驅動、CQRS 等）、架構模式（如分層架構、六邏輯架構、乾淨架構 Clean Architecture）以及架構決策的權衡取捨。同時了解企業架構框架（對於立志 EA 的人，如 TOGAF、企業架構域 BDAT 等）以掌握架構治理的方法論。對於想成為 SA 的人，深入一兩種主流技術的系統設計很重要，例如研究網站在高並發下的架構設計、金融交易系統如何確保 ACID 特性等。在這階段，還應該擴展雲端與基礎設施知識：既然 DevOps 本就熟悉 CI/CD 與容器，進一步學習雲端架構設計（如 AWS Well-Architected Framework 雲端最佳實踐、混合雲架構）、網路與安全架構（虛擬網路、VPC 設計、零信任安全模型）等 [5] 另外，涉獵資料庫原理與大型分散式系統知識（例如 NoSQL vs SQL 的取捨、CAP 定理、一致性算法如 Paxos/Raft）有助於架構師在做技術選型時更具前瞻性。 實戰階段：紙上得來終覺淺，開始架構設計實戰演練。一種方式是在現有工作中主動承擔小型專案的架構設計：例如重新設計一個模組的架構、優化一個系統的部署拓撲，並將你的設計與團隊討論獲取反饋。也可以參與系統設計討論（Design Review）的過程，觀察資深架構師如何權衡決策。如果在工作中缺乏機會，可考慮自行構思並實作一兩個架構項目：例如設計一個縮網址服務或電商系統的完整架構，包括前後端、資料庫、緩存、消息系統等，寫下架構說明書和關鍵模組的 PoC 程式碼。透過實踐，你會發現理論與現實的差距並學會折衷。這種經驗將成為日後勝任架構師工作的寶貴財產。 補足業務理解與架構設計能力：架構師不僅是技術高手，更是懂業務的設計師。DevOps 背景的人需要特別加強業務領域知識和需求分析能力。建議： 深化業務領域知識：不論你服務的產業是金融、電商還是其他領域，都應主動學習該行業的業務流程和專業知識。例如金融業的架構師要懂核心銀行系統運作、支付清算流程、監管合規要求；電商領域則要理解訂單流程、庫存管理、SEO 等。可以透過向業務部門請教、參與業務會議或讀相關行業報告來獲取知識。有了業務洞察力，才能設計出真正契合業務需要的系統架構。 練習需求分析與架構設計：訓練自己從模糊的業務需求中提煉技術需求的能力。嘗試撰寫架構說明書或技術提案：當接到一項新需求時，先分析功能性需求與非功能性需求（性能、伸縮性、安全、合規等），然後產出架構方案，包括系統上下游關係、組件劃分、資料流和控制流、關鍵技術選型的理由等。這個過程可以提升你全盤思考和架構決策的能力。對照業界案例或請教有經驗的架構師，反覆改進你的方案。 學習架構評審與決策：架構師經常需要做技術選型和決策，這涉及考慮多種權衡因素（trade-offs）。培養這種能力的途徑包括：學習經典的架構評估方法（如 ATAM 架構評估法），閱讀系統設計案例分析，特別是他人如何在相互衝突的需求間做取捨。例如，瞭解在高可用和一致性、延遲和吞吐量、開發效率和可維護性之間如何平衡。隨著經驗增長，你做架構決策將更加駕輕就熟。 專案參與類型與負責範圍建議：為順利轉型，應有意識地尋找能鍛鍊架構能力的專案和職責： 從小型架構設計做起：主動承擔現有團隊中小型專案或模組的設計工作。在 DevOps 崗位上，你或許熟悉整個交付流程，嘗試超出純粹運維自動化的職責，參與到系統設計層面。例如，負責設計新的日誌收集系統架構、優化現有系統的模組劃分，或者領導實施一個性能瓶頸的重構專案。通過負責這些範圍適中的架構任務，累積設計經驗並建立信心。 涉入端到端解決方案：爭取參與端到端的專案生命周期，而不僅是其中的交付環節。比如參與一個新產品從需求討論、架構設計、研發到部署的完整過程。在這過程中觀察並學習架構師如何與各方互動、如何做設計抉擇。同時主動請纓負責某些子系統的架構工作。端到端的參與有助於培養整體觀，理解每個環節對架構的影響。 加入架構評審或設計委員會：很多大型企業有架構評審委員會或設計審查會議。即使作為聽眾，爭取加入這類討論，可以讓你接觸到公司內不同專案的架構方案、了解到高階架構師關心的問題。如果有機會，在這些會議中發表意見和提問，讓架構團隊的人了解到你的熱情與見解。有時候這也會帶來導師指點或更多參與架構工作的機會。 擔任聯絡人/協調人角色：利用 DevOps 與開發、運維多方協作的特性，主動扮演技術協調人。例如在一個跨部門專案中，負責串聯前後端、資料庫、運維團隊的技術溝通，確保各模組集成順暢。這培養你從更高層次看系統、協調多方需求的能力，也是架構師每日工作的一部分 [1:17] 透過在項目中充當「小架構師」角色，你實際上已開始履行部分架構師的職責。 尋求導師與反饋：若公司內有資深的 SA 或 EA，主動請教並爭取在專案中接受他們的指導。在提交自己的架構方案後，邀請經驗豐富的同事或導師評論，虛心接受改進建議。透過導師制，你能更快發現自己在架構設計和思維上的不足，進而針對性地提高。 思維模式轉換建議（從工具導向轉向策略導向）：轉型架構師不僅是技能上的提升，更重要的是思維方式的轉變： 從執行者到設計者：DevOps 習慣親手解決問題、動手實作，而架構師需要學會站高一級看問題。要從「我如何把這件事做好」轉變為「我們應該做哪件事、為什麼？」，著重思考做什麼以及為何這樣做。培養系統性思維，在腦中隨時保持整個系統的概念模型，思考一個決策對全局的影響，而非只看局部。 從工具導向到問題導向：DevOps 常以工具和技術解決具體問題，而架構師首先關注的是業務問題本質和需求優先級。轉變思維時，要練習先不考慮具體技術，問自己：「這個需求背後真正要解決的業務問題是什麼？成功的關鍵指標是什麼？」然後再反推適合的技術方案。避免一開始就陷入選擇哪種框架或工具的思維陷阱，而是先定義問題，再挑工具。 從追求新技術到強調穩定架構：DevOps 工程師樂於嘗試新工具新技術，而架構師更保守理性，注重技術選型的長遠影響。需要培養一種技術冷靜：並非追最新最酷的技術，而是評估其成熟度、與現有環境的契合度以及為企業帶來的價值。如果新技術能解決關鍵問題當然值得引入，但若只是增添複雜度，架構師應果斷拒絕。換言之，從關注「技術本身」轉變為關注「技術能創造的價值」。 從局部優化到全局權衡：DevOps 多關注交付流程的效率和單個系統的可靠性，而架構師必須在全局視角下做出權衡。例如，一個方案在單個服務看來性能最佳，但從整體生態看可能增加了系統複雜性或技術孤島風險。架構師思維要求權衡利弊：學會在性能、成本、開發效率、可維護性、擴展性等多維標準下做平衡決策。接受「沒有完美的架構，只有適合當下需求的架構」這一點，在設計時設定優先級，滿足核心需求的同時允許次要方面做出讓步。 加強溝通與領導：從個人貢獻者轉型為架構師，意味著需要影響和帶領他人。培養溝通技巧，能將複雜技術觀念用簡潔比喻向非技術人士說明白，這是 EA/SA 的基本功 [6] 同時練習傾聽反饋和協商：架構方案往往需要協調不同團隊的利益，多問問他人的想法，在堅守原則與靈活調整之間取得平衡。建立可信賴的技術領導形象，讓團隊願意追隨你的技術決策。可以從小處著手，例如在團隊內主持技術討論、主動分享自己的學習，增強影響力。 策略思維：特別是瞄準 EA 角色時，要養成策略性思維，關注市場與競爭、公司整體發展方向。要思考「未來 2 ~ 3 年業務可能怎樣變化，我們的技術應提前做哪些準備？」EA 需要與高層共同制定 IT 策略，因此平時可多關注行業趨勢報告、競爭對手的技術動向，學習用商業語言討論技術。從只關注技術執行，轉變為能將技術作為實現商業目標的策略資源來看待。 上述步驟並非絕對線性，有些可以並行進行。例如在學習理論時也爭取實踐，同時培養軟技能。在這轉型過程中，DevOps 背景實際上是你的優勢：因為你對整個交付流程的掌握讓你比一般開發人員更具大局觀與跨領域經驗，這正是架構師需要的素質 [4:2]。事實上，DevOps 到架構師是常見的職涯路徑之一，許多成功案例表明只要不斷學習、拓展視野，完全可以從 DevOps 工程師成長為優秀的解決方案架構師，甚至未來的企業架構師 [4:3]。關鍵在於保持耐心與熱情，把每一個專案當作鍛鍊架構思維的機會，相信你的 DevOps 經驗最終會成為你架構決策時的獨特優勢。 ⚡ 學習資源 轉型之路需要持續學習，下列資源涵蓋 GitHub 儲存庫、線上課程、書籍和專業部落格社群，能提供深入的知識與實戰經驗參考： 💻 GitHub Solution Architect Learning Path：github.com 一個專為準架構師設計的完整學習資源彙編，涵蓋架構導論、基礎知識、雲平台、架構模式、工具與認證等主題，適合 DevOps 工程師系統性地學習架構知識。 Awesome Software Architecture：github.com 開源社群維護的軟體架構資源大全，整理了大量優質文章、影片和練習項目，涵蓋軟體架構模式與原則，是快速瞭解架構全貌的極佳入口。 System Design Primer：github.com 知名的系統設計入門教程，包含如何構建大型系統、面試常見的系統設計題，以及豐富的真實案例（如設計Twitter、Facebook等）。非常適合透過實例來鍛鍊架構設計思維。 Awesome DevOps：DevOps 相關的優秀工具和實踐清單，儘管你已熟悉 DevOps，但該清單可幫助你檢視是否遺漏任何對架構決策有幫助的領域，例如新的基礎設施技術或SRE最佳實踐（例如 Awesome DevOps 文件列出了雲平台、配置管理、容器、監控等各分類的頂尖方案 awesome-devops.xyz）。 🎓 線上課程 Coursera：軟體架構與設計專項課程：coursera.org 由知名大學提供的系列課程，如 Software Design and Architecture 專項課程，在此系列中學習如何應用設計原則、模式和架構來創建可重用、可維護的系統架構。 Coursera：TOGAF 認證課程：coursera.org 專注於企業架構的核心概念（如商業/資料/應用/技術架構領域 BDAT、架構開發方法 ADM 等），有助於理解 EA 所需的框架知識和方法論。 Pluralsight：Developer to Architect：classcentral.com 這門課專為開發人員 DevOps 轉型架構師而設計，內容涵蓋架構師角色的重要性、所需技能與知識，以及如何在專案生命周期各階段履行架構師職責 課程最後強調了設計與溝通方案給技術及非技術利害關係人的技巧，堪稱轉職架構師的路線圖。 Udemy：Microservices Architecture &amp; Patterns：在 Udemy 等平台上，也有許多實戰取向的課程，例如微服務架構實作、雲原生應用設計等，可以幫助你從具體技術入手理解架構原理。選擇高評價的課程（例如由資深架構師主講的）進行學習，將理論應用於實際案例中，加深理解。 📘 推薦書籍 《Fundamentals of Software Architecture》 系統闡述軟體架構各方面主題的經典之作，由 Mark Richards 和 Neal Ford 所著。內容涵蓋架構模式、品質屬性權衡、架構師職責等，是 DevOps 工程師拓寬架構視野的入門書。 《Domain-Driven Design: Tackling Complexity in the Heart of Software》 Eric Evans 所著的經典著作。架構師必須學會將業務知識融入技術設計，此書提供了如何與業務專家合作建模核心領域的方法，適合提升業務理解和架構設計融合的能力。 《The Software Architect Elevator》 由 Gregor Hohpe 撰寫，聚焦數位化轉型時代架構師的角色轉變與軟技能培養。特別適合即將進入大型企業任職的架構師，書中「電梯」比喻架構師需要在高層戰略與底層技術間上下切換。閱讀此書有助於 DevOps 工程師轉變思維，用更高的視角看待技術與組織的關係。 《Accelerate》 由 Nicole Forsgren 等人基於科學研究撰寫，討論 DevOps 實踐如何驅動商業價值。對於從 DevOps 轉型架構師的人，此書能強化你對技術與商業成果關聯的理解，幫助你在架構決策時關注商業價值。書中關於性能指標與組織轉型的內容也能讓你在日後推廣架構或 DevOps 變革時受益。 《Software Architecture in Practice》 Len Bass 等人的經典教材，涵蓋軟體架構設計的方方面面，以及大量實例分析。對希望全面系統學習架構知識的人而言是必讀之作。 此外，Martin Fowler 的著作如 《Patterns of Enterprise Application Architecture》 和他在部落格上發表的架構文章，也非常值得參考。Fowler 對企業級架構和重構的見解深入淺出，有助於建立良好的架構思維。 🌐 部落格與專業社群 Medium 技術專欄：Medium 上有許多軟體架構師和雲架構師分享的文章。例如 ITnext、Towards Data Science、The Startup 等專欄經常有架構相關內容。此外，一些個人作者（如前述的 Usman Aslam、Sharon Sahadevan 等）分享了從 DevOps 成長為架構師的經驗和雲端架構實踐案例，閱讀這些故事可以獲得實務建議和心得。 Reddit 社群：Reddit 平台有多個相關的討論版可以訂閱，例如： r/softwarearchitecture – 專門討論軟體架構議題的板塊，社群成員會分享架構設計經驗、書籍推薦並討論各種架構難題。 r/DevOps – 雖然以 DevOps 為主題，但也常涉及架構決策（如 CI/CD 設計、大規模系統部署策略等）的討論。 r/cscareerquestions 及 r/ExperiencedDevs – 這些職涯類板有不少關於從工程師轉型的討論，包含許多過來人提供的建議。 Stack Overflow / Stack Exchange：在 Stack Overflow 可關注 architecture、system-design 等標籤的問答學習具體技術問題。在其它站點 Software Engineering Stack Exchange 上，有很多關於架構和設計決策的討論。透過參與問答，既能解決技術難題，也能學習他人是如何分析架構問題的。 InfoQ 與 IBM Developer 等技術網站：InfoQ 上有大量關於微服務、架構案例研究、企業架構治理的文章（InfoQ 有中文版提供本土案例）。IBM Developer、Microsoft Architecture Center 等也提供架構師指南、參考架構文件。這些平台的內容緊跟業界趨勢，適合持續關注。 專業組織與論壇：可以參加一些架構師的線上論壇或本地社群活動。例如 The Open Group 的架構師社群（關注 TOGAF 討論）、IEEE Software 的討論群組等。在 LinkedIn 上也有「Software Architects」或「Enterprise Architecture Network」等群組，加入後可看到專業人士分享文章和看法，主動參與討論有助於建立人脈並吸收新知。 本地社群與部落格：對於使用繁體中文的讀者，建議關注台灣和香港的一些技術社群與部落格平台。例如 iT 邦幫忙 上有專欄討論架構與 DevOps 轉型的文章系列，或是台灣的架構師社群活動（如 Taiwan Architecture Summit 等）。本地語言的資源更貼近在地產業情境，從中可獲得寶貴的在地實務經驗分享。 🔑 關鍵字 企業架構管理工具（Enterprise Architecture Management Tools，EAM） 開放群組架構架構框架（The Open Group Architecture Framework，TOGAF） Zachman 架構框架（Zachman Framework） 微服務架構（Microservices Architecture） 企業整合模式（Enterprise Integration Patterns，EIP） 資訊安全框架（Security Framework） 系統元件劃分（System Component Decomposition） 系統設計原則（System Design Principles） 架構模式（Architectural Patterns） 分層架構（Layered Architecture） 事件驅動架構（Event-Driven Architecture，EDA） 雲原生設計（Cloud-Native Design） 輕量級框架（Lightweight Frameworks） 二進位制發布管理（Binary Release Management） 容器映像管理（Container Image Management） Docker Registry（Docker Registry） SOLID 原則（SOLID Principles） 設計模式（Design Patterns） 單體應用程式（Monolithic Application） 分散式系統原則（Distributed System Principles） 命令查詢責任分離（Command Query Responsibility Segregation，CQRS） 六邏輯架構（Hexagonal Architecture） 乾淨架構（Clean Architecture） 架構決策的權衡取捨（Architectural Trade-offs） 企業架構域（Business/Data/Application/Technology Architecture，BDAT） 架構治理方法論（Architecture Governance Methodology） 交易的原子性、一致性、隔離性與持久性特性（Atomicity, Consistency, Isolation, Durability，ACID） 零信任安全模型（Zero Trust Security Model） 一致性演算法（Consensus Algorithms） Paxos 演算法（Paxos Algorithm） Raft 演算法（Raft Algorithm） 架構說明書（Architecture Documentation） 技術提案（Technical Proposal） 功能性需求分析（Functional Requirement Analysis） 非功能性需求分析（Non-Functional Requirement Analysis） 架構方案設計（Architecture Solution Design） 系統上下游關係（System Upstream and Downstream Relationships） 資料流與控制流（Data Flow and Control Flow） 技術選型理由（Technology Selection Rationale） 架構評估方法（Architecture Evaluation Methods） ATAM 架構評估法（Architecture Tradeoff Analysis Method，ATAM） 架構層面平衡（Availability, Consistency, Latency, Throughput, Developer Efficiency, Maintainability Trade-offs） 架構開發方法（Architecture Development Method，ADM） 🔖 參考資料 Enterprise Architect vs. Solution Architect vs. Technical Architect https://www.leanix.net/en/wiki/ea/enterprise-architect-vs-solution-architect-vs-technical-architect-whats-the-difference ↩︎ ↩︎ ↩︎ ↩︎ ↩︎ ↩︎ ↩︎ ↩︎ ↩︎ ↩︎ ↩︎ ↩︎ ↩︎ ↩︎ ↩︎ ↩︎ ↩︎ ↩︎ Distinguishing Between DevOps Roles and AWS Solution Architects https://www.linkedin.com/pulse/distinguishing-between-devops-roles-aws-solution-architects-yagci-6jbqf/ ↩︎ ↩︎ ↩︎ ↩︎ ↩︎ ↩︎ ↩︎ ↩︎ Navigating the Architecture from Startup to Enterprise https://dilankam.medium.com/navigating-the-architecture-from-startup-to-enterprise-c355f6d3dd17 ↩︎ ↩︎ ↩︎ IT careers: 4 ways DevOps bolsters your architect skill set https://www.redhat.com/en/blog/devops-career-architecture ↩︎ ↩︎ ↩︎ ↩︎ How to Seamlessly Transition from DevOps to Cloud Architect Role https://cloudmize.medium.com/how-to-seamlessly-transition-from-devops-to-cloud-architect-role-8eb8fe02cd5f ↩︎ How can I switch roles from DevOps to Architect? https://www.reddit.com/r/AWSCertifications/comments/1aorad5/how_can_i_switch_roles_from_devops_to_architect ↩︎","link":"/blog/chatgpt_devops_sa_ea/"},{"title":"[note] 解決 fstatat canonical snap 目錄：權限被拒","text":"註記：此頁為由 AI（gpt-5-mini-2025-08-07）自動翻譯自英文原文，可能含有少量不準確之處。 📌 介紹 在 Ubuntu 上使用 Snap 應用程式時，您可能會遇到與 fstatat 有關的令人困惑的權限錯誤。這篇筆記記錄了一個真實的問題，探討可能的原因，並分享實際有效的簡單解法。 ⭐ 注意 本文最初在遇到實際問題時，並在 ChatGPT 協助下草擬。我已驗證解決方案並修訂內容，以確保對遇到相似問題的人來說準確且清楚。 📚 前置條件 AppArmor LDAP (Lightweight Directory Access Protocol) fstatat snap 以下是本文提及的一些關鍵概念： 術語 中文說明 英文說明 AppArmor Ubuntu 的一種安全模組，用來限制應用程式能存取的資源，例如檔案、網路。 Ubuntu 的安全模組，用來限制應用程式可以存取的資源。 LDAP (Lightweight Directory Access Protocol) 一種常見的用戶驗證協定，常用於企業環境集中管理帳號。 一種常見的用戶驗證協定，常用於企業環境中的集中式帳號管理。 fstatat 一個 Linux 系統呼叫，用來查詢檔案資訊。這個錯誤就是因為它失敗了。 一個用於取得檔案資訊的 Linux 系統呼叫。當此呼叫失敗時會產生錯誤。 Snap Ubuntu 推出的套件系統，讓應用程式更容易安裝、升級與隔離管理。 Ubuntu 的套件系統，讓應用程式更容易安裝、更新，並在沙盒中執行。 非標準家目錄：使用者的家目錄位於預設 /home/username 路徑之外，通常位於不同的磁碟或掛載點上 家目錄為符號連結：家目錄看起來在 /home/username，但實際上是指向其他位置的符號連結 🧭 問題解決框架 問題 1cannot fstatat canonical snap directory: Permission denied 根本原因分析 一般而言，此問題常見有兩個原因： 系統安裝在 NTFS 分割區。 家目錄被符號連結到非標準位置。 檢查檔案系統類型 1234df -T /Filesystem Type 1K-blocks Used Available Use% Mounted on/dev/nvme0n1p4 ext4 669754920 44435324 591224492 7% / 系統安裝在 ext4 分割區 檢查是否有符號連結 123456789ls -l /home/hsiangjenli/Documents/githubdrwxrwxr-x 10 hsiangjenli hsiangjenli 4096 一 27 17:05 blogdrwxrwxr-x 11 hsiangjenli hsiangjenli 4096 三 28 17:03 default-of-credit-card-clients-mlopsdrwxrwxr-x 8 hsiangjenli hsiangjenli 4096 一 29 16:40 hsiangjenli.github.iodrwxrwxr-x 5 hsiangjenli hsiangjenli 4096 三 27 14:28 java-from-pythondrwxrwxr-x 4 hsiangjenli hsiangjenli 4096 一 29 17:19 pic-beddrwxrwxr-x 11 hsiangjenli hsiangjenli 4096 二 16 08:44 python-package-templatedrwxrwxr-x 6 hsiangjenli hsiangjenli 4096 一 27 17:25 star-to-review 這些資料夾都不是符號連結 為什麼會發生 我也不知道 … 解決方案 令人驚訝的是，執行下列指令解決了問題： 1sudo dpkg-reconfigure apparmor 輸入您想使用的目標目錄路徑 重新啟動電腦~~ 🔁 重點回顧 ✅ 錯誤 cannot fstatat canonical snap directory: Permission denied 通常與 AppArmor 的限制有關 ✅ 常見原因包括： 系統或家目錄使用 NTFS 分割區 家目錄為符號連結或位於非標準位置 🔍 在本例中： 系統在 ext4 分割區 — ✅ 不是 NTFS。 家目錄不是符號連結 — ✅ 不是符號連結。 ⚠️ 根本原因仍不明 🛠 問題透過下列方式解決： 執行 sudo dpkg-reconfigure apparmor 在設定過程中輸入家目錄的實際路徑 重新啟動系統 🔗 參考資料 在 Ubuntu 16.04 以 LDAP 使用者執行 snap 應用程式時出現 ‘Permission denied’ 執行以 snap 套件安裝的應用程式時出現 Permission denied 錯誤 - Ubuntu 17.04","link":"/blog/note-solving-fstatat-canonical-snap-directory-permission-denied.zh-TW/"},{"title":"[note] Solving fstatat canonical snap directory: Permission denied","text":"📌 Introduction When using Snap apps on Ubuntu, you might encounter a confusing permission error related to fstatat. This note documents a real-world issue, explores possible causes, and shares the simple solution that worked. ⭐ Note This article was initially drafted with the help of ChatGPT based on a real issue I encountered. I verified the solution and revised the content to ensure accuracy and clarity for others facing similar problems. 📚 Prerequisite AppArmor LDAP (Lightweight Directory Access Protocol) fstatat snap Below are some key concepts mentioned in this article: Term 中文說明 English Description AppArmor Ubuntu 的一種安全模組，用來限制應用程式能存取的資源，例如檔案、網路。 A security module in Ubuntu that restricts what resources an application can access. LDAP (Lightweight Directory Access Protocol) 一種常見的用戶驗證協定，常用於企業環境集中管理帳號。 A common user authentication protocol used for centralized account management, especially in enterprise environments. fstatat 一個 Linux 系統呼叫，用來查詢檔案資訊。這個錯誤就是因為它失敗了。 A Linux system call used to get information about files. The error occurs when this call fails. Snap Ubuntu 推出的套件系統，讓應用程式更容易安裝、升級與隔離管理。 A packaging system by Ubuntu that makes applications easy to install, update, and sandbox. Non-standard home directory: The user’s home directory is located outside the default /home/username path, often on a different drive or mount point Home directory is symlinked: The home directory appears to be in /home/username, but it’s actually a symbolic link pointing to another location 🧭 Problem-solving Framework Problem 1cannot fstatat canonical snap directory: Permission denied Root Cause Analysis In general, there are two common causes for this issue: The system is installed on an NTFS partition. The home directory is symlinked to a non-standard location. Check Filesystem Type 1234df -T /Filesystem Type 1K-blocks Used Available Use% Mounted on/dev/nvme0n1p4 ext4 669754920 44435324 591224492 7% / The system is installed on an ext4 partition Check for Symlinks 123456789ls -l /home/hsiangjenli/Documents/githubdrwxrwxr-x 10 hsiangjenli hsiangjenli 4096 一 27 17:05 blogdrwxrwxr-x 11 hsiangjenli hsiangjenli 4096 三 28 17:03 default-of-credit-card-clients-mlopsdrwxrwxr-x 8 hsiangjenli hsiangjenli 4096 一 29 16:40 hsiangjenli.github.iodrwxrwxr-x 5 hsiangjenli hsiangjenli 4096 三 27 14:28 java-from-pythondrwxrwxr-x 4 hsiangjenli hsiangjenli 4096 一 29 17:19 pic-beddrwxrwxr-x 11 hsiangjenli hsiangjenli 4096 二 16 08:44 python-package-templatedrwxrwxr-x 6 hsiangjenli hsiangjenli 4096 一 27 17:25 star-to-review None of the folders are symbolic links Why This Happens I don’t know … Solution Surprisingly, running the following command solved the issue: 1sudo dpkg-reconfigure apparmor Enter the destination directory that you want to use Reboot the computer~~ 🔁 Recap ✅ The error cannot fstatat canonical snap directory: Permission denied is often related to AppArmor restrictions ✅ Common causes include: Using an NTFS partition for your system or home directory Having a symlinked or non-standard home directory 🔍 In this case: The system is on an ext4 partition — ✅ not NTFS. The home directory is not a symlink — ✅ not symlinked. ⚠️ The root cause remains unclear 🛠 The problem was resolved by: Running sudo dpkg-reconfigure apparmor Entering the actual path to the home directory during configuration Rebooting the system 🔗 References ‘Permission denied’ when running snap applications on Ubuntu 16.04 as a LDAP user Permission denied error when running apps installed as snap packages - Ubuntu 17.04","link":"/blog/note_snap_permission_denied/"},{"title":"[教學] 使用 Mailgun + Python 發送電子郵件","text":"註記：此頁為由 AI（gpt-5-mini-2025-08-07）自動翻譯自英文原文，可能含有少量不準確之處。 📌 介紹 本教學說明如何使用 Mailgun 與 Python 發送電子郵件。你將學會如何設定 Mailgun、產生 API 金鑰，以及撰寫 Python 程式碼來發送有或無附件的電子郵件。 🚀 快速開始 Mailgun Mailgun 提供免費方案，允許每天最多發送 100 封電子郵件。 以下是三件你需要做的事 產生 Mailgun API 金鑰 記住你的 Mailgun 網域名稱（用於發送電子郵件） 將你的電子郵件加入 Mailgun（Mailgun 只允許發送郵件給已授權的收件人） 建立 API 金鑰 從 Mailgun 取得你的網域 設定你的電子郵件並進行驗證 將你的電子郵件加入 Mailgun 檢查信箱以完成驗證 Python 完整程式碼請見： mailgun/demo.py 12345MAILGUN_API_KEY = os.getenv(&quot;MAILGUN_API_KEY&quot;)MAILGUN_DOMAIN_NAME = os.getenv(&quot;MAILGUN_DOMAIN_NAME&quot;)MAILGUN_API_URL = ( f&quot;https://api.mailgun.net/v3/{MAILGUN_DOMAIN_NAME}.mailgun.org/messages&quot;) 1234567891011@error_handler_for_send_emaildef send_email(from_email: str, to_email: Union[str, list], subject: str, text: str): # Define the email parameters email_data = {&quot;from&quot;: from_email, &quot;to&quot;: to_email, &quot;subject&quot;: subject, &quot;text&quot;: text} # Send the email r = requests.post( url=MAILGUN_API_URL, auth=(&quot;api&quot;, MAILGUN_API_KEY), data=email_data ) return r 1234567891011121314151617181920212223@error_handler_for_send_emaildef send_email_with_attachment( from_email: str, to_email: Union[str, list], subject: str, text: str, attachment_paths: list,): # Define the email parameters email_data = {&quot;from&quot;: from_email, &quot;to&quot;: to_email, &quot;subject&quot;: subject, &quot;text&quot;: text} # Read the attachment files = [ (&quot;attachment&quot;, open(attachment_path, &quot;rb&quot;)) for attachment_path in attachment_paths ] # Send the email r = requests.post( url=MAILGUN_API_URL, auth=(&quot;api&quot;, MAILGUN_API_KEY), data=email_data, files=files ) return r Gmail 從 Mailgun 發送郵件後，你可以檢查收件匣。郵件可能會被標記為垃圾郵件，請檢查垃圾郵件資料夾是否有該郵件。 🔁 小結 Mailgun 設定：產生 API 金鑰、取得你的網域名稱，並驗證你的電子郵件 Python 整合：使用 Mailgun API 與 Python 程式化發送電子郵件 附件發送：學習如何使用 Mailgun API 發送包含附件的郵件 🔗 參考資料 https://www.mailgun.com/blog/it-and-engineering/send-email-using-python/ https://stackoverflow.com/questions/53861582/sent-email-via-python-using-mailgun-api","link":"/blog/tutorial-using-mailgun-python-to-send-email.zh-TW/"},{"title":"[tutorial] Using Mailgun + Python to send email","text":"📌 Introduction This tutorial covers how to send emails using Mailgun and Python. You’ll learn how to set up Mailgun, generate an API key, and write Python code to send emails with or without attachments. 🚀 Quick Start Mailgun Mailgun provides a free plan allows sending up to 100 emails per day. Here are three things you need to do Generate a Mailgun API key Remember your Mailgun domain name (used for sending email) Add your email to Mailgun (Mailgun only allows sending an email to authorized recipients) Create an API key Get your domain from Mailgun Set up your email &amp; verify it Add your email to mailgun Check your mailbox to verify it Python To see the entire code : mailgun/demo.py 12345MAILGUN_API_KEY = os.getenv(&quot;MAILGUN_API_KEY&quot;)MAILGUN_DOMAIN_NAME = os.getenv(&quot;MAILGUN_DOMAIN_NAME&quot;)MAILGUN_API_URL = ( f&quot;https://api.mailgun.net/v3/{MAILGUN_DOMAIN_NAME}.mailgun.org/messages&quot;) 1234567891011@error_handler_for_send_emaildef send_email(from_email: str, to_email: Union[str, list], subject: str, text: str): # Define the email parameters email_data = {&quot;from&quot;: from_email, &quot;to&quot;: to_email, &quot;subject&quot;: subject, &quot;text&quot;: text} # Send the email r = requests.post( url=MAILGUN_API_URL, auth=(&quot;api&quot;, MAILGUN_API_KEY), data=email_data ) return r 1234567891011121314151617181920212223@error_handler_for_send_emaildef send_email_with_attachment( from_email: str, to_email: Union[str, list], subject: str, text: str, attachment_paths: list,): # Define the email parameters email_data = {&quot;from&quot;: from_email, &quot;to&quot;: to_email, &quot;subject&quot;: subject, &quot;text&quot;: text} # Read the attachment files = [ (&quot;attachment&quot;, open(attachment_path, &quot;rb&quot;)) for attachment_path in attachment_paths ] # Send the email r = requests.post( url=MAILGUN_API_URL, auth=(&quot;api&quot;, MAILGUN_API_KEY), data=email_data, files=files ) return r Gmail After sending the email from Mailgun, you can check your inbox. It might be marked as spam, so you can check your spam folder to see if the email is there. 🔁 Recap Mailgun Setup: Generate an API key, retrieve your domain name, and verify your email Python Integration: Use the Mailgun API with Python to send emails programmatically Sending Attachments: Learn how to send emails with attachments using the Mailgun API 🔗 References https://www.mailgun.com/blog/it-and-engineering/send-email-using-python/ https://stackoverflow.com/questions/53861582/sent-email-via-python-using-mailgun-api","link":"/blog/tutorial_mailgun_python/"},{"title":"[note] 策略性思考模型","text":"註記：此頁為由 AI（gpt-5-mini-2025-08-07）自動翻譯自英文原文，可能含有少量不準確之處。 📌 簡介 “解鎖心智，結構化思考” 🚀 曼陀羅九宮格 🚀 心流八通道","link":"/blog/note-strategic-thinking-models.zh-TW/"},{"title":"[note] Strategic Thinking Models","text":"📌 Introduction “ Unlocking Minds, Structuring Thoughts ” 🚀 曼陀羅九宮格 🚀 心流八通道","link":"/blog/note_strategic_thinking_models/"},{"title":"[教學] GitHub + PicGo + VSCode 擴充套件","text":"註記：此頁為由 AI（gpt-5-mini-2025-08-07）自動翻譯自英文原文，可能含有少量不準確之處。 📌 介紹 本文提供如何設定 GitHub、PicGo 與 VSCode 擴充套件的教學，以便將圖片上傳到 GitHub 儲存庫。說明必要的先決條件、產生 GitHub 權杖的步驟，以及在 VSCode 中設定 PicGo 擴充套件的重點步驟。 🚀 快速開始 開始前準備 請確認你已具備下列項目： 具有存取你儲存庫權限的 GitHub 權杖 一個用於存放圖片的儲存庫 GitHub 產生 GitHub 權杖 前往 Settings/Developer settings/Personal access tokens/Token (classic) 點選 Generate new token (classic) 為權杖設定名稱以便識別，並選擇 No expiration 選取該權杖所需的權限範圍（scopes） 設定儲存庫 為確保圖片可被存取，請將你的儲存庫設為 public。 VSCode 擴充套件 在 VSCode 中安裝 PicGo 擴充套件 將 Pic Bed: Current 設為 github 將 Pic Bed &gt; Github: Repo 設為你先前建立的公開儲存庫。格式為 {username}/{repo_name} 將 Pic Bed: Uploader 設為 github 將 Pic Bed &gt; Github: Branch 設為公開儲存庫的分支 設定 Pic Bed &gt; Github: Path（可選）。若要將圖片儲存在特定資料夾（例如 images），請確保包含結尾的斜線（/），否則會被當作圖片名稱的前綴。 將 Pic Bed &gt; Github: Token 設為你先前建立的 GitHub 權杖 疑難排解 若出現以下錯誤，表示系統未安裝 xclip： 1PicGo: xclip not found! Please install xclip before run picgo. 可使用下列指令安裝 xclip： 1sudo apt install xclip 🔁 總結 你需要一個 GitHub 權杖與一個用於儲存圖片的公開儲存庫。 在 VSCode 中安裝 PicGo 擴充套件以進行圖片上傳。 在 PicGo 擴充套件中按照特定設定步驟將其與 GitHub 連結。 可能的疑難排解包含確認系統已安裝 xclip。","link":"/blog/tutorial-github-picgo-vscode-extension.zh-TW/"},{"title":"[tutorial] GitHub + PicGo + VSCode Extension","text":"📌 Introduction This article provides a tutorial on setting up GitHub, PicGo, and a VSCode extension to facilitate image uploading to GitHub repositories. It outlines the necessary prerequisites, the procedure to generate a GitHub token, and essential steps for configuring the PicGo extension in VSCode. 🚀 Quick Start Before You Start Make sure you have following: A Github Token with access to your repo A repo to store images GitHUb Generate GitHub Token Go to Settings/Developer settings/Personal access tokens/Token (classic) Click Generate new token (classic) Set a name for the token to identify it easily and choose No expiration Select the required scopes for the token Set Up Repo To ensure your images are accessible, set your repo to public. VScode Extension Install PicGo extension in VScode Set Pic Bed: Current to github Set Pic Bed &gt; Github: Repo to your previously created public repo. Format is {username}/{repo_name} Set Pic Bed: Uploader to github Set Pic Bed &gt; Github: Branch to the branch of your public repo Set Pic Bed &gt; Github: Path (Optional). If you want to store images in specific folder (e.g. images). Make sure to include a trailing slash (/), otherwise, it will be used as a prefix for image names Set Pic Bed &gt; Github: Token to the Github token you created earlier Troubleshooting If you see the following error, it means xclip is not installed: 1PicGo: xclip not found! Please install xclip before run picgo. To fix this, install xclip using the following command: 1sudo apt install xclip 🔁 Recap You need a Github token and a public repository for image storage. Install the PicGo extension in VSCode for image uploading. Follow specific configuration steps in the PicGo extension to link it with GitHub. Potential troubleshooting includes ensuring xclip is installed on your system.","link":"/blog/tutorial_github_picgo_vscode/"},{"title":"[note] Windows 11 + Ubuntu Dual-Boot Installation Record","text":"Note: This page is an AI-generated (gpt-5-mini-2025-08-07) translation from Traditional Chinese and may contain minor inaccuracies. 🎒 Preparations 💻 Computer information Model: VivoBook 14 X1405VA-0041K OS: Windows 11 CPU: i5-13500H SSD: NVMe SAMSUNG MZVL4512HBLU-00BTW BIOS access key: F2 Boot device selection key: F12 🎯 Goal The current SSD already has Win 11 installed. The goal is to partition the 1 TB SSD and install Ubuntu 20.04 LTS - 350 GB - 650 GB 💻 Procedure 🚨 Notes According to online tutorials, most changes are made in the BIOS menu However, some manufacturers disable these options (to prevent users from damaging the computer) That also makes changes troublesome, and in the end you may need to reset Windows, so back up your computer Turn off BitLocker Ensure BIOS is updated to the latest version The latest BIOS typically includes bug fixes and improved hardware compatibility, which helps avoid unnecessary issues during installation Set the BIOS Boot Mode to UEFI UEFI is the modern standard boot mode, offering better disk partition support, faster startup, and security features. Both Ubuntu and Windows are recommended to use UEFI rather than legacy BIOS (CSM) Disable Secure Boot Secure Boot prevents unauthorized operating systems from booting, but some Ubuntu releases or custom drivers may not pass verification, causing installation failures Find the Secure Boot setting in BIOS and set it to Disabled Disable Fast Boot (BIOS &amp; Windows Control Panel) Fast Boot skips some hardware initialization and may cause the USB boot drive to not be detected, affecting Ubuntu installation In BIOS, find Fast Boot and set it to Disabled In Windows Control Panel under Hardware and Sound -&gt; Power Options, turn off Fast Startup Confirm SATA Configuration is set to AHCI mode (this is the most likely place to encounter issues; some BIOSes don’t expose these options) It must not be RAID Disable CSM (Compatibility Support Module) CSM provides compatibility for legacy BIOS; disabling it makes the system focus on UEFI booting and reduces potential compatibility problems In BIOS, find CSM and set it to Disabled Step 1 Partition the disk First, partition the disk in Windows into Windows and Ubuntu systems Search on the computer for Create and format hard disk partitions Step 2 Turn off fast startup Windows - Fast Startup BIOS - Fast Boot Windows In Windows Control Panel, find the power management options and turn off fast startup Step 3 Remove drivers related to Intel RST [1] This step will cause the computer to fail to boot afterward and will require resetting the entire computer (you need a strong heart 💔💔💔…) But only after resetting can you successfully turn off RST (change the disk from RAID to AHCI); otherwise Ubuntu cannot detect the SSD during installation Press Win + X and open Device Manager Inside, find Storage Controllers, where you will see the Intel RST driver This is the main culprit that causes the SSD to not be detected during the Ubuntu installation!!! Please follow the steps in Ubuntu Documentation - RST &amp; Ubuntu installation to uninstall the Intel RST driver step by step Press Win + R, search regedit HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\iaStorV\\ Find the Start entry and change its value to 0 Find StartOverride and change its value to 0 HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\storahci\\ Find the Start entry and change its value to 0 Find StartOverride and change its value to 0 Uninstall the Intel RST driver Completely uninstall the Intel RST driver, then reboot During reboot you will get a blue screen showing INACCESSIBLE_BOOT_DEVICE; the solution is to reset the entire computer After resetting Again press Win + X to open Device Manager and check Storage Controllers to confirm whether Intel RST is still present Step 4 Install Ubuntu Install Ubuntu using a USB drive Press F12 to select the USB drive as the boot device Since partitions were pre-created, choose Installation Type -&gt; Something else Keep confirming through the prompts; the subsequent installation should not have many problems Driver issues In the past, installing on a desktop and my old laptop I didn’t encounter Wi-Fi driver issues But this Vivobook had issues; the quickest fix was to buy a Linux-compatible USB wireless adapter TP-Link TL-WN725N22 Glossary CSM - Compatibility Support Module Intel RST - Intel Rapid Storage Technology Ubuntu Documentation - RST &amp; Ubuntu installation https://help.ubuntu.com/rst/ ↩︎","link":"/blog/note-window-11-ubuntu.en/"},{"title":"[note] Window 11 + Ubuntu 雙系統安裝紀錄","text":"🎒 預先準備 💻 電腦資訊 型號：VivoBook 14 X1405VA-0041K 系統：Windows 11 CPU：i5-13500H SSD：NVMe SAMSUNG MZVL4512HBLU-00BTW 進入 BIOS 快捷鍵：F2 選擇開機碟快捷鍵：F12 🎯 目標 目前的 SSD 已經安裝上 win 11，目標是將 1 TB 的 SSD 做磁碟分割後安裝上 Ubuntu 20.04 LTS - 350 GB - 650 GB 💻 操作流程 🚨 注意事項 根據網路上的教學文章，大部分的修改都是在 BIOS 選單內 但是，現在有些電腦的廠商會把這些選項關掉（避免使用者把電腦弄壞） 這也讓更改變得麻煩，最後可能會搞到需要重設 windows，需把電腦備份好 關掉 Bitlocker 確認 BIOS 已更新至最新版本 最新版本的 BIOS 通常包含修復錯誤和改進硬體相容性的功能，有助於避免安裝過程中的不必要問題 將 BIOS 的 Boot Mode 設定為 UEFI UEFI 是現代系統的標準開機模式，具有更好的硬碟分割支援、快速啟動和安全功能。Ubuntu 和 Windows 都建議使用 UEFI 而非傳統的 BIOS（CSM） 關閉 Secure Boot Secure Boot 的作用是防止未授權的操作系統啟動，但某些 Ubuntu 發行版本或自訂驅動程式可能無法正確通過驗證，導致安裝失敗 在 BIOS 中找到 Secure Boot 設定，將其設為 Disabled 關閉 Fast Boot（BIOS &amp; Windows Control Panel） Fast Boot 會跳過部分硬體初始化過程，可能導致 USB 開機盤無法被檢測到，從而影響 Ubuntu 的安裝 進入 BIOS，找到 Fast Boot 設定，將其設為 Disabled 在 Windows 中的 Control Panel 找到 Hardware and Sound 底下的 Power Option，把 Fast Starup 關閉 確認 SATA Configuration 設定為 AHCI 模式（這邊最有可能出現問題，BIOS 有些會沒有這些選項可以更改） 不能是 Raid 關閉 CSM（Compatibility Support Module） CSM 是用於支援傳統 BIOS 的相容性模式，關閉後系統會專注於使用 UEFI 啟動，減少可能的相容性問題 在 BIOS 中找到 CSM 設定，將其設為 Disabled Step 1 磁碟分割 首先會在 windows 上做磁碟分割，分成 windows 跟 ubuntu 兩個系統 在電腦上搜尋 Create and format hard disk partitions Step 2 關閉快速啟動 Windows - Fast Startup BIOS - Fast Boot Windows 在 windows 中 的 control panel 找到管理電源的選項，把 fast startup 關掉 Step 3 跟 Intel RST 有關的 driver 刪除 [1] 這個步驟會讓之後電腦開機的時候失敗，會需要整台電腦重設（需要有一顆強壯的心臟 💔💔💔…） 但是重設完之後才可以順利把 RST 關掉（把硬碟從 Raid 改成 AHCI），否則 ubuntu 在安裝的時候會讀取不到這個 SSD 按 Win + X 快捷鍵後找到 Device Manager 進去裡面找到 Storage Controllers，在裡面會看到 Intel RST 的 driver 這個就是安裝 ubuntu 過程中導致無法偵測到 SSD 的罪魁禍首！！！！ 請按照 Ubuntu Documentation - RST &amp; Ubuntu installation 裡面的步驟一步一步的卸載 Intel RST driver 按 Win + R，搜尋 regedit HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\iaStorV\\ 找到 Start 選項，把值改成 0 找到 StartOverride 把值改成 0 HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\storahci\\ 找到 Start 選項，把值改成 0 找到 StartOverride 把值改成 0 把 Intel RST driver 卸載 把 Intel RST driver 完全 uninstall，然後重新開機 重新開機的過程會藍屏，上面是顯示 INACCESSIBLE_BOOT_DEVICE，解決方式就是重新設定整台電腦 重設完之後 一樣按 Win + X 進入 Device Manager 看 Storage Controllers 裡面確認 Intel RST 是否還在 Step 4 安裝 Ubuntu 使用隨身碟安裝 Ubuntu 按 F12 選擇隨身碟當作開機碟 因為已經預先切好磁碟區，Installation Type 就選 Something else 一路按確認即可，後續安裝不太會有問題 驅動問題 過往安裝桌機跟自己舊筆電的時候都沒遇到 wifi 驅動問題 但是這台 vivobook 遇到了，最快的解法是直接買一個支援 linux 的無線連接器 TP-Link TL-WN725N22 專有名詞 CSM - Compatibility Support Module Intel RST - Intel Rapid Storage Technology Ubuntu Documentation - RST &amp; Ubuntu installation https://help.ubuntu.com/rst/ ↩︎","link":"/blog/note_chinese_u2004_win11/"},{"title":"[note] 想使用 pip 從 GitHub 儲存庫安裝最新版本","text":"註記：此頁為由 AI（gpt-5-mini-2025-08-07）自動翻譯自英文原文，可能含有少量不準確之處。 📌 簡介 This article explains how to install a specific branch of a GitHub repository using pip, particularly focusing on the ‘devel’ branch, which is typically used for development purposes rather than stable releases. 🚀 快速開始 若要使用 pip 從 GitHub 安裝開發版本，請執行以下指令： 1pip install git+https://github.com/username/repository.git@devel 🔁 重點回顧 你可以使用 pip 從 GitHub 安裝特定分支。 ‘devel’ 分支通常包含不穩定的開發版本。 要安裝，請使用指令格式：pip install git+{repo_url}@{branch_name}。 將 {repo_url} 替換為你的儲存庫 URL，並將 {branch_name} 替換為 ‘devel’。 請確認系統已安裝 pip 才能使用此指令。","link":"/blog/note-want-to-install-the-latest-version-from-a-github-repo-using-pip.zh-TW/"},{"title":"[note] Want to install the latest version from a GitHub repo using pip","text":"📌 Introduction This article explains how to install a specific branch of a GitHub repository using pip, particularly focusing on the ‘devel’ branch, which is typically used for development purposes rather than stable releases. 🚀 Quick Start To install the development version from GitHub using pip, execute the following command: 1pip install git+https://github.com/username/repository.git@devel 🔁 Recap You can install a specific branch from GitHub using pip. The ‘devel’ branch typically contains unstable development versions. To install, use the command format: pip install git+{repo_url}@{branch_name}. Replace {repo_url} with your repository URL and {branch_name} with ‘devel’. Ensure you have pip installed to use this command.","link":"/blog/note_pip_github_branch/"},{"title":"[筆記] Fish?","text":"註記：此頁為由 AI（gpt-5-mini-2025-08-07）自動翻譯自英文原文，可能含有少量不準確之處。 📌 介紹 本文介紹 FISH shell，一個使用者友善的互動式 shell，旨在改善命令列體驗。說明了在 macOS 上的安裝方式與基本用法。 🚀 快速開始 在 macOS 上安裝 1brew install fish 使用 Fish Shell 在終端機輸入 fish 即可進入 FISH shell 🔁 重點回顧 FISH 是一個友善的互動式 shell，可增強命令列體驗。 可在 macOS 使用 Homebrew 安裝，指令為 brew install fish。 要開始使用 FISH，只需在終端機中輸入 fish。 🔗 參考資料 如何在 Linux 中安裝、配置和使用 Fish Shell？ 終於，一個為 90 年代而生的命令列 shell","link":"/blog/note-fish.zh-TW/"},{"title":"[note] Fish?","text":"📌 Introduction This article introduces the FISH shell, a user-friendly interactive shell designed to improve the command line experience. It highlights its installation on MacOS and basic usage. 🚀 Quick Start Installation on MacOS 1brew install fish Using Fish Shell By typing fish to enter FISH’s shell 🔁 Recap FISH is a friendly interactive shell that enhances the command line experience. Installation on MacOS can be done using Homebrew with the command brew install fish. To start using FISH, simply type fish in the terminal. 🔗 References 如何在 Linux 中安裝、配置和使用 Fish Shell？ Finally, a command line shell for the 90s","link":"/blog/note_fish/"},{"title":"[note] MarkItDown：一個可順利將 docx 與 pptx 轉換為 markdown 的工具","text":"註記：此頁為由 AI（gpt-5-mini-2025-08-07）自動翻譯自英文原文，可能含有少量不準確之處。 📌 介紹 這篇文章討論 MarkItDown，一個專為輕鬆將 docx 和 pptx 檔案轉換成 markdown 格式而設計的工具。它說明了在此轉換流程中會用到的各種 Python 函式庫，幫助使用者有效處理文件與多媒體內容。 🚀 快速開始 MarkItDown 如何運作？ 以下列出 MarkItDown 使用的模組 12345678910111213141516dependencies = [ &quot;beautifulsoup4&quot;, &quot;requests&quot;, &quot;mammoth&quot;, &quot;markdownify&quot;, &quot;numpy&quot;, &quot;python-pptx&quot;, &quot;pandas&quot;, &quot;openpyxl&quot;, &quot;pdfminer.six&quot;, &quot;puremagic&quot;, &quot;pydub&quot;, &quot;youtube-transcript-api&quot;, &quot;SpeechRecognition&quot;, &quot;pathvalidate&quot;,] mammoth https://pypi.org/project/mammoth/ Mammoth 是一個用於將 MS Word、Google 文件、LibreOffice 等文件轉換成 HTML 的工具 python-pptx https://github.com/scanny/python-pptx 一個可以建立/讀取/更新 .pptx 檔案的 Python 函式庫 openpyxl https://openpyxl.readthedocs.io/en/stable/ 一個用於讀寫 Excel 2010 xlsx、xlsm、xltx、xltm 檔案的 Python 函式庫 pdfminer https://github.com/pdfminer/pdfminer.six Pdfminer.six 是從原始 PDFMiner 分岔出來，由社群維護的版本。此模組可協助使用者從 PDF 檔案擷取資訊。 pydub https://github.com/jiaaro/pydub 讓你以簡單的方式操作音訊 youtube-transcript-api https://github.com/jdepoix/youtube-transcript-api 一個 Python API，可取得指定 YouTube 影片的逐字稿 SpeechRecognition https://github.com/Uberi/speech_recognition/tree/master 支援像 Google Cloud Speech API、Wit.ai、Whisper 等語音轉文字引擎 markdownify https://github.com/matthewwithanm/python-markdownify 將 HTML 轉換成 Markdown pathvalidate https://github.com/thombashi/pathvalidate 一個用於清理與驗證字串（如檔名、檔案路徑等）的 Python 函式庫 puremagic https://github.com/cdgriffith/puremagic/tree/master Puremagic 是一個 檔案類型偵測工具，它能在不依賴副檔名的情況下識別輸入檔案的類型。由於副檔名可以輕易更改，僅靠副檔名來辨識檔案類型可能有風險。此模組定義一組規則來讀取檔案內容並判定其類型。 123456789101112131415# puremagic/magic_data.json{ &quot;extension_only&quot;: [ [&quot;&quot;, 0, &quot;.txt&quot;, &quot;text/plain&quot;, &quot;Text File&quot;], [&quot;&quot;, 0, &quot;.log&quot;, &quot;text/plain&quot;, &quot;Logger File&quot;], [&quot;&quot;, 0, &quot;.yaml&quot;, &quot;application/x-yaml&quot;, &quot;YAML File&quot;], [&quot;&quot;, 0, &quot;.yml&quot;, &quot;application/x-yaml&quot;, &quot;YAML File&quot;], [&quot;&quot;, 0, &quot;.toml&quot;, &quot;application/toml&quot;, &quot;TOML File&quot;], [&quot;&quot;, 0, &quot;.py&quot;, &quot;text/x-python&quot;, &quot;Python File&quot;], [&quot;&quot;, 0, &quot;.pyc&quot;, &quot;application/x-python&quot;, &quot;Python Complied File&quot;], [&quot;&quot;, 0, &quot;.pyd&quot;, &quot;application/x-python&quot;, &quot;Python Complied File&quot;], [&quot;&quot;, 0, &quot;.python_history&quot;, &quot;text/plain&quot;, &quot;Python History File&quot;], [&quot;&quot;, 0, &quot;.bat&quot;, &quot;application/x-script&quot;, &quot;Windows BAT file&quot;], [&quot;&quot;, 0, &quot;.gitconfig&quot;, &quot;text/plain&quot;, &quot;Git Ignore File&quot;],... 🔁 重點回顧 MarkItDown 可順利將 docx 與 pptx 檔案轉換為 markdown 格式。 此轉換需要多種依賴項，包括處理文件、音訊與資料的函式庫。 每個提到的函式庫都有其特定功能，例如將 Word 文件轉為 HTML 或讀取 Excel 檔案。 🔗 參考資料 https://pypi.org/project/mammoth/ https://github.com/scanny/python-pptx https://openpyxl.readthedocs.io/en/stable/ https://github.com/pdfminer/pdfminer.six https://github.com/jiaaro/pydub https://github.com/jdepoix/youtube-transcript-api https://github.com/Uberi/speech_recognition/tree/master https://github.com/matthewwithanm/python-markdownify https://github.com/thombashi/pathvalidate https://github.com/cdgriffith/puremagic/tree/master","link":"/blog/note-markitdown-a-tool-for-smoothly-converting-docx-and-pptx-into-markdown.zh-TW/"},{"title":"[note] MarkItDown: A tool for smoothly converting docx and pptx into markdown","text":"📌 Introduction This article discusses MarkItDown, a tool specifically designed to effortlessly convert docx and pptx files into markdown format. It highlights various Python libraries that serve as dependencies for this conversion process, enabling users to handle documents and multimedia content effectively. 🚀 Quick Start How MarkItDown works? Down below are the module use for MarkItDown 12345678910111213141516dependencies = [ &quot;beautifulsoup4&quot;, &quot;requests&quot;, &quot;mammoth&quot;, &quot;markdownify&quot;, &quot;numpy&quot;, &quot;python-pptx&quot;, &quot;pandas&quot;, &quot;openpyxl&quot;, &quot;pdfminer.six&quot;, &quot;puremagic&quot;, &quot;pydub&quot;, &quot;youtube-transcript-api&quot;, &quot;SpeechRecognition&quot;, &quot;pathvalidate&quot;,] mammoth https://pypi.org/project/mammoth/ Mammoth is a tool designed for converting documents like MS Word, Google Docs, and LibreOffice files into HTML python-pptx https://github.com/scanny/python-pptx A Python library that can create/read/update .pptx file openpyxl https://openpyxl.readthedocs.io/en/stable/ A Python library to read/write Excel 2010 xlsx xlsm xltx xltm file pdfminer https://github.com/pdfminer/pdfminer.six Pdfminer.six is a community-maintained version that was forked from original PDFMiner. This module helps users extract information from PDF files. pydub https://github.com/jiaaro/pydub Make it easy for you to manipulate audio in a simple way youtube-transcript-api https://github.com/jdepoix/youtube-transcript-api A Python API allows you to get the transcript for a given YouTube video SpeechRecognition https://github.com/Uberi/speech_recognition/tree/master Support for speech-to-text engines like Google Cloud Speech API, Wit.ai, Whisper, etc markdownify https://github.com/matthewwithanm/python-markdownify Convert HTML file into Markdown pathvalidate https://github.com/thombashi/pathvalidate A Python library to sanitize and validate strings such as filenames, file paths, etc puremagic https://github.com/cdgriffith/puremagic/tree/master Puremagic is a file type detection tool that can identify the type of an input file without relying on its extension. Since file extensions can be easily changed, using them alone to identify file type can be risky. This module defines a set of rules to read the file content and determine its type. 123456789101112131415# puremagic/magic_data.json{ &quot;extension_only&quot;: [ [&quot;&quot;, 0, &quot;.txt&quot;, &quot;text/plain&quot;, &quot;Text File&quot;], [&quot;&quot;, 0, &quot;.log&quot;, &quot;text/plain&quot;, &quot;Logger File&quot;], [&quot;&quot;, 0, &quot;.yaml&quot;, &quot;application/x-yaml&quot;, &quot;YAML File&quot;], [&quot;&quot;, 0, &quot;.yml&quot;, &quot;application/x-yaml&quot;, &quot;YAML File&quot;], [&quot;&quot;, 0, &quot;.toml&quot;, &quot;application/toml&quot;, &quot;TOML File&quot;], [&quot;&quot;, 0, &quot;.py&quot;, &quot;text/x-python&quot;, &quot;Python File&quot;], [&quot;&quot;, 0, &quot;.pyc&quot;, &quot;application/x-python&quot;, &quot;Python Complied File&quot;], [&quot;&quot;, 0, &quot;.pyd&quot;, &quot;application/x-python&quot;, &quot;Python Complied File&quot;], [&quot;&quot;, 0, &quot;.python_history&quot;, &quot;text/plain&quot;, &quot;Python History File&quot;], [&quot;&quot;, 0, &quot;.bat&quot;, &quot;application/x-script&quot;, &quot;Windows BAT file&quot;], [&quot;&quot;, 0, &quot;.gitconfig&quot;, &quot;text/plain&quot;, &quot;Git Ignore File&quot;],... 🔁 Recap MarkItDown allows smooth conversion of docx and pptx files to markdown format. A variety of dependencies are required for this conversion, including libraries for handling documents, audio, and data. Each library mentioned has its own specific functionality, such as converting Word documents to HTML or reading Excel files. 🔗 References https://pypi.org/project/mammoth/ https://github.com/scanny/python-pptx https://openpyxl.readthedocs.io/en/stable/ https://github.com/pdfminer/pdfminer.six https://github.com/jiaaro/pydub https://github.com/jdepoix/youtube-transcript-api https://github.com/Uberi/speech_recognition/tree/master https://github.com/matthewwithanm/python-markdownify https://github.com/thombashi/pathvalidate https://github.com/cdgriffith/puremagic/tree/master","link":"/blog/note_markitdown/"},{"title":"[note] 修正 apache&#x2F;airflow:2.10.2 Docker 映像中 Git 安裝問題","text":"註記：此頁為由 AI（gpt-5-mini-2025-08-07）自動翻譯自英文原文，可能含有少量不準確之處。 📌 介紹 The article discusses the issue of permission errors when attempting to install packages from GitHub while using the apache/airflow:2.10.2 Docker image. It presents a solution that involves temporarily switching to the root user to install ‘git’ and then reverting to the airflow user for further installations. 🚀 快速開始 12345678FROM apache/airflow:slim-2.10.2USER rootRUN apt-get update &amp;&amp; apt-get install -y gitUSER airflowCOPY requirements.txt requirements.txtRUN pip install --no-cache-dir -r requirements.txt 🔁 重點回顧 使用 apache/airflow:2.10.2 映像從 GitHub 安裝套件時，可能會發生權限錯誤。 為了解決此問題，請在切回 airflow 使用者之前，以 root 使用者身分安裝 git。 範例 Dockerfile 示範了執行這些操作的步驟。","link":"/blog/note-fixing-git-installation-issues-in-apache-airflow-2-10-2-docker-image.zh-TW/"},{"title":"[note] Fixing Git Installation Issues in apache&#x2F;airflow:2.10.2 Docker Image","text":"📌 Introduction The article discusses the issue of permission errors when attempting to install packages from GitHub while using the apache/airflow:2.10.2 Docker image. It presents a solution that involves temporarily switching to the root user to install ‘git’ and then reverting to the airflow user for further installations. 🚀 Quick Start 12345678FROM apache/airflow:slim-2.10.2USER rootRUN apt-get update &amp;&amp; apt-get install -y gitUSER airflowCOPY requirements.txt requirements.txtRUN pip install --no-cache-dir -r requirements.txt 🔁 Recap Permission errors can occur with the apache/airflow:2.10.2 image when installing packages from GitHub. To resolve this issue, install git as the root user before switching back to the airflow user. The Dockerfile provided demonstrates the steps to perform these actions.","link":"/blog/note_airflow_docker_permission_error/"},{"title":"[note] 使用 TypedDict 提升程式碼可讀性","text":"註記：此頁為由 AI（gpt-5-mini-2025-08-07）自動翻譯自英文原文，可能含有少量不準確之處。 📌 介紹 本文討論在 Python 中使用 TypedDict 於儲存複雜資料時，如何提升程式碼可讀性的好處。它說明了 TypedDict 如何透過 IDE 提供建議以協助開發者，同時也指出其在嚴格型別檢查方面的侷限。 🚀 快速開始 12345678from typing import TypedDictimport datetimeclass News(TypedDict): title: str create_date: datetime.datetime content: str 🔁 重點回顧 TypedDict 對於以預先定義欄位來維持程式碼可讀性很有用。 它透過提供 IDE 建議來提升開發效率。 TypedDict 有其侷限，特別是在嚴格型別檢查方面。 🔗 參考資料 https://juejin.cn/post/7342790243009363977","link":"/blog/note-enhancing-code-clarity-with-typeddict.zh-TW/"},{"title":"[note] Enhancing Code Clarity with TypedDict","text":"📌 Introduction This article discusses the benefits of using TypedDict in Python for enhancing code clarity when storing complex data. It highlights how TypedDict helps developers by providing suggestions through their IDE, while also noting its limitations regarding strict type enforcement. 🚀 Quick Start 12345678from typing import TypedDictimport datetimeclass News(TypedDict): title: str create_date: datetime.datetime content: str 🔁 Recap TypedDict is useful for maintaining code clarity with predefined fields. It enhances development efficiency by providing IDE suggestions. There are limitations to TypedDict, particularly regarding strict type checking. 🔗 References https://juejin.cn/post/7342790243009363977","link":"/blog/note_typedict/"},{"title":"[tutorial] 使用 commitollama 強化提交訊息：VSCode 與本地 LLM 整合指南","text":"註記：此頁為由 AI（gpt-5-mini-2025-08-07）自動翻譯自英文原文，可能含有少量不準確之處。 📌 介紹 本文介紹 commitollama，這是一個用於產生提交訊息（commit messages）的工具，作為 GitHub Copilot 的替代方案，採用本地 LLM 以確保機密專案的隱私。本文說明在 VSCode 中安裝 commitollama 擴充套件的流程以及開始使用所需的設定步驟。 🚀 快速開始 使用方式 在 VSCode 中安裝該擴充套件。 安裝 Ollama 以整合 LLM。 安裝 Ollama 執行以下指令以安裝 Ollama： 1curl -fsSL https://ollama.com/install.sh | sh 安裝完成後，可透過下列方式執行 Ollama： 1ollama 這會顯示可用指令清單： 12345678910111213141516171819202122Usage: ollama [flags] ollama [command]Available Commands: serve Start ollama create Create a model from a Modelfile show Show information for a model run Run a model pull Pull a model from a registry push Push a model to a registry list List models ps List running models cp Copy a model rm Remove a model help Help about any commandFlags: -h, --help help for ollama -v, --version Show version informationUse &quot;ollama [command] --help&quot; for more information about a command. 下載 Phi3 模型 (3.8b)，執行： 1ollama pull phi3:3.8b 啟動 Ollama 服務： 1ollama serve 如果遇到錯誤訊息 Error: listen tcp 127.0.0.1:11434: bind: address already in use，可在 這裡 找到解法。 要重新啟動 Ollama，先停止目前服務再重新啟動： 12systemctl stop ollama.serviceollama serve 若要避免下載後模型被刪除，請參閱此討論 這裡 。 在 VSCode 中設定 安裝擴充套件後，可使用自訂模型來產生提交訊息。 在介面中按下按鈕即可自動產生提交訊息。 🔁 回顧 commitollama 是一個重視隱私的提交訊息產生器，作為 GitHub Copilot 的替代方案。 該工具利用開放原始碼 LLM，例如 Llama、Mistral 與 Phi3。 透過簡單的擴充套件安裝程序即可與 VSCode 輕鬆整合。 使用者可以輕鬆取得模型、啟動服務並有效率地生成提交訊息。 🔗 參考資料 https://github.com/ollama/ollama/issues/707 https://github.com/ollama/ollama/issues/1493","link":"/blog/tutorial-enhancing-commit-messages-with-commitollama-a-guide-for-vscode-and-local-llm-integration.zh-TW/"},{"title":"[tutorial] Enhancing Commit Messages with commitollama: A Guide for VSCode and Local LLM Integration","text":"📌 Introduction This article introduces commitollama, an alternative to GitHub Copilot designed for generating commit messages using local LLMs, ensuring privacy for confidential projects. It outlines the installation process for the commitollama extension in VSCode and necessary setup steps to start using it effectively. 🚀 Quick Start How to use Install the extension in VSCode. Install Ollama to integrate the LLM. Installing Ollama Run the following command to install Ollama: 1curl -fsSL https://ollama.com/install.sh | sh After installation, you can run Ollama using: 1ollama This will display a list of available commands: 12345678910111213141516171819202122Usage: ollama [flags] ollama [command]Available Commands: serve Start ollama create Create a model from a Modelfile show Show information for a model run Run a model pull Pull a model from a registry push Push a model to a registry list List models ps List running models cp Copy a model rm Remove a model help Help about any commandFlags: -h, --help help for ollama -v, --version Show version informationUse &quot;ollama [command] --help&quot; for more information about a command. Download the Phi3 model (3.8b) by running: 1ollama pull phi3:3.8b Start the Ollama service using: 1ollama serve If you encounter the error message Error: listen tcp 127.0.0.1:11434: bind: address already in use, you can find a solution here . To restart Ollama, stop the current service and relaunch it: 12systemctl stop ollama.serviceollama serve To prevent the model from being deleted after downloading, refer to this discussion here . Setting Up VSCode After installing the extension, use a custom model for commit message generation. Press the button in the interface to automatically generate the commit message. 🔁 Recap commitollama is a privacy-focused commit message generator alternative to GitHub Copilot. The tool leverages open-source LLMs like Llama, Mistral, and Phi3. Easy integration with VSCode through a simple extension installation process. Users can easily retrieve models, run services, and generate commit messages efficiently. 🔗 References https://github.com/ollama/ollama/issues/707 https://github.com/ollama/ollama/issues/1493","link":"/blog/tutorial_commitollama/"},{"title":"[tutorial] 使用 Ollama 與 OpenCommit 在本地生成提交訊息","text":"註記：此頁為由 AI（gpt-5-mini-2025-08-07）自動翻譯自英文原文，可能含有少量不準確之處。 📌 介紹 本文說明如何使用 Ollama 與 OpenCommit 在本地生成提交訊息。內容包含在 Docker 容器中執行 Ollama 的概覽、使用 Ollama CLI 的指示，以及如何將 Ollama 與 OpenCommit 結合以生成提交訊息。 🚀 快速開始 啟動容器 1docker run -d -v ollama:/root/.ollama -p 11434:11434 --name ollama-commit ollama/ollama:0.3.6 進入 Docker 容器 1docker exec -it ollama-commit bash 拉取模型 1ollama run gemma2:2b 開始聊天 1&gt;&gt;&gt; Send a message (/? for help) 離開聊天 輸入 /bye 以離開聊天。 安裝 opencommit 1npm install -g opencommit 使用本地 ollama 伺服器生成提交訊息 1OCO_AI_PROVIDER='ollama/gemma2:2b' opencommit 輸出： 1234567891011121314151617181920212223242526┌ open-commit│◇ 1 staged files: README.md│◇ 📝 Commit message generated│└ Generated commit message:——————————————————feat(README.md): add link to Ollama website and examples of running models——————————————————│◇ Confirm the commit message?│ No│◇ Do you want to regenerate the message ?│ Yes│◇ 📝 Commit message generated│└ Generated commit message:——————————————————feat(README.md): add link to Ollama website and examples of model usage in README.md 錯誤碼 127 123456789101112Error: llama runner process has terminated: exit status 127&gt;&gt;&gt; [GIN] 2024/08/28 - 18:43:24 | 200 | 68.455µs | 127.0.0.1 | HEAD &quot;/&quot;&gt;&gt;&gt; [GIN] 2024/08/28 - 18:43:24 | 200 | 7.845273ms | 127.0.0.1 | POST &quot;/api/show&quot;&gt;&gt;&gt; time=2024-08-28T18:43:24.392Z level=INFO source=memory.go:309 msg=&quot;offload to cpu&quot; layers.requested=-1 layers.model=33 layers.offload=0 layers.split=&quot;&quot; memory.available=&quot;[7.3 GiB]&quot; memory.required.full=&quot;5.5 GiB&quot; memory.required.partial=&quot;0 B&quot; memory.required.kv=&quot;1.0 GiB&quot; memory.required.allocations=&quot;[5.5 GiB]&quot; memory.weights.total=&quot;4.7 GiB&quot; memory.weights.repeating=&quot;4.6 GiB&quot; memory.weights.nonrepeating=&quot;105.0 MiB&quot; memory.graph.full=&quot;560.0 MiB&quot; memory.graph.partial=&quot;585.0 MiB&quot;&gt;&gt;&gt; time=2024-08-28T18:43:24.392Z level=INFO source=server.go:391 msg=&quot;starting llama server&quot; cmd=&quot;/tmp/ollama731275887/runners/cpu/ollama_llama_server --model /root/.ollama/models/blobs/sha256-ff82381e2bea77d91c1b824c7afb83f6fb73e9f7de9dda631bcdbca564aa5435 --ctx-size 8192 --batch-size 512 --embedding --log-disable --no-mmap --parallel 4 --port 33357&quot;&gt;&gt;&gt; time=2024-08-28T18:43:24.392Z level=INFO source=sched.go:450 msg=&quot;loaded runners&quot; count=1&gt;&gt;&gt; time=2024-08-28T18:43:24.393Z level=INFO source=server.go:591 msg=&quot;waiting for llama runner to start responding&quot;&gt;&gt;&gt; time=2024-08-28T18:43:24.393Z level=INFO source=server.go:625 msg=&quot;waiting for server to become available&quot; status=&quot;llm server error&quot;&gt;&gt;&gt; /tmp/ollama731275887/runners/cpu/ollama_llama_server: error while loading shared libraries: libllama.so: cannot open shared object file: No such file or directory&gt;&gt;&gt; time=2024-08-28T18:43:24.644Z level=ERROR source=sched.go:456 msg=&quot;error loading llama server&quot; error=&quot;llama runner process has terminated: exit status 127&quot;[GIN] 2024/08/28 - 18:43:24 | 500 | 266.021797ms | 127.0.0.1 | POST &quot;/api/chat&quot; 當 Docker 映像版本大於 0.3.6 時會發生此錯誤碼。因此，您需要拉取版本為 0.3.6 的 ollama 映像並執行該容器。請點擊 here 查看討論。 🔁 重點回顧 Ollama 允許使用 AI 模型生成提交訊息。 本文詳述在 Docker 環境中設置 Ollama 的步驟。 OpenCommit 被整合以簡化使用 AI 模型生成提交訊息的流程。 使用者可以透過聊天介面與 AI 模型互動。 🔗 參考資料 https://ollama.com/models https://github.com/ollama/ollama/issues/6541","link":"/blog/tutorial-using-ollama-with-opencommit-for-local-commit-message-generation.zh-TW/"},{"title":"[tutorial] Using Ollama with OpenCommit for Local Commit Message Generation","text":"📌 Introduction This article covers using Ollama with OpenCommit for generating commit messages locally. It includes an overview of running Ollama in a Docker container, instructions for using the Ollama CLI, and how to combine Ollama with OpenCommit for generating commit messages. 🚀 Quick Start Start a container 1docker run -d -v ollama:/root/.ollama -p 11434:11434 --name ollama-commit ollama/ollama:0.3.6 Enter the Docker container 1docker exec -it ollama-commit bash Pull model 1ollama run gemma2:2b Start a chat 1&gt;&gt;&gt; Send a message (/? for help) Exit the chat Type /bye to exit the chat. Install opencommit 1npm install -g opencommit Generate commit messages with local ollama server 1OCO_AI_PROVIDER='ollama/gemma2:2b' opencommit output: 1234567891011121314151617181920212223242526┌ open-commit│◇ 1 staged files: README.md│◇ 📝 Commit message generated│└ Generated commit message:——————————————————feat(README.md): add link to Ollama website and examples of running models——————————————————│◇ Confirm the commit message?│ No│◇ Do you want to regenerate the message ?│ Yes│◇ 📝 Commit message generated│└ Generated commit message:——————————————————feat(README.md): add link to Ollama website and examples of model usage in README.md Error code 127 123456789101112Error: llama runner process has terminated: exit status 127&gt;&gt;&gt; [GIN] 2024/08/28 - 18:43:24 | 200 | 68.455µs | 127.0.0.1 | HEAD &quot;/&quot;&gt;&gt;&gt; [GIN] 2024/08/28 - 18:43:24 | 200 | 7.845273ms | 127.0.0.1 | POST &quot;/api/show&quot;&gt;&gt;&gt; time=2024-08-28T18:43:24.392Z level=INFO source=memory.go:309 msg=&quot;offload to cpu&quot; layers.requested=-1 layers.model=33 layers.offload=0 layers.split=&quot;&quot; memory.available=&quot;[7.3 GiB]&quot; memory.required.full=&quot;5.5 GiB&quot; memory.required.partial=&quot;0 B&quot; memory.required.kv=&quot;1.0 GiB&quot; memory.required.allocations=&quot;[5.5 GiB]&quot; memory.weights.total=&quot;4.7 GiB&quot; memory.weights.repeating=&quot;4.6 GiB&quot; memory.weights.nonrepeating=&quot;105.0 MiB&quot; memory.graph.full=&quot;560.0 MiB&quot; memory.graph.partial=&quot;585.0 MiB&quot;&gt;&gt;&gt; time=2024-08-28T18:43:24.392Z level=INFO source=server.go:391 msg=&quot;starting llama server&quot; cmd=&quot;/tmp/ollama731275887/runners/cpu/ollama_llama_server --model /root/.ollama/models/blobs/sha256-ff82381e2bea77d91c1b824c7afb83f6fb73e9f7de9dda631bcdbca564aa5435 --ctx-size 8192 --batch-size 512 --embedding --log-disable --no-mmap --parallel 4 --port 33357&quot;&gt;&gt;&gt; time=2024-08-28T18:43:24.392Z level=INFO source=sched.go:450 msg=&quot;loaded runners&quot; count=1&gt;&gt;&gt; time=2024-08-28T18:43:24.393Z level=INFO source=server.go:591 msg=&quot;waiting for llama runner to start responding&quot;&gt;&gt;&gt; time=2024-08-28T18:43:24.393Z level=INFO source=server.go:625 msg=&quot;waiting for server to become available&quot; status=&quot;llm server error&quot;&gt;&gt;&gt; /tmp/ollama731275887/runners/cpu/ollama_llama_server: error while loading shared libraries: libllama.so: cannot open shared object file: No such file or directory&gt;&gt;&gt; time=2024-08-28T18:43:24.644Z level=ERROR source=sched.go:456 msg=&quot;error loading llama server&quot; error=&quot;llama runner process has terminated: exit status 127&quot;[GIN] 2024/08/28 - 18:43:24 | 500 | 266.021797ms | 127.0.0.1 | POST &quot;/api/chat&quot; The error code occurs when the Docker image version is greater than 0.3.6. Therefore, you need to pull the ollama image with version 0.3.6 and run the container. Click here to view the discussion. 🔁 Recap Ollama allows for the generation of commit messages using AI models. The article details setting up Ollama in a Docker environment. OpenCommit is integrated to simplify the process of generating commit messages using an AI model. Users can interact with the AI model through a chat interface. 🔗 References https://ollama.com/models https://github.com/ollama/ollama/issues/6541","link":"/blog/tutorial_ollama_opencommit/"},{"title":"[note] 安裝 Golang（PATH）","text":"註記：此頁為由 AI（gpt-5-mini-2025-08-07）自動翻譯自英文原文，可能含有少量不準確之處。 📌 介紹 本文提供在 macOS 上安裝 Go 並將系統的 PATH 環境變數包含 Go 執行檔的逐步指南。 🚀 快速開始 使用 Homebrew 安裝 Go： 1brew install go 驗證安裝： 1ls ~/go/bin/ 暫時更新 PATH： 1export PATH=$PATH:~/go/bin 永久更新 PATH： 12echo 'export PATH=$PATH:~/go/bin' &gt;&gt; ~/.zshrcsource ~/.zshrc 🔁 重點回顧 本指南說明如何在 macOS 上安裝 Go 程式語言。 包含驗證安裝的步驟。 提供暫時與永久更新 PATH 環境變數的指示。","link":"/blog/note-installation-of-golang-path.zh-TW/"},{"title":"[note] Installation of Golang (PATH)","text":"📌 Introduction This article provides a step-by-step guide on how to install Go on macOS and configure the system’s PATH variable to include Go binaries. 🚀 Quick Start Install Go using Homebrew: 1brew install go Verify the Installation: 1ls ~/go/bin/ Update PATH Temporarily: 1export PATH=$PATH:~/go/bin Update PATH Permanently: 12echo 'export PATH=$PATH:~/go/bin' &gt;&gt; ~/.zshrcsource ~/.zshrc 🔁 Recap The guide covers how to install Go programming language on macOS. It includes verification steps to check the installation. Instructions are provided for temporarily and permanently updating the PATH environment variable.","link":"/blog/note_go/"},{"title":"[教學] 如何使用 psutil 在 Python 中監控 CPU 與記憶體使用率","text":"註記：此頁為由 AI（gpt-5-mini-2025-08-07）自動翻譯自英文原文，可能含有少量不準確之處。 📌 介紹 這篇文章介紹 psutil，一個開源的 Python 套件，可提供有關 CPU、記憶體、磁碟與網路的系統資訊。內容涵蓋 psutil 的安裝，並示範用於監控 CPU 與記憶體使用率的實用函式，以及如何使用裝飾器將其整合到 Python 程式碼中。 🚀 快速開始 1pip install psutil psutil 中的實用函式 CPU 1234psutil.cpu_count() # 取得 CPU 數量psutil.cpu_percent() # 取得所有 CPU 的使用率psutil.cpu_percent(percpu=True) # 取得每顆 CPU 的使用率psutil.cpu_percent(interval=1) # 在 1 秒內取得所有 CPU 的使用率，使用 interval 可得到較穩定的結果 記憶體 1234567info = psutil.virtual_memory()# 總記憶體info.total / 1024 / 1024 / 1024 # bytes -&gt; GB# 記憶體使用率info.percent MacOS 1# svmem(total=25769803776, available=7726628864, percent=70.0, used=9045114880, free=791134208, active=6949453824, inactive=6915768320, wired=2095661056) Ubuntu 12# 會取得更多資訊，例如 buffers、cached 等等..# svmem(total=33541988352, available=25899790336, percent=22.8, used=7087771648, free=2703233024, active=15287881728, inactive=14264188928, buffers=965103616, cached=22785880064, shared=8265728, slab=904495104) 如何將 psutil 整合到我們的程式？ 我們可以使用裝飾器來監控每個函式的 CPU 與記憶體使用情況。 1234567891011121314151617import psutildef monitor(func): def wrapper(*args, **kwargs): process = psutil.Process() cur_func_pid = process.pid process = psutil.Process(cur_func_pid) func(*args, **kwargs) cpu_usage = process.cpu_percent(interval=0.01) memory_usage = process.memory_info().rss / 1024 / 1024 / 1024 # bytes -&gt; GB print(f&quot;CPU usage: {cpu_usage}%&quot;) print(f&quot;Memory usage: {memory_usage}GB&quot;) return wrapper 範例 12345678@monitordef example_code(): import numpy as np for i in range(100): np.random.rand(100, 100, 100)example_code() 🔁 小結 psutil 是一個用於系統監控的開源 Python 套件。 它提供取得 CPU 與記憶體使用資訊的實用函式。 你可以使用裝飾器輕鬆地監控 Python 函式的 CPU 與記憶體使用情況。 🔗 參考資料 Python常用库之psutil使用指南 简单介绍psutil库（virtual_memory()、cpu_percent() 使用 psutil 模組進行 Python 系統監控與分析 Python 的 Psutil 模組 Oracle Machine Learning for Python 的管理工作","link":"/blog/tutorial-how-to-use-psutil-to-monitor-cpu-and-memory-usage-in-python.zh-TW/"},{"title":"[tutorial] How to use psutil to monitor CPU and memory usage in python","text":"📌 Introduction This article introduces psutil, an open-source Python package that provides system information about CPU, memory, disks, and networks. It covers the installation of psutil and demonstrates useful functions for monitoring CPU and memory usage, as well as how to integrate it into Python code using decorators. 🚀 Quick Start 1pip install psutil Useful functions in psutil CPU 1234psutil.cpu_count() # get the number of CPUpsutil.cpu_percent() # get the usage of all CPUpsutil.cpu_percent(percpu=True) # get the usage of per CPUpsutil.cpu_percent(interval=1) # get the usage of all CPU in 1 second, using interval will get more robust result Memory 1234567info = psutil.virtual_memory()# total memoryinfo.total / 1024 / 1024 / 1024 # bytes -&gt; GB# the usage of memoryinfo.percent MacOS 1# svmem(total=25769803776, available=7726628864, percent=70.0, used=9045114880, free=791134208, active=6949453824, inactive=6915768320, wired=2095661056) Ubuntu 12# will get more information like buffers, cached etc..# svmem(total=33541988352, available=25899790336, percent=22.8, used=7087771648, free=2703233024, active=15287881728, inactive=14264188928, buffers=965103616, cached=22785880064, shared=8265728, slab=904495104) How to integrate psutil into our code? We can use psutil to monitor each function cpu and memory usage by using decorator. 1234567891011121314151617import psutildef monitor(func): def wrapper(*args, **kwargs): process = psutil.Process() cur_func_pid = process.pid process = psutil.Process(cur_func_pid) func(*args, **kwargs) cpu_usage = process.cpu_percent(interval=0.01) memory_usage = process.memory_info().rss / 1024 / 1024 / 1024 # bytes -&gt; GB print(f&quot;CPU usage: {cpu_usage}%&quot;) print(f&quot;Memory usage: {memory_usage}GB&quot;) return wrapper Example 12345678@monitordef example_code(): import numpy as np for i in range(100): np.random.rand(100, 100, 100)example_code() 🔁 Recap psutil is an open-source Python package for system monitoring. It provides useful functions to get CPU and memory usage information. You can use decorators to monitor CPU and memory usage of Python functions easily. 🔗 References Python常用库之psutil使用指南 简单介绍psutil库（virtual_memory()、cpu_percent() Python System Monitoring and Profiling with the psutil Module Psutil module in Python Administrative Tasks for Oracle Machine Learning for Python","link":"/blog/tutorial_psutil/"},{"title":"[tutorial] 建立你自己的 Python 套件","text":"註記：此頁為由 AI（gpt-5-mini-2025-08-07）自動翻譯自英文原文，可能含有少量不準確之處。 📌 介紹 建立自己的 Python 套件有助於維護大型專案，因為它可以管理那些散落在各個目錄中的程式碼。 🚀 快速開始 建立一個 setup.py 檔案： 123from setuptools import setup, find_packagessetup(name=&quot;ntust_simslab&quot;, version=&quot;0.13&quot;, packages=find_packages()) 建立一個 pyproject.toml 檔案： 123456789101112131415[tool.poetry]name = &quot;ntust_simslab&quot;version = &quot;0.13&quot;description = &quot;A simple example for building a Python package.&quot;authors = [&quot;Hsiang-Jen Li &lt;hsiangjenli@gmail.com&gt;&quot;]readme = &quot;README.md&quot;packages = [{include = &quot;ntust_simslab&quot;}][tool.poetry.dependencies]python = &quot;^3.8&quot;requests = &quot;^2.28.2&quot;[build-system]requires = [&quot;poetry-core&quot;]build-backend = &quot;poetry.core.masonry.api&quot; 在 https://pypi.org/ 註冊一個 PyPI 帳號以發佈你的套件。 🔁 重點回顧 建立 Python 套件有助於在大型專案中維持程式碼的組織。 使用 setup.py 是傳統方法，而 pyproject.toml 則是使用 Poetry 的現代作法。 在 PyPI 擁有帳號是發佈套件的必要條件。 🔗 參考 https://github.com/NTUST-SiMS-Lab/tutorial-simple-pypkg https://pypi.org/","link":"/blog/tutorial-build-your-own-python-package.zh-TW/"},{"title":"[tutorial] Build your own python package","text":"📌 Introduction Building your own Python package is beneficial for maintaining large projects, as it helps manage code that is otherwise scattered across directories. 🚀 Quick Start Create a setup.py file: 123from setuptools import setup, find_packagessetup(name=&quot;ntust_simslab&quot;, version=&quot;0.13&quot;, packages=find_packages()) Create a pyproject.toml file: 123456789101112131415[tool.poetry]name = &quot;ntust_simslab&quot;version = &quot;0.13&quot;description = &quot;A simple example for building a Python package.&quot;authors = [&quot;Hsiang-Jen Li &lt;hsiangjenli@gmail.com&gt;&quot;]readme = &quot;README.md&quot;packages = [{include = &quot;ntust_simslab&quot;}][tool.poetry.dependencies]python = &quot;^3.8&quot;requests = &quot;^2.28.2&quot;[build-system]requires = [&quot;poetry-core&quot;]build-backend = &quot;poetry.core.masonry.api&quot; Sign up for a PyPI account at https://pypi.org/ to publish your package. 🔁 Recap Building a Python package helps maintain code organization in larger projects. Using setup.py is the traditional method, while pyproject.toml is the modern approach with Poetry. It’s essential to have an account on PyPI to publish your package. 🔗 References https://github.com/NTUST-SiMS-Lab/tutorial-simple-pypkg https://pypi.org/","link":"/blog/tutorial_pypi_pkg/"},{"title":"[note] 在 Mac 上使用 Multipass 執行 Ubuntu 虛擬機","text":"註記：此頁為由 AI（gpt-5-mini-2025-08-07）自動翻譯自英文原文，可能含有少量不準確之處。 📌 介紹 Multipass 是 Canonical 提供的一個簡單工具，用於方便地執行 Ubuntu 虛擬機。 🚀 快速開始 1brew install qemu 123multipass launch 20.04 -c 8 -m 8G -d 100Gmultipass listmultipass shell your_vname 12sudo apt updatesudo apt install neofetch 1neofetch 下載桌面 1sudo apt install ubuntu-desktop xrdp 🔁 重點回顧 學會如何在 macOS 上使用 Multipass 快速啟動與管理 Ubuntu 虛擬機 了解如何分配資源並透過 shell 存取虛擬機 🔗 參考資料 canonical/multipass Multipass — 如 Docker 般的虛擬機 如何在 M1 或 M2 Mac 上使用 MULTI PASS 安裝並執行帶 GUI 的 Ubuntu 久違的在 Mac M2 上使用 Ubuntu","link":"/blog/note-run-ubuntu-vms-on-your-mac-using-multipass.zh-TW/"},{"title":"[note] Run Ubuntu VMs on Your Mac Using Multipass","text":"📌 Introduction Multipass is a simple tool by Canonical for running Ubuntu VMs easily. 🚀 Quick Start 1brew install qemu 123multipass launch 20.04 -c 8 -m 8G -d 100Gmultipass listmultipass shell your_vname 12sudo apt updatesudo apt install neofetch 1neofetch Download Desktop 1sudo apt install ubuntu-desktop xrdp 🔁 Recap Learned how to quickly launch and manage Ubuntu VMs using Multipass on macOS Understood how to allocate resources and access the VM via shell 🔗 References canonical/multipass Multipass — 如 Docker 般的虛擬機 How To Install &amp; RUN Ubuntu W/ GUI On M1 or M2 Mac Using MULTI PASS 久違的在 Mac M2 上使用 Ubuntu","link":"/blog/note_multipass_ubuntu/"},{"title":"[note] 安裝 GitHub Copilot CLI 與使用指南","text":"註記：此頁為由 AI（gpt-5-mini-2025-08-07）自動翻譯自英文原文，可能含有少量不準確之處。 📌 Introduction 本文說明如何安裝與使用 GitHub Copilot CLI。內容包括使用 npm 的安裝流程、在 Windows 上設定執行原則，並示範如何使用 CLI 取得某些 git 指令的說明。 🚀 Quick Start Install GitHub Copilot CLI:1npm install -g @githubnext/github-copilot-cli Set execution policy for PowerShell:1Set-ExecutionPolicy RemoteSigned -Scope CurrentUser Authenticate with GitHub Copilot CLI:1github-copilot-cli auth Test the CLI:1github-copilot-cli what-the-shell how to delete branch Output: ──────────────────── Command ──────────────────── git branch -d ────────────────── Explanation ────────────────── ○ git branch 用來列出分支。 ◆ -d 會刪除分支 。 ✅ 執行此指令 📝 修改查詢 ❌ 取消 🔁 Recap 可透過 npm 輕鬆安裝 GitHub Copilot CLI。 Windows 使用者需設定執行原則以允許執行腳本。 該 CLI 可協助 git 指令，並輸出指令與其說明。","link":"/blog/note-installing-github-copilot-cli-and-usage-guide.zh-TW/"},{"title":"[note] Installing GitHub Copilot CLI and Usage Guide","text":"📌 Introduction This article discusses how to install and use the GitHub Copilot CLI. It covers the installation process using npm, setting execution policies on Windows, and gives an example of how to use the CLI to get help on certain git commands. 🚀 Quick Start Install GitHub Copilot CLI:1npm install -g @githubnext/github-copilot-cli Set execution policy for PowerShell:1Set-ExecutionPolicy RemoteSigned -Scope CurrentUser Authenticate with GitHub Copilot CLI:1github-copilot-cli auth Test the CLI:1github-copilot-cli what-the-shell how to delete branch Output: ──────────────────── Command ──────────────────── git branch -d ────────────────── Explanation ────────────────── ○ git branch is used to list branches. ◆ -d deletes the branch . ✅ Run this command 📝 Revise query ❌ Cancel 🔁 Recap GitHub Copilot CLI can be installed easily via npm. Windows users need to set the execution policy to allow running scripts. The CLI provides assistance with git commands and outputs the command along with an explanation.","link":"/blog/note_installation_of_github_cli/"},{"title":"[note] 使用 Markmap 高效製作心智圖：基於 Markdown 的 VS Code 擴充套件","text":"註記：此頁為由 AI（gpt-5-mini-2025-08-07）自動翻譯自英文原文，可能含有少量不準確之處。 📌 介紹 本文說明如何使用 Visual Studio Code 的 Markmap 擴充套件，將 Markdown 語法轉換為心智圖，便利地組織與視覺化想法與資訊。 🚀 快速開始 在 VS Code 安裝此擴充套件 123456789101112131415161718192021# **我的教育**## 職業高中### KFHS### 應用外語科## 學士### NKUST### 貨幣與銀行學系## 碩士### NTUST### 工業管理系#### 資料科學#### 區塊鏈導論及其應用#### 工業物聯網與營運技術安全#### 人工智慧技術與商業應用#### 機器學習#### 企業永續管理#### 生產管理 預覽 🔁 重點回顧 使用 Markmap 擴充套件將 Markdown 文件視覺化為互動式心智圖。 安裝簡單，能讓你建立內容的結構化呈現。 預覽功能提供視覺化呈現，有助於理解。","link":"/blog/note-efficient-mind-mapping-with-markmap-a-markdown-based-vscode-extension.zh-TW/"},{"title":"[note] Efficient Mind Mapping with Markmap: A Markdown-Based VScode Extension","text":"📌 Introduction This article describes how to use the Markmap extension for Visual Studio Code to convert Markdown syntax into a mind map, facilitating effective organization and visualization of thoughts and information. 🚀 Quick Start Install this extension on VS Code 123456789101112131415161718192021# **My Education**## Vocational high school### KFHS### Applied Foreign Languages## Bachelor### NKUST### Department of Money and Banking## Master### NTUST### Department of Industrial Management#### Data Science#### Introduction to Blockchain and Its Applications#### Industrial Internet of Things and Operational Technology Security#### Artificial Intelligence Technologies and Business Applications#### Machine Learning#### Sustainable Management for the Enterprises#### Production Management Preview 🔁 Recap Use the Markmap extension to visualize Markdown documents as interactive mind maps. Installation is simple and allows you to create a structured representation of your content. The preview feature provides a visual representation to enhance understanding.","link":"/blog/note_markmap/"},{"title":"[教學] 在 Ubuntu 上設定 Miniconda","text":"註記：此頁為由 AI（gpt-5-mini-2025-08-07）自動翻譯自英文原文，可能含有少量不準確之處。 📌 介紹 本文詳細說明在 Ubuntu 上安裝 Miniconda 所需的步驟，包含下載安裝程式並建立初始環境。 🚀 快速開始 1sudo wget -c https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh 1sudo chmod +x Miniconda3-latest-Linux-x86_64.sh 1./Miniconda3-latest-Linux-x86_64.sh 12conda activateconda env list 🔁 回顧 Miniconda 是 conda 的精簡安裝程式，適合用來管理 Python 的環境與套件。 安裝過程包括下載安裝程式、將其設為可執行，並執行以設定 Miniconda。 安裝完成後，你可以使用 conda 指令輕鬆建立與管理 Python 環境。 🔗 參考資料 https://medium.com/featurepreneur/setting-up-miniconda-on-ubuntu-4bf6bece6f9b","link":"/blog/tutorial-setting-up-miniconda-on-ubuntu.zh-TW/"},{"title":"[tutorial] Setting up Miniconda on Ubuntu","text":"📌 Introduction This article details the steps required to install Miniconda on Ubuntu, including downloading the installer and setting up the initial environment. 🚀 Quick Start 1sudo wget -c https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh 1sudo chmod +x Miniconda3-latest-Linux-x86_64.sh 1./Miniconda3-latest-Linux-x86_64.sh 12conda activateconda env list 🔁 Recap Miniconda is a minimal installer for conda, useful for managing environments and packages in Python. The installation process includes downloading the installer, making it executable, and running it to set up Miniconda. After installation, you can easily create and manage Python environments using conda commands. 🔗 References https://medium.com/featurepreneur/setting-up-miniconda-on-ubuntu-4bf6bece6f9b","link":"/blog/tutorial_ubuntu_miniconda/"},{"title":"[備註] Gatsby 用法","text":"註記：此頁為由 AI（gpt-5-mini-2025-08-07）自動翻譯自英文原文，可能含有少量不準確之處。 📌 介紹 本文提供如何安裝 Gatsby 並使用啟始佈景主題（starter themes）建立新的 Gatsby 網站的指南。內容涵蓋安裝步驟、建立 Gatsby 網站的指令，以及用於排解常見錯誤的相關連結。 🚀 快速開始 安裝 Gatsby 12npm install -g gatsby-cligatsby --version gatsby-starter-blog 123gatsby new hjl https://github.com/gatsbyjs/gatsby-starter-blogcd hjlgatsby develop gatsby-starter-julia 12gatsby new RN https://github.com/niklasmtj/gatsby-starter-juliacd rn 使用舊版 peer 依賴 1--legacy-peer-deps 🔁 重點回顧 使用 npm 安裝 Gatsby CLI 非常簡單，指令為 npm install -g gatsby-cli。 安裝完成後，可檢查已安裝的 Gatsby 版本。 要建立新的 Gatsby 網站，可使用多個 starter 主題，例如 gatsby-starter-blog 與 gatsby-starter-julia。 與 npm 與 Gatsby 相關的常見錯誤已透過本文提供的各個連結詳盡記錄。 🔗 參考資料 指令（Gatsby CLI） npm WARN old lockfile The package-lock.json file was created with an old version of npm 錯誤：Command failed with exit code 1: npm install #27548 npm-upgrade","link":"/blog/note-gatsby-usage.zh-TW/"},{"title":"[note] Gatsby Usage","text":"📌 Introduction This article provides a guide on how to install Gatsby and create a new Gatsby site using starter themes. It covers the installation steps, commands to set up a Gatsby site, and links to troubleshoot common errors. 🚀 Quick Start Install Gatsby 12npm install -g gatsby-cligatsby --version gatsby-starter-blog 123gatsby new hjl https://github.com/gatsbyjs/gatsby-starter-blogcd hjlgatsby develop gatsby-starter-julia 12gatsby new RN https://github.com/niklasmtj/gatsby-starter-juliacd rn Use Legacy Peer Dependencies 1--legacy-peer-deps 🔁 Recap Installation of Gatsby CLI using npm is straightforward with the command npm install -g gatsby-cli. After installation, you can check the version of Gatsby installed. To create a new Gatsby site, several starter themes can be used, such as gatsby-starter-blog and gatsby-starter-julia. Common errors related to npm and Gatsby are well documented through various links provided in the article. 🔗 References Commands (Gatsby CLI) npm WARN old lockfile The package-lock.json file was created with an old version of npm Error: Command failed with exit code 1: npm install #27548 npm-upgrade","link":"/blog/note_gatsby/"}],"tags":[{"name":"aws","slug":"aws","link":"/blog/tags/aws/"},{"name":"llm","slug":"llm","link":"/blog/tags/llm/"},{"name":"docker","slug":"docker","link":"/blog/tags/docker/"},{"name":"vs-code","slug":"vs-code","link":"/blog/tags/vs-code/"},{"name":"note","slug":"note","link":"/blog/tags/note/"},{"name":"devops","slug":"devops","link":"/blog/tags/devops/"},{"name":"sa","slug":"sa","link":"/blog/tags/sa/"},{"name":"ea","slug":"ea","link":"/blog/tags/ea/"},{"name":"python","slug":"python","link":"/blog/tags/python/"},{"name":"linux","slug":"linux","link":"/blog/tags/linux/"},{"name":"higgs-audio","slug":"higgs-audio","link":"/blog/tags/higgs-audio/"},{"name":"audiollm","slug":"audiollm","link":"/blog/tags/audiollm/"},{"name":"static-site","slug":"static-site","link":"/blog/tags/static-site/"},{"name":"gatsby","slug":"gatsby","link":"/blog/tags/gatsby/"},{"name":"go","slug":"go","link":"/blog/tags/go/"},{"name":"ngrok","slug":"ngrok","link":"/blog/tags/ngrok/"},{"name":"markdown","slug":"markdown","link":"/blog/tags/markdown/"},{"name":"snap","slug":"snap","link":"/blog/tags/snap/"},{"name":"permission denied","slug":"permission-denied","link":"/blog/tags/permission-denied/"},{"name":"git","slug":"git","link":"/blog/tags/git/"},{"name":"pip","slug":"pip","link":"/blog/tags/pip/"},{"name":"ubuntu","slug":"ubuntu","link":"/blog/tags/ubuntu/"},{"name":"windows","slug":"windows","link":"/blog/tags/windows/"},{"name":"intel rst","slug":"intel-rst","link":"/blog/tags/intel-rst/"},{"name":"mlsecops","slug":"mlsecops","link":"/blog/tags/mlsecops/"},{"name":"lambda","slug":"lambda","link":"/blog/tags/lambda/"},{"name":"vlm","slug":"vlm","link":"/blog/tags/vlm/"},{"name":"ollama","slug":"ollama","link":"/blog/tags/ollama/"},{"name":"picgo","slug":"picgo","link":"/blog/tags/picgo/"},{"name":"mailgun","slug":"mailgun","link":"/blog/tags/mailgun/"}],"categories":[],"pages":[{"title":"","text":"@import url('https://fonts.googleapis.com/css2?family=Lato:ital,wght@0,100;0,300;0,400;0,700;0,900;1,100;1,300;1,400;1,700;1,900&display=swap'); @font-face { font-family: 'jf-openhuninn'; src: url('https://hsiangjenli.github.io/static/font/jf-openhuninn/jf-openhuninn.ttf'); } :root { --global-text-color: #4e4e4e; } body { font-family: \"Lato\", 'jf-openhuninn', \"Verdana\" !important; < HEAD ======= } .section { background-color: #e1e1e1 !important; >>>>>>> ab6907511f947861e6203c41a9f40d03cc1697aa } strong { color: var(--global-text-color) !important; font-weight: 700 !important; } em { color: var(--global-text-color) !important; } .title { font-weight: bolder !important; color: var(--global-text-color) !important; } .content h1, .content h2, .content h3, .content h4, .content h5, .content h6 { color: var(--global-text-color) !important; font-weight: bolder !important; } .content h1, .card-content h2 { padding-bottom: .75rem !important; border-bottom: 1px solid #e4e4e7 !important; } .card-content .article { color: var(--global-text-color) !important; } .navbar-item { color: var(--global-text-color) !important; font-weight: 700 !important; } .highlight-body { background-color: #eaeaea !important; }","link":"/blog/css/custom.css"}]}