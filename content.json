{"posts":[{"title":"[注意] Docker Model Runner 安裝","text":"註記：此頁為由 AI（gpt-5-mini-2025-08-07）自動翻譯自英文原文，可能含有少量不準確之處。 📌 介紹 在 Ubuntu 24.04 安裝 Docker Model Plugin 時，我遇到 apt 無法找到該套件的問題。結果發現 Docker 的套件庫指向了錯誤的發行版本（指向 focal，而不是 noble）。 ⭐ 注意 本篇文章最初在我遇到的實際問題基礎上，並在 ChatGPT 協助下草擬。我已驗證解決方法並修訂內容，以確保對面臨類似問題的其他人而言準確且清晰。 🚀 快速開始 12345678910111213141516171819sudo apt-get updatesudo apt-get install docker-model-plugin -yHit:1 http://tw.archive.ubuntu.com/ubuntu noble InRelease Hit:2 http://tw.archive.ubuntu.com/ubuntu noble-updates InRelease Hit:3 http://tw.archive.ubuntu.com/ubuntu noble-backports InRelease Hit:4 https://packages.microsoft.com/repos/edge stable InRelease Hit:5 https://brave-browser-apt-release.s3.brave.com stable InRelease Hit:6 https://packages.microsoft.com/repos/code stable InRelease Hit:7 http://security.ubuntu.com/ubuntu noble-security InRelease Get:8 https://download.docker.com/linux/ubuntu focal InRelease [57.7 kB] Hit:9 https://ppa.launchpadcontent.net/mozillateam/ppa/ubuntu jammy InRelease Fetched 57.7 kB in 7s (8650 B/s)Reading package lists... DoneN: Skipping acquire of configured file 'main/binary-i386/Packages' as repository 'https://brave-browser-apt-release.s3.brave.com stable InRelease' doesn't support architecture 'i386'Reading package lists... DoneBuilding dependency tree... DoneReading state information... DoneE: Unable to locate package docker-model-plugin 當我依照 How to Run Docker Model Runner on Ubuntu 24.04 的教學操作時，發現 apt install 找不到 docker-model-plugin。解決方法是 12345678910111213sudo apt-get updatesudo apt-get install \\ ca-certificates curl gnupg lsb-releasesudo mkdir -p /etc/apt/keyringssudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg \\ | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpgecho \\ &quot;deb [arch=$(dpkg --print-architecture) \\ signed-by=/etc/apt/keyrings/docker.gpg] \\ https://download.docker.com/linux/ubuntu \\ $(lsb_release -cs) stable&quot; \\ | sudo tee /etc/apt/sources.list.d/docker.list &gt; /dev/nullsudo apt-get update 🔁 重點回顧 錯誤發生的原因是 Docker 的 APT 套件庫指向了錯誤的發行版本（focal，而非 noble） 修正此問題需要新增正確的 Docker GPG 金鑰並為 Ubuntu 24.04 設定正確的套件庫 在更新 APT 來源後，docker-model-plugin 套件即可被安裝 🔗 參考資料 如何在 Ubuntu 24.04 上運行 Docker Model Runner","link":"/blog/note-docker-model-runner-installation.zh-TW/"},{"title":"[Notice] Docker Model Runner Installation","text":"Note: This page is an AI-generated (gpt-5-mini-2025-08-07) translation from Traditional Chinese and may contain minor inaccuracies. Note: This page was automatically translated from the original English by AI (gpt-5-mini-2025-08-07) and may contain minor inaccuracies. 📌 Introduction On Ubuntu 24.04 while installing the Docker Model Plugin, I encountered an issue where apt could not find the package. It turned out the Docker repository was pointing to the wrong release (pointing to focal instead of noble). ⭐ Note This article was initially drafted based on the real issue I encountered, with assistance from ChatGPT. I have verified the fix and revised the content to ensure it is accurate and clear for others facing a similar problem. 🚀 Quick Start 12345678910111213141516171819sudo apt-get updatesudo apt-get install docker-model-plugin -yHit:1 http://tw.archive.ubuntu.com/ubuntu noble InRelease Hit:2 http://tw.archive.ubuntu.com/ubuntu noble-updates InRelease Hit:3 http://tw.archive.ubuntu.com/ubuntu noble-backports InRelease Hit:4 https://packages.microsoft.com/repos/edge stable InRelease Hit:5 https://brave-browser-apt-release.s3.brave.com stable InRelease Hit:6 https://packages.microsoft.com/repos/code stable InRelease Hit:7 http://security.ubuntu.com/ubuntu noble-security InRelease Get:8 https://download.docker.com/linux/ubuntu focal InRelease [57.7 kB] Hit:9 https://ppa.launchpadcontent.net/mozillateam/ppa/ubuntu jammy InRelease Fetched 57.7 kB in 7s (8650 B/s)Reading package lists... DoneN: Skipping acquire of configured file 'main/binary-i386/Packages' as repository 'https://brave-browser-apt-release.s3.brave.com stable InRelease' doesn't support architecture 'i386'Reading package lists... DoneBuilding dependency tree... DoneReading state information... DoneE: Unable to locate package docker-model-plugin When I followed the tutorial How to Run Docker Model Runner on Ubuntu 24.04 I found that apt install could not find docker-model-plugin. The solution is 12345678910111213sudo apt-get updatesudo apt-get install \\ ca-certificates curl gnupg lsb-releasesudo mkdir -p /etc/apt/keyringssudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg \\ | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpgecho \\ &quot;deb [arch=$(dpkg --print-architecture) \\ signed-by=/etc/apt/keyrings/docker.gpg] \\ https://download.docker.com/linux/ubuntu \\ $(lsb_release -cs) stable&quot; \\ | sudo tee /etc/apt/sources.list.d/docker.list &gt; /dev/nullsudo apt-get update 🔁 Key Takeaways The cause was that Docker’s APT repository pointed to the wrong release (focal instead of noble) Fixing this requires adding the correct Docker GPG key and configuring the proper repository for Ubuntu 24.04 After updating the APT sources, the docker-model-plugin package can be installed 🔗 References How to Run Docker Model Runner on Ubuntu 24.04","link":"/blog/note_docker_model_runner/"},{"title":"[note] ngrok - 免費靜態網域","text":"註記：此頁為由 AI（gpt-5-mini-2025-08-07）自動翻譯自英文原文，可能含有少量不準確之處。 📌 介紹 ngrok 為使用者提供免費的靜態網域！ 🚀 快速開始 安裝 ngrok 1sudo snap install ngrok 建立網域 登入 ngrok 並建立你的個人網域（隨機） 設定 Token 1ngrok config add-authtoken $YOUR_AUTHTOKEN 建立隧道 1ngrok http --url=$URL $PORT 🔗 參考資料 適用於所有 ngrok 使用者的靜態網域","link":"/blog/note-ngrok-static-domain-for-free.zh-TW/"},{"title":"[note] ngrok - Free Static Domains","text":"Note: This page is an AI-generated (gpt-5-mini-2025-08-07) translation from Traditional Chinese and may contain minor inaccuracies. Note: This page was automatically translated from the original English by AI (gpt-5-mini-2025-08-07) and may contain minor inaccuracies. 📌 Introduction ngrok offers users free static domains! 🚀 Quick Start Install ngrok 1sudo snap install ngrok Create a domain Log in to ngrok and create your personal domain (random) Set up Token 1ngrok config add-authtoken $YOUR_AUTHTOKEN Create a tunnel 1ngrok http --url=$URL $PORT 🔗 References Free static domains for all ngrok users","link":"/blog/note_ngrok_free_static_domain/"},{"title":"[tutorial] Creating and Running Lambda Functions with AWS SAM","text":"Note: This page is an AI-generated (gpt-5-mini-2025-08-07) translation from Traditional Chinese and may contain minor inaccuracies. 📌 Introduction This guide introduces how to use AWS SAM to create and run Lambda functions, including basic installation, an explanation of project structure, and the workflow for running Lambda locally. 🚀 Quick Start AWS CLI 1brew install awscli AWS SAM (Serverless Application Model) CLI 1brew install aws-sam-cli Initialize a SAM project 1sam init Project structure overview 1234567891011121314151617181920.├── __init__.py├── events│ └── event.json├── hello_world│ ├── __init__.py│ ├── app.py│ └── requirements.txt├── README.md├── samconfig.toml├── template.yaml└── tests ├── __init__.py ├── integration │ ├── __init__.py │ └── test_api_gateway.py ├── requirements.txt └── unit ├── __init__.py └── test_handler.py events/ - Contains mock event payload JSON files used to test the Lambda function hello_world/ - Where the application lives; Lambda-related functions including the handler (e.g., app.py) and dependencies (e.g., requirements.txt) tests/ - Unit test folder samconfig.toml - Stores SAM CLI execution parameters (such as deployment region, stack name, S3 bucket, etc.) to simplify settings when running sam deploy template.yaml - Defines all Lambda functions; the main IaC file (which services are used and their dependencies). It is an extension of AWS CloudFormation syntax. template.yaml You can use the CloudFormation Linter tool cfn-lint to detect format and property errors in the file Header 1234AWSTemplateFormatVersion: '2010-09-09'Transform: AWS::Serverless-2016-10-31Description: &gt; TODO.... AWSTemplateFormatVersion - The AWS CloudFormation version Transform - Tells CloudFormation to use SAM to extend the template syntax Description - Project description Content Globals - Default settings provided to Resources Resources - The AWS resources to create. See AWS resource and property types reference and AWS SAM resources and properties Outputs - Expected outputs after deployment (the information you need to know) samconfig.toml See AWS SAM CLI configuration file, Configuring the AWS SAM CLI, AWS SAM CLI command reference The purpose is to simplify the complexity of using sam commands Original Optimized with samconfig sam build --cached --parallel --use-containers sam build sam local invoke --env-vars locals.json sam local invoke sam local start-api --env-vars locals.json --warm-containers EAGER sam local start-api Local Invoke 1sam local invoke 1234567891011No current session found, using default AWS::AccountId Invoking app.lambda_handler (python3.13) Local image is up-to-date Using local image: public.ecr.aws/lambda/python:3.13-rapid-x86_64. Mounting /Users/XXXXXX/Documents/TEST/hello_world as /var/task:ro,delegated, inside runtime container START RequestId: f6a6ec50-58b2-432c-9381-ec45ca43b130 Version: $LATESTEND RequestId: e883464b-1216-43ae-b0fe-f7f803a73057REPORT RequestId: e883464b-1216-43ae-b0fe-f7f803a73057 Init Duration: 1.26 ms Duration: 381.91 ms Billed Duration: 382 ms Memory Size: 128 MB Max Memory Used: 128 MB{&quot;statusCode&quot;: 200, &quot;body&quot;: &quot;{\\&quot;message\\&quot;: \\&quot;hello world\\&quot;}&quot;} 🔁 Recap Installation commands Understand the AWS SAM project structure Know the purposes of the specific files template.yaml and samconfig.toml and their related official documentation Invoke a simple “Hello World” Lambda function locally 🔗 References Day02-環境準備(一)安裝AWS CLI、Docker、AWS SAM CLI","link":"/blog/tutorial-aws-sam-lambda.en/"},{"title":"[教學] 使用 AWS SAM 建立與執行 Lambda 函數","text":"註記：此頁為由 AI（gpt-5-mini-2025-08-07）自動翻譯自英文原文，可能含有少量不準確之處。 注意：此頁面為 AI 生成（gpt-5-mini-2025-08-07）的繁體中文翻譯，可能包含些微不準確之處。 📌 介紹 本指南介紹如何使用 AWS SAM 建立與執行 Lambda 函數，包含基本安裝、專案結構說明，以及在本機執行 Lambda 的流程。 🚀 快速開始 AWS CLI 1brew install awscli AWS SAM（Serverless Application Model）CLI 1brew install aws-sam-cli 初始化 SAM 專案 1sam init 專案結構總覽 1234567891011121314151617181920.├── __init__.py├── events│ └── event.json├── hello_world│ ├── __init__.py│ ├── app.py│ └── requirements.txt├── README.md├── samconfig.toml├── template.yaml└── tests ├── __init__.py ├── integration │ ├── __init__.py │ └── test_api_gateway.py ├── requirements.txt └── unit ├── __init__.py └── test_handler.py events/ - 包含用來測試 Lambda 函數的模擬事件有效載荷 JSON 檔案 hello_world/ - 應用程式所在；Lambda 相關函數（例如 handler，例如 app.py）與相依套件（例如 requirements.txt） tests/ - 單元測試資料夾 samconfig.toml - 儲存 SAM CLI 執行參數（例如部署區域、stack 名稱、S3 桶等），以便在執行 sam deploy 時簡化設定 template.yaml - 定義所有 Lambda 函數；主要的基礎設施即程式碼（IaC）檔案（哪些服務被使用以及它們的相依性）。它是 AWS CloudFormation 語法的擴充。 template.yaml 您可以使用 CloudFormation Linter 工具 cfn-lint 來偵測檔案中的格式與屬性錯誤 標頭 1234AWSTemplateFormatVersion: '2010-09-09'Transform: AWS::Serverless-2016-10-31Description: &gt; TODO.... AWSTemplateFormatVersion - AWS CloudFormation 的版本 Transform - 指示 CloudFormation 使用 SAM 擴充模板語法 Description - 專案描述 內容 Globals - 提供給資源的預設設定 Resources - 要建立的 AWS 資源。請參閱 AWS resource and property types reference 與 AWS SAM resources and properties Outputs - 部署後的預期輸出（您需要的資訊） samconfig.toml 參見 AWS SAM CLI configuration file、Configuring the AWS SAM CLI、AWS SAM CLI command reference 目的在於簡化使用 sam 指令時的複雜度 原本 使用 samconfig 後 sam build --cached --parallel --use-containers sam build sam local invoke --env-vars locals.json sam local invoke sam local start-api --env-vars locals.json --warm-containers EAGER sam local start-api 本機呼叫 1sam local invoke 1234567891011No current session found, using default AWS::AccountId Invoking app.lambda_handler (python3.13) Local image is up-to-date Using local image: public.ecr.aws/lambda/python:3.13-rapid-x86_64. Mounting /Users/XXXXXX/Documents/TEST/hello_world as /var/task:ro,delegated, inside runtime container START RequestId: f6a6ec50-58b2-432c-9381-ec45ca43b130 Version: $LATESTEND RequestId: e883464b-1216-43ae-b0fe-f7f803a73057REPORT RequestId: e883464b-1216-43ae-b0fe-f7f803a73057 Init Duration: 1.26 ms Duration: 381.91 ms Billed Duration: 382 ms Memory Size: 128 MB Max Memory Used: 128 MB{&quot;statusCode&quot;: 200, &quot;body&quot;: &quot;{\\&quot;message\\&quot;: \\&quot;hello world\\&quot;}&quot;} 🔁 重點回顧 安裝指令 了解 AWS SAM 專案結構 了解 template.yaml 與 samconfig.toml 這些檔案的用途及其相關官方文件 在本機呼叫一個簡單的「Hello World」Lambda 函數 🔗 參考資料 Day02-環境準備(一)安裝AWS CLI、Docker、AWS SAM CLI","link":"/blog/tutorial_chinese_aws_sam_install_and_lambda/"},{"title":"[教學] 掃描模型的玩具範例","text":"註記：此頁為由 AI（gpt-5-mini-2025-08-07）自動翻譯自英文原文，可能含有少量不準確之處。 📌 介紹 本文示範如何使用簡單範例與 modelscan 工具來偵測不安全的 PyTorch 模型。 🚀 快速開始 開始之前你需要安裝以下套件 1pip install numpy torch modelscan 準備安全模型 1234567891011121314151617from torch import nnimport torchclass SafeModel(nn.Module): def __init__(self): super(SafeModel, self).__init__() self.linear = nn.Linear(10, 1) def forward(self, x): return self.linear(x) if __name__ == &quot;__main__&quot;: model = SafeModel() # save the model torch.save(model.state_dict(), &quot;safe_model.pth&quot;) 準備惡意模型 這是一個惡意模型，當你載入它時會產生輸出。 123456789101112131415from torch import nnimport torchimport osclass MaliciousModel: def __reduce__(self): print(&quot;Reduce called!&quot;) # 應該會印出 return (os.system, (&quot;echo 'This is a malicious model!' &gt; malicious_output.txt&quot;,)) if __name__ == &quot;__main__&quot;: model = MaliciousModel() # save the model torch.save(model, &quot;malicious_model.pth&quot;) 載入模型 Torch 已有基本保護，因此我們需要暫時關閉 weights_only 選項。載入模型後，你會看到一個名為 malicious_output.txt 的檔案。這代表惡意行為已經在載入時發生。 1234567import torchsafe_model_path = &quot;safe_model.pth&quot;malicious_model_path = &quot;malicious_model.pth&quot;s_model = torch.load(safe_model_path)m_model = torch.load(malicious_model_path, weights_only=False) 使用 modelscan 掃描模型 安全模型 1modelscan -p safe_model.pth 123456789Scanning /Users/hsiangjenli/Documents/github/mlops-survey/safe_model.pth:safe_model/data.pkl using modelscan.scanners.PickleUnsafeOpScan model scan--- Summary --- No issues found! 🎉--- Skipped --- Total skipped: 7 - run with --show-skipped to see the full list. 惡意模型 1modelscan -p malicious_model.pth 12345678910111213141516171819202122232425Scanning /Users/hsiangjenli/Documents/github/mlops-survey/malicious_model.pth:malicious_model/data.pkl using modelscan.scanners.PickleUnsafeOpScan model scan--- Summary ---Total Issues: 1Total Issues By Severity: - LOW: 0 - MEDIUM: 0 - HIGH: 0 - CRITICAL: 1--- Issues by Severity ------ CRITICAL ---Unsafe operator found: - Severity: CRITICAL - Description: Use of unsafe operator 'system' from module 'posix' - Source: /Users/hsiangjenli/Documents/github/mlops-survey/malicious_model.pth:malicious_model/data.pkl--- Skipped --- Total skipped: 5 - run with --show-skipped to see the full list. 🔁 回顧 建立了一個安全模型和一個惡意模型（在載入時會產生輸出） 使用 modelscan 掃描兩個模型 🔗 參考資料 https://github.com/protectai/modelscan","link":"/blog/tutorial-a-toy-example-of-scanning-models.zh-TW/"},{"title":"[Tutorial] Toy Example for Scanning Models","text":"Note: This page is an AI-generated (gpt-5-mini-2025-08-07) translation from Traditional Chinese and may contain minor inaccuracies. Note: This page was automatically translated from the original English by AI (gpt-5-mini-2025-08-07) and may contain minor inaccuracies. 📌 Introduction This article demonstrates how to use a simple example and the modelscan tool to detect unsafe PyTorch models. 🚀 Quick Start Before getting started you need to install the following packages 1pip install numpy torch modelscan Prepare a safe model 1234567891011121314151617from torch import nnimport torchclass SafeModel(nn.Module): def __init__(self): super(SafeModel, self).__init__() self.linear = nn.Linear(10, 1) def forward(self, x): return self.linear(x) if __name__ == &quot;__main__&quot;: model = SafeModel() # save the model torch.save(model.state_dict(), &quot;safe_model.pth&quot;) Prepare a malicious model This is a malicious model that produces output when you load it. 123456789101112131415from torch import nnimport torchimport osclass MaliciousModel: def __reduce__(self): print(&quot;Reduce called!&quot;) # Should print return (os.system, (&quot;echo 'This is a malicious model!' &gt; malicious_output.txt&quot;,)) if __name__ == &quot;__main__&quot;: model = MaliciousModel() # save the model torch.save(model, &quot;malicious_model.pth&quot;) Loading models Torch has basic protections, so we need to temporarily disable the weights_only option. After loading the model, you’ll see a file named malicious_output.txt. This indicates the malicious action occurred during loading. 1234567import torchsafe_model_path = &quot;safe_model.pth&quot;malicious_model_path = &quot;malicious_model.pth&quot;s_model = torch.load(safe_model_path)m_model = torch.load(malicious_model_path, weights_only=False) Using modelscan to scan models Safe model 1modelscan -p safe_model.pth 123456789Scanning /Users/hsiangjenli/Documents/github/mlops-survey/safe_model.pth:safe_model/data.pkl using modelscan.scanners.PickleUnsafeOpScan model scan--- Summary --- No issues found! 🎉--- Skipped --- Total skipped: 7 - run with --show-skipped to see the full list. Malicious model 1modelscan -p malicious_model.pth 12345678910111213141516171819202122232425Scanning /Users/hsiangjenli/Documents/github/mlops-survey/malicious_model.pth:malicious_model/data.pkl using modelscan.scanners.PickleUnsafeOpScan model scan--- Summary ---Total Issues: 1Total Issues By Severity: - LOW: 0 - MEDIUM: 0 - HIGH: 0 - CRITICAL: 1--- Issues by Severity ------ CRITICAL ---Unsafe operator found: - Severity: CRITICAL - Description: Use of unsafe operator 'system' from module 'posix' - Source: /Users/hsiangjenli/Documents/github/mlops-survey/malicious_model.pth:malicious_model/data.pkl--- Skipped --- Total skipped: 5 - run with --show-skipped to see the full list. 🔁 Review Created a safe model and a malicious model (which produces output when loaded) Scanned both models with modelscan 🔗 References https://github.com/protectai/modelscan","link":"/blog/tutorial_modelscan_toy_example/"},{"title":"[反思] 與 Codex 的首次體驗","text":"註記：此頁為由 AI（gpt-5-mini-2025-08-07）自動翻譯自英文原文，可能含有少量不準確之處。 📌 簡介 簡而言之，Codex 的表現一點也不理想。 🚀 快速開始 背景 - 這個倉庫是我 30 天每日筆記的重構。目標是讓結構更清晰、有條理。 任務 1 – 此倉庫包含我的每日筆記。你的工作是閱讀所有筆記並協助重新整理它們。 任務 2 – 閱讀所有筆記並以相同結構重寫它們：Abstract、Content、Recap 及 Reference。同時檢查拼字錯誤並改善內容。 任務 1 結果 也許是我的錯。也許我的指示不夠清楚。Codex 建立了一個 README.md 檔案，裡面有像這樣的內容目錄（TOC）。看起來沒問題，但我希望它能閱讀所有筆記並協助重新整理，而不只是建立一個目錄。 任務 2 結果 我不知道為什麼，但 Codex 確實依照我的指示去重寫筆記……然而，它幾乎移除了所有內容，只保留了一個非常短的摘要（1–2 行）。重寫後內容的品質也很差。","link":"/blog/reflection-first-experience-with-codex.zh-TW/"},{"title":"[Reflection] First Experience with Codex","text":"Note: This page is an AI-generated (gpt-5-mini-2025-08-07) translation from Traditional Chinese and may contain minor inaccuracies. Note: This page was automatically translated from the original English by an AI (gpt-5-mini-2025-08-07) and may contain minor inaccuracies. 📌 Introduction In short, Codex’s performance was far from ideal. 🚀 Quick Start Background - This repository is a refactor of my 30 days of daily notes. The goal is to make the structure clearer and more organized. Task 1 – This repository contains my daily notes. Your job is to read all the notes and assist in reorganizing them. Task 2 – Read all the notes and rewrite them using the same structure: Abstract, Content, Recap, and Reference. Also check for spelling errors and improve the content. Task 1 Results Maybe it’s my fault. Maybe my instructions weren’t clear enough. Codex created a README.md file containing a table of contents (TOC) like this. It looked fine, but I wanted it to read all the notes and help reorganize them, not just create a TOC. Task 2 Results I don’t know why, but Codex did follow my instructions to rewrite the notes… however, it almost removed all of the content, leaving only a very short abstract (1–2 lines). The quality of the rewritten content was also poor.","link":"/blog/reflection_codex/"},{"title":"[note] OCI 工件？","text":"註記：此頁為由 AI（gpt-5-mini-2025-08-07）自動翻譯自英文原文，可能含有少量不準確之處。 📌 什麼是 OCI 工件？ 「OCI Artifact」的全名是「Open Container Initiative Artifact」。它是一種統一格式，可用來儲存任何東西 — 無論是 Docker 映像、Helm 圖表、WASM 模組、機器學習模型、SBOM、政策，或掃描報告。 最重要的是，任何遵循 OCI 格式的項目都可以上傳到或從註冊中心下載（例如 Harbor、DockerHub、Artifact Hub）。 🚀 OCI 工件結構 Tag – 可讀的人類名稱（例如 nginx:1.0），指向 manifest 或 index。Tag 是版本標籤。 Index – manifest 的清單，常用於多平台工件。 Manifest – 描述一個工件（例如 Docker 映像、Helm 圖表），並參考 blobs。 Blobs – 實際內容，例如 .tar.gz、二進位檔或用於工件的設定檔。 🔗 參考資料 OCI 映像佈局規範 ORAS - 了解 OCI 工件","link":"/blog/note-oci-artifact.zh-TW/"},{"title":"[note] OCI Artifact?","text":"Note: This page is an AI-generated (gpt-5-mini-2025-08-07) translation from Traditional Chinese and may contain minor inaccuracies. Note: This page was automatically translated from the original English by AI (gpt-5-mini-2025-08-07) and may contain minor inaccuracies. 📌 What is an OCI Artifact? “OCI Artifact” stands for “Open Container Initiative Artifact.” It is a unified format that can be used to store anything — whether Docker images, Helm charts, WASM modules, machine learning models, SBOMs, policies, or scan reports. Most importantly, any item that follows the OCI format can be uploaded to or downloaded from registries (for example Harbor, DockerHub, Artifact Hub). 🚀 OCI Artifact Structure Tag – A human-readable name (for example nginx:1.0) that points to a manifest or index. A tag is a version label. Index – A list of manifests, commonly used for multi-platform artifacts. Manifest – Describes an artifact (e.g., Docker image, Helm chart) and references blobs. Blobs – The actual content, such as .tar.gz, binaries, or configuration files used by the artifact. 🔗 References OCI Image Layout Specification ORAS - Learn about OCI artifacts","link":"/blog/note_oci_artifact/"},{"title":"[note] Mac: Don&#39;t install Docker Desktop, switch to Colima — FAQ","text":"Note: This page is an AI-generated (gpt-5-mini-2025-08-07) translation from Traditional Chinese and may contain minor inaccuracies. 📌 Introduction On Mac, you don’t have to install the official Docker Desktop to use Docker; you can use lighter alternatives like Colima. However, if you previously installed Docker Desktop and later installed the Docker CLI via Homebrew without fully cleaning old settings, you may encounter some errors. 🚀 Actions Error messages 12# Error 1docker: Cannot connect to the Docker daemon at unix:///Users/XXXXXXXX/.docker/run/docker.sock. Is the docker daemon running? 12# Error 2docker: error getting credentials - err: exec: &quot;docker-credential-desktop&quot;: executable file not found in $PATH, out: `` Cause Because Docker Desktop was initially used for installation, and then removed in favor of Colima, some original settings continued to be used, causing these errors. Solution Error 1 Installing with brew install docker installs the Docker CLI, not the Docker Engine. The Docker Engine must run on a Linux-based system, and macOS is not Linux, so an additional VM is required. Docker Desktop used to start a VM in the background, so you might not have noticed; after removing Docker Desktop, you need to provide a VM for Docker to run. Install colima 1brew install colima Start colima 1colima start Use Docker commands as usual Error 2 If Docker Desktop was installed initially, some settings may have been reused, causing this error. Edit config.json 1nano ~/.docker/config.json Remove this section 123{ &quot;credsStore&quot;: &quot;desktop&quot;} 🔁 Recap This note summarizes two common errors: Docker cannot connect to the daemon Missing docker-credential-desktop causing credential errors 🔗 References Day 07：Developing for Kubernetes with KinD - MacOS 使用 Colima 快速打造 Kubernetes 開發環境","link":"/blog/note-mac-docker-desktop-colima.en/"},{"title":"[note] Mac：不要安裝 Docker Desktop，改用 Colima — 常見問答","text":"註記：此頁為由 AI（gpt-5-mini-2025-08-07）自動翻譯自英文原文，可能含有少量不準確之處。 注意：本頁面為由 AI 生成的翻譯（gpt-5-mini-2025-08-07），自繁體中文翻譯而來，可能包含些許不準確之處。 📌 介紹 在 Mac 上，使用 Docker 並不必安裝官方的 Docker Desktop；可以使用像 Colima 這種更輕量的替代方案。不過，如果你先前安裝過 Docker Desktop，之後又透過 Homebrew 安裝 Docker CLI，卻沒有完全清除舊的設定，就可能會遇到一些錯誤。 🚀 操作 錯誤訊息 12# Error 1docker: Cannot connect to the Docker daemon at unix:///Users/XXXXXXXX/.docker/run/docker.sock. Is the docker daemon running? 12# Error 2docker: error getting credentials - err: exec: &quot;docker-credential-desktop&quot;: executable file not found in $PATH, out: `` 原因 因為最初使用 Docker Desktop 進行安裝，之後改用 Colima 並移除 Docker Desktop，導致部分原有的設定仍被使用，進而引發這些錯誤。 解決方法 Error 1 以 brew install docker 安裝的是 Docker CLI，而不是 Docker Engine。Docker Engine 必須在 Linux 系統上執行，而 macOS 並非 Linux，因此需要額外的 VM。Docker Desktop 會在背景啟動一個 VM，可能讓你沒有注意到；移除 Docker Desktop 後，就需要自行提供一個 VM 讓 Docker 運行。 安裝 colima 1brew install colima 啟動 colima 1colima start 照常使用 Docker 指令 Error 2 如果最初安裝過 Docker Desktop，有些設定可能被重複使用，導致出現此錯誤。 編輯 config.json 1nano ~/.docker/config.json 移除此段設定 123{ &quot;credsStore&quot;: &quot;desktop&quot;} 🔁 重點回顧 本篇摘要兩個常見錯誤： Docker 無法連接到 daemon 缺少 docker-credential-desktop，導致認證錯誤 🔗 參考資料 第 07 天：使用 KinD 為 Kubernetes 開發 - MacOS 使用 Colima 快速打造 Kubernetes 開發環境","link":"/blog/note_chinese_mac_docker_colima/"},{"title":"[chatgpt] Comparison of Enterprise Architect, Solution Architect and DevOps Roles and Transformation Paths","text":"Note: This page is an AI-generated (gpt-5-mini-2025-08-07) translation from Traditional Chinese and may contain minor inaccuracies. 📌 Introduction ⭐ Note This article was generated by ChatGPT and published after human review. Content is for reference only. It mainly describes the relationships between DevOps, SA, and EA roles and how DevOps can transition to SA or EA. 🧭 Role Positioning and Differences Overview Enterprise Architect (EA): Operates at the enterprise level to define long-term IT strategy and architecture blueprints, ensuring technical solutions align with the company’s mission and business objectives [1] [2] EA is like a city planner, drawing the overall blueprint for the company’s technical landscape [3] They focus on the big picture and long-term strategy, defining standards and governance frameworks to guide technical decisions. Solution Architect (SA): Focuses on a specific product or project, assessing business needs and designing corresponding technical solutions [1:1] SA acts as a bridge, connecting business requirements with the final technical implementation [1:2] They are akin to an architect who draws the blueprint for a single building (a single system), ensuring the solution complies with enterprise-wide architecture standards while meeting project needs [3:1] SA focuses on concrete details and practical implementation, leading teams to turn architectural plans into deliverable systems. DevOps Engineer: Focuses on software delivery pipelines and operational automation, facilitating collaboration between development and operations to enable continuous integration/delivery (CI/CD), automated deployments, and system monitoring to ensure reliable and fast software delivery [2:1] DevOps emphasizes tools and process optimization, like the city’s infrastructure maintainers, building roads and pipelines (deployment processes) and keeping traffic flowing (stable operations). Commonality: All three roles require broad technical knowledge and good communication and coordination skills, but they emphasize different aspects. Enterprise Architects emphasize strategy and a global view; Solution Architects emphasize project-level technical design and coordination for implementation; DevOps Engineers emphasize engineering execution and automation efficiency. Depending on company size and industry, whether these roles are established and how responsibilities are divided will differ — the larger and more complex the systems, the more need there is to clearly distinguish roles like EA and SA [1:3]. Below we describe the job responsibilities, required skills, and common technology differences of EA, SA, and DevOps in startup and financial industry contexts, then provide concrete advice and learning resources for transitioning from DevOps to SA or EA. 🏗️ Enterprise Architect (EA) Role Responsibilities and Positioning: Enterprise Architects are responsible for defining the overall technical blueprint in an organization and ensuring IT strategy aligns with company business strategy [1:4] They analyze internal and external enterprise needs, identify business capability gaps, and plan future technology roadmaps [1:5] EAs typically do not delve into implementation details but set standards and delegate concrete implementation tasks to Solution Architects or Technical Architects [1:6] A key task of EA is architecture governance: guiding projects to follow enterprise standards through architecture models and principles to avoid siloed efforts. EAs frequently collaborate with senior management to determine which emerging technologies (e.g., AI, blockchain) could provide competitive advantages [1:7] Core Skills: EAs need cross-domain technical knowledge and business acumen. They must be proficient in enterprise architecture frameworks (e.g., TOGAF, Zachman), understand business processes and industry trends, and connect complex technical concepts to business strategy [1:8] [1:9] EAs should have excellent strategic planning and analytical skills, using architecture views and models to analyze the IT landscape, find operational bottlenecks, and plan improvement paths [1:10] EAs also require strong communication and influence, able to explain the value of IT strategy to executives and coordinate departments to reach consensus [1:11] Soft skills: EAs must work methodically and focus on architecture governance to ensure technical decisions comply with corporate standards and regulations. Common Technologies and Tools: Since EAs look at the whole, their technical focus is on architecture modeling and strategy management tools rather than specific programming languages. Common tools include Enterprise Architecture Management (EAM) tools like Archi, Sparx EA, LeanIX for drawing architecture blueprints, asset inventories, and roadmaps [1:12] EAs should also be familiar with major cloud platforms (AWS, Azure, GCP) and enterprise solutions (databases, ERP, middleware) at a high level to make high-level technology selection decisions. Although EAs don’t code, understanding technical standards and frameworks—such as microservices architecture, enterprise integration patterns, and security frameworks—is important for evaluating solution feasibility and compatibility. Startup vs. Financial Industry Context Differences: In startups, due to smaller size and single-product focus, EA may be assumed by the CTO, architectures are simpler and evolve quickly, emphasizing agility over strict governance. Startup EAs may also act as SA and technical leads, adopting flexible approaches. Conversely, in large financial enterprises (banks, insurers), business lines are complex and regulatory requirements are high, typically having dedicated EA teams. Financial EAs usually follow rigorous frameworks (e.g., TOGAF) to create standardized architecture blueprints and governance processes to ensure systems (legacy mainframes, data warehouses, new applications) comply with overall strategy and regulations. Financial EAs must focus on risk control, data privacy, and compliance, and be cautious when introducing new technologies. 🧱 Solution Architect (SA) Role Responsibilities and Positioning: Solution Architects focus on specific projects or products’ architecture design. They take the principles and blueprints from Enterprise Architects and deeply analyze business needs to design feasible technical solutions [1:13] SA work begins with requirements analysis: confirming functional and quality requirements (QA) with product managers and business units, then designing an architecture solution (including component decomposition, module interactions, data flows, etc.) among multiple technical options. During design, SAs must balance enterprise-wide architecture and implementation details [1:14] Once a solution is approved, SAs often take on a technical leadership role: guiding development teams to understand the architecture, choosing technologies, and ensuring the architecture is correctly implemented during development. SAs also assess technical risks during implementation to ensure the delivered system aligns with the initial architectural vision and requirements [1:15] In short, SA is the technical lead in a project, ensuring the “right solution” is “implemented correctly.” Core Skills: As a bridge between business and technology, SAs need a combination of breadth and depth. SAs must master system design principles and architecture patterns (layered architecture, microservices, event-driven, cloud-native design, etc.), and select suitable architecture solutions for different problems. SAs often grow from senior developers and possess deep experience in one or two technology stacks (e.g., Java/Spring, .NET ecosystems, or front/back-end domains), understanding code-level practices to design realizable solutions. Additionally, SAs must have strong communication and coordination skills to explain architecture to development teams, align with EAs on consistency, and explain how technical solutions address business problems to non-technical stakeholders. Project management skills are also important, as SAs often act as technical project managers to keep stakeholders aligned [1:16] In summary, SAs must be able to analyze complex problems and decompose them into executable solutions, while possessing the soft skills to lead teams to implement them. Common Technologies and Tools: SA technologies vary by industry and project but generally include a wide range of development technologies and architecture tools. For cloud platforms, SAs should be familiar with AWS, Azure, GCP and know how to leverage services (compute, storage, databases, messaging queues) to build scalable systems [2:2] For application architecture, SAs commonly use UML or C4 Model to draw system diagrams and tools like Visio, draw.io, PlantUML for design. Programming languages and frameworks depend on the domain: financial backends may prefer Java/Spring or .NET; startups might use Python/Django, Node.js/Express, Go, etc. SAs must choose appropriate databases (relational SQL or NoSQL), message brokers (Kafka, RabbitMQ), etc. Besides application development, SAs also need to understand DevOps CI/CD tool principles—containers and Kubernetes, CI tools (Jenkins, GitLab CI)—to design deployable and operable solutions [2:3] SAs also consider performance and security, so familiarity with performance testing tools and security best practices is beneficial. In short, SA technical knowledge covers everything needed to take a system from whiteboard conception to production. Startup vs. Financial Industry Context Differences: In startups, SAs often double as technical team leaders. With limited personnel, SAs may design architectures and directly participate in coding—roles are more hands-on. Startups emphasize rapid iteration, so SAs tend to use lightweight frameworks and cloud services to accelerate development and evolve after launch. In financial enterprises, SAs are usually a distinct role and less involved in day-to-day coding, focusing on architecture design and coordination. Financial SAs face many legacy system integration challenges and must propose solutions for business areas (payment systems, risk control) while complying with enterprise architecture standards. They commonly use enterprise-grade technologies (IBM WebSphere, Oracle DB) and design emphasizing security and transactional consistency. Financial SAs work closely with EAs to ensure compliance and coordinate with project managers and external vendors. In short, startup SAs are more flexible and multi-faceted; financial SAs are more specialized and robust to ensure reliability in strict environments. 🔧 DevOps Engineer (DevOps Engineer) Role Responsibilities and Positioning: DevOps Engineers aim to break down the barriers between development (Dev) and operations (Ops) by establishing efficient, automated software delivery processes. Core responsibilities include designing and implementing CI/CD pipelines, automating build, test, and deployment processes [2:4]; writing Infrastructure as Code (IaC) using Terraform, CloudFormation, etc., to deploy and manage cloud infrastructure [2:5]; configuring and managing continuous monitoring and alerting systems (Prometheus, Grafana, CloudWatch) to ensure system stability [2:6]; and driving configuration management and automation (Ansible, Chef) to reduce human error. DevOps Engineers also manage environment consistency, maintaining dev/test/stage/prod parity, and helping development teams deliver and iterate quickly. In short, DevOps focuses on the software delivery lifecycle’s efficiency and reliability and is key to implementing fast delivery and continuous improvement culture. Core Skills: DevOps Engineers require broad toolchain knowledge and collaboration skills. Technically, they must be proficient with CI/CD tools (Jenkins, GitLab CI/CD), version control (Git), container tech (Docker) and orchestration (Kubernetes). Deep understanding of operating systems and networking is necessary, as deployment environments involve Linux tuning, service configuration, routing, and firewall settings. DevOps typically have scripting/programming skills—Python, Shell, Go—to write automation scripts or auxiliary tools. They also must understand cloud architectures and services (AWS, Azure, GCP) as modern apps deploy on cloud or hybrid environments. Soft skills: DevOps serve as the glue between development and IT ops, requiring excellent communication and coordination to promote DevOps culture. When incidents occur, DevOps often coordinate troubleshooting and must quickly contact stakeholders to resolve issues [4] Finally, they should have a continuous learning mindset since DevOps tools and practices evolve rapidly—learning new tech (service mesh, GitOps) helps improve team efficiency. Common Technologies: DevOps daily work revolves around automation and infrastructure tech. Common technologies include: Cloud &amp; Containers: AWS, Azure, GCP and their services (EC2, S3, RDS), Linux containers (Docker) and orchestration (Kubernetes, OpenShift). DevOps write Kubernetes YAML, use Helm Charts to manage containerized apps. CI/CD &amp; Configuration Management: Jenkins, GitHub Actions, GitLab CI, CircleCI for continuous integration/delivery; Ansible, Chef, Puppet for configuration management and automated deployment; Terraform, CloudFormation for IaC management [2:7] These tools combine to enable one-click deployment and infrastructure automation. Monitoring &amp; Logging: Prometheus, Grafana for metrics; ELK/EFK (Elasticsearch + Kibana + Logstash/Fluentd) for centralized logging; cloud-native monitoring (CloudWatch, Azure Monitor). DevOps set up alerts and dashboards to monitor system health in real time. Version Control &amp; Collaboration: Git is essential; understanding Git Flow or Pull Request workflows helps team collaboration. Tools like Nexus/Artifactory manage binaries, Docker Registry handles container images. Programming Languages: Though DevOps don’t focus on business logic development, they write scripts and tools. Shell scripts handle system tasks, Python is common for automation; Go is increasingly used for DevOps tools (e.g., Kubernetes CLI tools). DevOps should be able to read development code (Java, Python, JavaScript) to troubleshoot issues. Startup vs. Financial Industry Context Differences: In startups, DevOps is a key early-team member responsible for building the entire cloud infrastructure and CI/CD pipeline from scratch. Startups choose highly automated, cloud-first approaches to speed up deployment (e.g., serverless) and reduce maintenance. Small teams mean DevOps often overlap with development and testing, leading to broader skill coverage and agility. In large financial companies, DevOps adoption may be hindered by legacy processes and compliance. Many financial institutions adopt DevOps gradually via pilot teams or project-based approaches. Financial DevOps must adapt to strict change management and audit requirements, incorporating approvals and records into automation. Technically, some firms have private data centers, so DevOps manage hybrid cloud (on-prem + private + public cloud) and ensure high availability and disaster recovery for critical systems. Financial organizations emphasize access control and monitoring, and DevOps toolchains must comply with security policies (e.g., no sensitive data uploaded to public cloud, CI/CD pipelines require change approvals). Overall, startup DevOps focuses on innovation, speed, and iteration; financial DevOps focuses on stability and compliance, balancing speed and risk. Summary: Depending on industry and scale, EA, SA, and DevOps roles and divisions are flexible. In small startups, there may be no formal EA title or one person wears many hats; in large financial firms, the three roles are distinct and collaborate closely. As companies grow, architecture governance becomes more important, evolving from informal Tech Lead-centered design to establishing SA teams and eventually introducing EA for strategic oversight [3:2]. Understanding these roles in different contexts helps you plan appropriate career development and learning paths. 🗺️ DevOps to Architect Transition Roadmap DevOps engineers accumulate rich hands-on experience and an understanding of delivery processes, which provides a good foundation for becoming an architect [4:1]. However, transitioning from a tool- and execution-focused DevOps role to a higher-level design role as a Solution Architect (SA) or Enterprise Architect (EA) requires further growth in technical depth and breadth, business understanding, and architectural thinking. Below is a step-by-step guide for learning and mindset shifts: Technical and Knowledge Learning Sequence (Foundations → Advanced → Practice): Foundation Stage: Strengthen computer science and software engineering fundamentals: data structures, algorithms, network protocols, operating systems, etc., to build a theoretical foundation for architecture design. Also learn software design principles and object-oriented concepts (e.g., SOLID) and basic design patterns. For DevOps professionals, this helps fill theoretical gaps in software design. Classic books (Clean Code, Design Patterns) and online courses can solidify these foundations. Advanced Stage: Deep-dive into software architecture theories and patterns. Study common architecture styles (monolith vs. microservices, distributed system principles, event-driven, CQRS), architecture patterns (layered architecture, Hexagonal, Clean Architecture) and the trade-offs in architectural decisions. Learn enterprise architecture frameworks (for those aiming for EA, e.g., TOGAF, BDAT) to understand governance methodologies. For aspiring SAs, deep expertise in one or two mainstream technologies for system design is crucial—e.g., designing architectures for high-concurrency websites or ensuring ACID properties in financial transaction systems. In this stage, expand cloud and infrastructure knowledge: since DevOps already knows CI/CD and containers, further learn cloud architecture design (AWS Well-Architected Framework, hybrid cloud) and network/security architecture (VPC design, zero-trust security) [5] Also cover database fundamentals and large distributed systems (NoSQL vs SQL trade-offs, CAP theorem, consensus algorithms like Paxos/Raft) to make forward-looking technical selections as an architect. Practice Stage: Practical experience is essential. Start architecture design practice. One approach is to proactively take on small architecture design tasks at work: redesign a module, optimize deployment topology, and discuss your design with the team for feedback. Participate in design review processes to observe how senior architects balance trade-offs. If lacking opportunities at work, build one or two architecture projects yourself: design a URL-shortening service or an e-commerce system end-to-end (frontend, backend, DB, cache, messaging), write architecture docs and PoC code for key modules. Practice reveals gaps between theory and reality and teaches trade-offs. These experiences become valuable when stepping into an architect role. Supplement Business Understanding and Architecture Design Ability: Architects are not just technical experts but designers who understand business. DevOps backgrounds need to strengthen domain knowledge and requirements analysis: Deepen domain knowledge: Regardless of industry—finance, e-commerce, etc.—learn business processes and domain specifics. For finance, understand core banking, payment clearing, and regulatory compliance; for e-commerce, understand order flows, inventory, SEO, etc. Learn by asking business teams, attending business meetings, or reading industry reports. With business insight, you can design architectures that truly fit business needs. Practice requirement analysis and architecture design: Train yourself to extract technical requirements from vague business needs. Try writing architecture documents or technical proposals: analyze functional and non-functional requirements (performance, scalability, security, compliance), and produce architecture solutions covering upstream/downstream relations, component decomposition, data/control flows, and rationale for key technology choices. This improves holistic thinking and decision-making. Compare with industry cases or consult experienced architects to iterate on your designs. Learn architecture review and decision-making: Architects regularly make technology selections and trade-offs. Develop this skill by learning architecture evaluation methods (e.g., ATAM), reading system design case studies, especially how others balance conflicting requirements. Understand how to balance high availability vs consistency, latency vs throughput, development speed vs maintainability. With experience, you’ll make architecture decisions more confidently. Suggested Project Types and Scope to Gain Experience: To transition smoothly, deliberately seek projects that train architecture skills: Start with small-scale architecture design: Volunteer for design work on small projects or modules in your team. As a DevOps person, you know delivery well—try extending responsibilities to design, e.g., design a new logging collection architecture, refactor module boundaries, or lead a performance bottleneck refactor. These appropriately scoped tasks build design experience and confidence. Get involved in end-to-end solutions: Seek to participate in end-to-end project lifecycles beyond just delivery. Join a new product from requirement discussions, architecture design, development to deployment. Observe how architects interact with stakeholders and make design choices. Volunteer to own sub-system architecture. End-to-end involvement cultivates a holistic view, revealing how each stage impacts architecture. Join architecture reviews or design committees: Many large companies have architecture review boards. Even as an observer, join these discussions to see diverse architecture proposals and high-level concerns. If possible, ask questions and give feedback so architecture teams notice your interest and insights. This can lead to mentorship or more opportunities. Act as a liaison/coordinator: Use DevOps’ cross-team position to act as a technical coordinator. In cross-functional projects, coordinate front-end, backend, DB, and ops communication to ensure smooth integration. This trains you to view systems from a higher vantage and coordinate multiple stakeholders—core parts of an architect’s daily work [1:17] By playing the “junior architect” role in projects, you effectively start performing some architect responsibilities. Seek mentors and feedback: If your company has senior SAs or EAs, proactively ask for mentorship and request to be guided in projects. After submitting your architecture proposals, invite experienced colleagues to review and accept feedback. Mentorship accelerates spotting weaknesses and targeted improvement in your architectural thinking. Mindset Shift Recommendations (From Tool-Oriented to Strategy-Oriented): Transitioning to an architect is not just a skill upgrade but a mindset change: From doer to designer: DevOps are used to hands-on problem solving; architects must view problems from a higher level. Shift from “how do I do this well” to “what should we do and why,” focusing on what to do and why. Cultivate systemic thinking, always maintaining a conceptual model of the whole system and considering the global impact of decisions instead of local fixes. From tool-first to problem-first: DevOps often solve concrete problems with tools; architects first focus on the business problem and priorities. Practice asking: “What business problem is this requirement solving? What are the key success metrics?” Then derive suitable technical solutions. Avoid jumping into tool or framework choices early; define the problem first, then pick the tool. From chasing new tech to emphasizing stable architecture: DevOps enjoy trying new tools; architects are more conservative and rational, emphasizing long-term impact of technology choices. Develop technical restraint: evaluate maturity, fit with existing environment, and business value before adopting new tech. If new tech solves a key problem, introduce it; otherwise, decline to avoid added complexity. In short, shift focus from “technology itself” to “value technology creates.” From local optimization to global trade-offs: DevOps often optimize delivery efficiency and single-system reliability; architects must make global trade-offs. A solution optimal for one service may increase ecosystem complexity or create technical silos. Architect thinking requires weighing pros and cons across dimensions: performance, cost, development speed, maintainability, scalability. Accept that “no perfect architecture exists—only architectures suited for current needs”—and set priorities accordingly. Enhance communication and leadership: Moving from individual contributor to architect means influencing and leading others. Improve communication skills, conveying complex technical concepts in simple terms for non-technical audiences—core for EA/SA [6] Also practice listening and negotiation: architecture proposals must reconcile multiple team interests—balance firm principles and flexible adjustments. Build a trusted technical leadership reputation so teams will follow your decisions. Start small: lead technical discussions, share learnings, and increase influence. Strategic thinking: For those targeting EA, cultivate strategic thinking, focusing on market and competition and company-wide directions. Ask: “How might the business change in 2–3 years, and what technical preparations should we make?” EAs work with executives to set IT strategy—so follow industry trend reports and competitor technical moves. Learn to discuss technology in business terms. Shift from execution-only thinking to viewing technology as a strategic asset for business goals. The above steps are not strictly linear and can be done in parallel. For example, practice while learning theory and simultaneously develop soft skills. In this transition, DevOps background is an advantage: your grasp of the delivery process gives you a broader view and cross-domain experience that architects need [4:2]. In fact, transitioning from DevOps to architect is a common career path—many success stories show that with continuous learning and broader vision, you can grow from DevOps Engineer to an excellent Solution Architect, or even an Enterprise Architect [4:3]. The key is patience and passion: treat every project as an opportunity to sharpen architectural thinking; your DevOps experience will become a unique asset in making architecture decisions. ⚡ Learning Resources Transitioning requires continuous learning. The resources below cover GitHub repos, online courses, books, and professional blogs/communities that provide in-depth knowledge and practical experience: 💻 GitHub Solution Architect Learning Path: github.com A curated learning resource collection for aspiring architects, covering architecture introduction, fundamentals, cloud platforms, architecture patterns, tools, and certifications—suitable for DevOps engineers to learn architecture systematically. Awesome Software Architecture: github.com A community-maintained software architecture resource list, compiling many articles, videos, and practice projects covering architecture patterns and principles—an excellent entry to quickly grasp the architecture landscape. System Design Primer: github.com A well-known system design primer with how to build large systems, common system design interview questions, and many real cases (designing Twitter, Facebook, etc.). Great for training architecture design thinking through examples. Awesome DevOps: A curated list of DevOps tools and practices. Although you may already be familiar with DevOps, this list helps check for areas relevant to architecture decisions, such as new infrastructure tech or SRE best practices (the Awesome DevOps docs list top solutions for cloud, configuration management, containers, monitoring, etc.: awesome-devops.xyz). 🎓 Online Courses Coursera: Software Design and Architecture Specialization: coursera.org A university-backed series teaching design principles, patterns, and architecture to create reusable and maintainable system architectures. Coursera: TOGAF Certification Course: coursera.org Focuses on core enterprise architecture concepts (business/data/application/technology BDAT, ADM) useful for understanding EA methodology. Pluralsight: Developer to Architect: classcentral.com Designed for developers/DevOps transitioning to architects, covering role responsibilities, required skills, and how to act as an architect across project lifecycle. Emphasizes designing and communicating solutions to technical and non-technical stakeholders—serves as a roadmap for the transition. Udemy: Microservices Architecture &amp; Patterns: Practical courses on microservices and cloud-native design are available on Udemy and similar platforms. Choose highly rated courses (e.g., taught by senior architects) to apply theory to real cases and deepen understanding. 📘 Recommended Books Fundamentals of Software Architecture — Mark Richards &amp; Neal Ford. A comprehensive book on architecture patterns, quality attribute trade-offs, and architect responsibilities—good for DevOps to broaden architecture perspective. Domain-Driven Design: Tackling Complexity in the Heart of Software — Eric Evans. Architects must integrate domain knowledge into technical design; this classic teaches collaborating with domain experts and modeling core domains. The Software Architect Elevator — Gregor Hohpe. Focuses on the architect’s role change and soft skills in digital transformation—useful for architects entering large enterprises; the “elevator” metaphor helps shift between strategy and technology. Accelerate — Nicole Forsgren et al. Based on research on how DevOps practices drive business value. For DevOps-to-architects, it strengthens understanding of technology-business outcome links and helps focus architecture decisions on business value. Chapters on metrics and organizational change help in promoting architecture or DevOps transformations. Software Architecture in Practice — Len Bass et al. A classic textbook covering many aspects of software architecture with numerous case analyses—essential for systematic architecture learning. Additionally, Martin Fowler’s works like Patterns of Enterprise Application Architecture and his blog are valuable. Fowler’s insights on enterprise architecture and refactoring help build solid architecture thinking. 🌐 Blogs and Professional Communities Medium Tech Publications: Medium hosts many architecture and cloud articles. Publications like ITNext, Towards Data Science, The Startup regularly publish architecture-related pieces. Individual authors also share experiences of moving from DevOps to architect and cloud architecture case studies—these narratives offer practical guidance. Reddit Communities: Subscribe to relevant subreddits: r/softwarearchitecture – discussions on software architecture, experience sharing, book recommendations, and architecture challenges. r/DevOps – focuses on DevOps but often touches architecture decisions (CI/CD design, large-scale deployments). r/cscareerquestions &amp; r/ExperiencedDevs – career forums with many discussions about transitioning roles and experienced practitioners’ advice. Stack Overflow / Stack Exchange: Follow tags like architecture and system-design to learn specific technical Q&amp;A. Software Engineering Stack Exchange includes many architecture and design decision discussions. Participating helps solve technical problems and learn how others analyze architecture problems. InfoQ and IBM Developer: InfoQ has numerous microservices, architecture case studies, and enterprise architecture governance articles (InfoQ has Chinese content as well). IBM Developer and Microsoft Architecture Center provide architect guides and reference architectures. These platforms keep pace with industry trends—good for continuous tracking. Professional Organizations &amp; Forums: Join architecture forums or local communities. For example, The Open Group’s architect community (TOGAF discussions), IEEE Software groups. LinkedIn has groups like “Software Architects” or “Enterprise Architecture Network” where professionals share articles and insights. Active participation builds networks and knowledge. Local Communities and Blogs: For Traditional Chinese readers, follow Taiwan and Hong Kong tech communities and blogs. For example, iT邦幫忙 often has columns on architecture and DevOps transformation, and local architecture events (e.g., Taiwan Architecture Summit) provide practical local industry sharing. 🔑 Keywords Enterprise Architecture Management Tools (EAM) The Open Group Architecture Framework (TOGAF) Zachman Framework Microservices Architecture Enterprise Integration Patterns (EIP) Security Framework System Component Decomposition System Design Principles Architectural Patterns Layered Architecture Event-Driven Architecture (EDA) Cloud-Native Design Lightweight Frameworks Binary Release Management Container Image Management Docker Registry SOLID Principles Design Patterns Monolithic Application Distributed System Principles Command Query Responsibility Segregation (CQRS) Hexagonal Architecture Clean Architecture Architectural Trade-offs Enterprise Architecture Domains (Business/Data/Application/Technology, BDAT) Architecture Governance Methodology Atomicity, Consistency, Isolation, Durability (ACID) Zero Trust Security Model Consensus Algorithms Paxos Algorithm Raft Algorithm Architecture Documentation Technical Proposal Functional Requirement Analysis Non-Functional Requirement Analysis Architecture Solution Design System Upstream and Downstream Relationships Data Flow and Control Flow Technology Selection Rationale Architecture Evaluation Methods Architecture Tradeoff Analysis Method (ATAM) Architecture-level Trade-offs (Availability, Consistency, Latency, Throughput, Developer Efficiency, Maintainability) Architecture Development Method (ADM) 🔖 References Enterprise Architect vs. Solution Architect vs. Technical Architect https://www.leanix.net/en/wiki/ea/enterprise-architect-vs-solution-architect-vs-technical-architect-whats-the-difference ↩︎ ↩︎ ↩︎ ↩︎ ↩︎ ↩︎ ↩︎ ↩︎ ↩︎ ↩︎ ↩︎ ↩︎ ↩︎ ↩︎ ↩︎ ↩︎ ↩︎ ↩︎ Distinguishing Between DevOps Roles and AWS Solution Architects https://www.linkedin.com/pulse/distinguishing-between-devops-roles-aws-solution-architects-yagci-6jbqf/ ↩︎ ↩︎ ↩︎ ↩︎ ↩︎ ↩︎ ↩︎ ↩︎ Navigating the Architecture from Startup to Enterprise https://dilankam.medium.com/navigating-the-architecture-from-startup-to-enterprise-c355f6d3dd17 ↩︎ ↩︎ ↩︎ IT careers: 4 ways DevOps bolsters your architect skill set https://www.redhat.com/en/blog/devops-career-architecture ↩︎ ↩︎ ↩︎ ↩︎ How to Seamlessly Transition from DevOps to Cloud Architect Role https://cloudmize.medium.com/how-to-seamlessly-transition-from-devops-to-cloud-architect-role-8eb8fe02cd5f ↩︎ How can I switch roles from DevOps to Architect? https://www.reddit.com/r/AWSCertifications/comments/1aorad5/how_can_i_switch_roles_from_devops_to_architect ↩︎","link":"/blog/chatgpt-devops.en/"},{"title":"[chatgpt] 企業架構師、解決方案架構師與 DevOps 角色比較及轉型路徑","text":"註記：此頁為由 AI（gpt-5-mini-2025-08-07）自動翻譯自英文原文，可能含有少量不準確之處。 注意：本頁面為 AI 生成（gpt-5-mini-2025-08-07）之繁體中文翻譯，可能包含些微不準確之處。 📌 介紹 ⭐ 注意 本文由 ChatGPT 生成並經人工審核後發布，內容僅供參考。主要說明 DevOps、SA 與 EA 角色之間的關係，以及 DevOps 如何轉型為 SA 或 EA。 🧭 角色定位與差異概覽 Enterprise Architect (EA)：在企業層級定義長期 IT 策略與架構藍圖，確保技術解決方案與公司使命及業務目標一致 [1] [2] EA 類似 城市規劃師，繪製公司技術地景的整體藍圖 [3] 他們關注 大局 與 長期策略，制定標準與治理框架以指導技術決策。 Solution Architect (SA)：聚焦於特定產品或專案，評估業務需求並設計相應技術解決方案 [1:1] SA 扮演 橋樑，將業務需求與最終技術實作連接起來 [1:2] 他們像是為單一建築（單一系統）繪製藍圖的 建築師，在滿足專案需求的同時確保解決方案符合企業級架構標準 [3:1] SA 著重 具體細節 與 實務落地，帶領團隊將架構規劃轉為可交付系統。 DevOps Engineer：專注於軟體 交付流程與運維自動化，促進開發與運維協作以實現持續整合/交付（CI/CD）、自動化部署與系統監控，確保可靠且快速的軟體交付 [2:1] DevOps 強調 工具與流程最佳化，如同城市的 基礎建設維護者，建立道路與管線（部署流程）並維持交通暢通（穩定運行）。 共通點：三個角色都需要廣泛的技術知識與良好溝通協調能力，但 強調的面向不同。企業架構師強調策略與全域視野；解決方案架構師強調專案層級的技術設計與落實協調；DevOps 工程師強調工程執行與自動化效率。依企業規模與產業不同，這些角色是否設置以及職責劃分會有差異——系統越大越複雜，就越需要像 EA、SA 這樣明確分工的角色 [1:3]。 以下描述 EA、SA 與 DevOps 在新創與金融業情境下的職責、所需技能與常見技術差異，並提供從 DevOps 轉型為 SA 或 EA 的實務建議與學習資源。 🏗️ 企業架構師（EA） 職責與定位：企業架構師負責在組織中定義整體技術藍圖，並確保 IT 策略與公司業務策略一致 [1:4] 他們分析企業內外部需求，識別業務能力缺口，規劃未來技術路線圖 [1:5] EA 通常不會深入實作細節，而是制定標準並將具體實作任務委派給解決方案架構師或技術架構師 [1:6] EA 的一項重要任務是 架構治理：透過架構模型與原則引導專案遵循企業標準，避免孤島式發展。EA 經常與高階管理層協作，判斷哪些新興技術（例如 AI、區塊鏈）能帶來競爭優勢 [1:7] 核心技能：EA 需要 跨領域技術知識與商業洞察力。他們需精通企業架構框架（例如 TOGAF、Zachman）、理解業務流程與產業趨勢，並能將複雜技術概念與業務策略連結起來 [1:8] [1:9] EA 應具備卓越的 策略規劃與分析能力，利用 架構視圖與模型 分析 IT 版圖、找出營運瓶頸並規劃改進路徑 [1:10] EA 亦需強大的 溝通與影響力，能向高層解釋 IT 策略的價值並協調各部門達成共識 [1:11] 軟技能：EA 必須 有條理地工作 並 專注於架構治理，確保技術決策符合企業標準與法規。 常見技術與工具：由於 EA 看到的是整體，其技術重點偏向 架構建模與策略管理 工具而非特定程式語言。常見工具包括用於繪製架構藍圖、資產清單與路線圖的企業架構管理（EAM）工具，如 Archi、Sparx EA、LeanIX [1:12] EA 還應熟悉主要 雲端平台（AWS、Azure、GCP）與企業級解決方案（資料庫、ERP、Middleware）以便做出高階技術選擇。雖然 EA 不寫程式，但理解 技術標準與框架（如微服務架構、企業整合模式、安全框架）對評估解決方案可行性與相容性很重要。 新創 vs. 金融業情境差異：在 新創公司，因規模較小且多為單一產品，EA 角色可能由 CTO 承擔，架構較簡單且演進快速，強調敏捷多於嚴格治理。新創的 EA 可能 同時擔任 SA 與技術負責人，採取靈活方式。相對地，在 大型金融企業（銀行、保險），業務線複雜且法規要求高，通常會有專職的 EA 團隊。金融業 EA 常依循嚴謹框架（例如 TOGAF），建立 標準化的架構藍圖 與 治理流程，確保系統（舊有大型主機、資料倉儲、新應用）符合整體策略與規範。金融業 EA 須聚焦於 風險控管、資料隱私與合規，在引入新技術時格外謹慎。 🧱 解決方案架構師（SA） 職責與定位：解決方案架構師聚焦於 特定專案或產品 的架構設計。他們拿到企業架構師制定的原則與藍圖後，深入分析業務需求並設計可行的技術解決方案 [1:13] SA 的工作從 需求分析 開始：與產品經理及業務單位確認功能與品質要求（非功能需求），然後在多種技術選項中設計 架構解決方案（包含元件拆解、模組互動、資料流等）。在設計時，SA 必須在 企業級架構 與 實作細節 之間取得平衡 [1:14] 解決方案通過審核後，SA 常擔任 技術主導：帶領開發團隊理解架構、選擇技術並在開發期間確保架構被正確實作。SA 也會在實作過程中評估技術風險，確保交付系統符合初期的架構願景與需求 [1:15] 總結來說，SA 是專案中的技術領袖，確保「做對的解決方案」被「正確實作」。 核心技能：作為業務與技術之間的橋樑，SA 需要 廣度與深度兼具。SA 必須精通 系統設計原則 與 架構模式（分層架構、微服務、事件驅動、雲原生設計等），並為不同問題選擇合適的架構解法。SA 常由資深開發者升任，並在一兩個技術棧（如 Java/Spring、.NET 生態、或前後端領域）擁有深厚經驗，理解程式碼層級實務以設計可實現的方案。此外，SA 需具備強大的 溝通與協調能力，向開發團隊說明架構、與 EA 對齊一致性、並向非技術利害關係人說明技術如何解決業務問題。專案管理 技能也很重要，因為 SA 常擔任技術專案經理以維持利害關係人一致性 [1:16] 總之，SA 必須能 分析複雜問題並分解為可執行的解決方案，同時具備帶領團隊落實的 軟技能。 常見技術與工具：SA 的技術會依產業與專案而異，但通常涵蓋 廣泛的開發技術與架構工具。在雲端平台上，SA 應熟悉 AWS、Azure、GCP，並知道如何利用其服務（運算、儲存、資料庫、訊息佇列）構建可擴展系統 [2:2] 在應用架構上，SA 常使用 UML 或 C4 Model 繪製系統圖，並使用 Visio、draw.io、PlantUML 等工具設計。程式語言與框架則依領域而定：金融後端可能偏好 Java/Spring 或 .NET；新創可能採用 Python/Django、Node.js/Express、Go 等。SA 必須選擇合適的 資料庫（關聯式 SQL 或 NoSQL）、訊息中介（Kafka、RabbitMQ）等。除了應用開發，SA 還需理解 DevOps CI/CD 工具 原則——容器與 Kubernetes、CI 工具（Jenkins、GitLab CI）——以設計可部署且可運維的解決方案 [2:3] SA 也會考慮 效能與安全性，因此熟悉效能測試工具與安全最佳實務很有幫助。簡言之，SA 的技術知識覆蓋從白板構想到生產環境所需的一切。 新創 vs. 金融業情境差異：在 新創公司，SA 常兼任 技術團隊領導。因人力有限，SA 可能既設計架構又直接參與程式開發——角色較為實務導向。新創強調快速迭代，因此 SA 傾向使用 輕量框架與雲端服務 以加速開發並在上線後演進。在 金融企業，SA 通常是明確分工的角色，較少參與日常程式編寫，重心在 架構設計與協調。金融 SA 面臨許多 遺留系統整合 挑戰，需在支付系統、風控等業務領域提出合規的解法，並遵循企業架構標準。他們常使用 企業等級技術（如 IBM WebSphere、Oracle DB），並在設計上強調 安全性與交易一致性。金融 SA 與 EA 密切合作以確保合規，並與專案經理及外部廠商協調。簡言之，新創的 SA 更靈活多面；金融的 SA 更專業且需確保在嚴格環境下的可靠性。 🔧 DevOps 工程師（DevOps Engineer） 職責與定位：DevOps 工程師旨在打破 開發（Dev） 與 運維（Ops） 之間的障礙，建立高效且自動化的軟體交付流程。核心職責包括設計並實作 CI/CD 管線、自動化建置、測試與部署流程 [2:4]；使用 Terraform、CloudFormation 等撰寫基礎設施即程式碼（IaC）以部署與管理雲端基礎設施 [2:5]；配置並管理 持續監控 與 告警 系統（Prometheus、Grafana、CloudWatch）以確保系統穩定 [2:6]；推動 組態管理 與 自動化（Ansible、Chef）以降低人為錯誤。DevOps 工程師也負責 環境一致性，維持 dev/test/stage/prod 的環境相似性，幫助開發團隊快速交付與迭代。簡言之，DevOps 著重於軟體交付生命周期的效率與可靠性，是實現快速交付與持續改進文化的關鍵。 核心技能：DevOps 需具備廣泛的 工具鏈知識 與 協作能力。在技術面，他們需精通 CI/CD 工具（Jenkins、GitLab CI/CD）、版本控制（Git）、容器技術（Docker）與編排（Kubernetes）。因部署環境涉及 Linux 調校、服務設定、路由與防火牆設定，需對作業系統與網路有深入理解。DevOps 通常具備腳本/程式語言能力—Python、Shell、Go—用以撰寫自動化腳本或輔助工具。他們也必須了解 雲端架構與服務（AWS、Azure、GCP），因現代應用通常部署於雲端或混合環境。軟技能方面：DevOps 作為開發與 IT Ops 之間的膠合劑，需具備優秀的 溝通與協調 能力以推動 DevOps 文化。當事件發生時，DevOps 常協調故障排除並迅速聯絡相關利害關係人以解決問題 [4] 最後，他們應具備 持續學習 的心態，因為 DevOps 工具與實務快速演進—學習新技術（service mesh、GitOps）能提升團隊效率。 常見技術：DevOps 日常工作圍繞自動化與基礎設施技術。常見技術包括： 雲端與容器：AWS、Azure、GCP 及其服務（EC2、S3、RDS）、Linux 容器（Docker）與編排（Kubernetes、OpenShift）。DevOps 撰寫 Kubernetes YAML，使用 Helm Charts 管理容器化應用。 CI/CD 與組態管理：Jenkins、GitHub Actions、GitLab CI、CircleCI 用於持續整合/交付；Ansible、Chef、Puppet 用於組態管理與自動部署；Terraform、CloudFormation 用於 IaC 管理 [2:7] 這些工具結合能達成一鍵部署與基礎設施自動化。 監控與日誌：Prometheus、Grafana 用於指標監控；ELK/EFK（Elasticsearch + Kibana + Logstash/Fluentd）用於集中式日誌；雲原生監控（CloudWatch、Azure Monitor）。DevOps 設置告警與儀表板以即時監控系統健康。 版本控制與協作：Git 是基礎；理解 Git Flow 或 Pull Request 流程有助於團隊協作。Nexus/Artifactory 管理二進位件，Docker Registry 處理容器映像。 程式語言：雖然 DevOps 不專注業務邏輯開發，但會撰寫 腳本與工具。Shell 腳本用於系統任務，Python 常用於自動化；Go 越來越多用於 DevOps 工具（例如 Kubernetes CLI 工具）。DevOps 應能閱讀開發程式碼（Java、Python、JavaScript）以進行排錯。 新創 vs. 金融業情境差異：在 新創公司，DevOps 是早期團隊的關鍵成員，負責從零建立整個雲端基礎設施與 CI/CD 管線。新創採高度自動化、雲端優先的方式以加快部署（例如無伺服器架構）並降低維運。小團隊意味著 DevOps 常與開發與測試重疊，技能面更廣且更具靈活性。在 大型金融公司，DevOps 的導入可能受限於遺留流程與合規規定。許多金融機構透過試點團隊或專案逐步採用 DevOps。金融 DevOps 必須適應嚴格的變更管理與稽核要求，將審批與紀錄納入自動化流程。技術上，一些公司擁有私有資料中心，因此 DevOps 管理 混合雲（內部 + 私有 + 公有雲）並確保關鍵系統的高可用與災難復原。金融組織強調 存取控制與監控，DevOps 工具鏈必須符合安全政策（例如禁止敏感資料上傳至公有雲、CI/CD 管線需有變更審批）。總體而言，新創 DevOps 著重創新、速度與迭代；金融 DevOps 著重穩定性與合規，在速度與風險間取得平衡。 總結：依產業與規模不同，EA、SA 與 DevOps 的角色與劃分具彈性。在小型新創中，可能沒有正式的 EA 職稱或一人肩負多職；在大型金融公司，這三個角色明確且緊密合作。隨公司成長，架構治理變得更重要，從非正式的技術負責人設計演化為成立 SA 團隊，最終引入 EA 做策略監督 [3:2]。理解不同情境下的角色定位，有助於規劃適切的職涯發展與學習路徑。 🗺️ 從 DevOps 到架構師的轉型路徑 DevOps 工程師累積豐富的實務經驗與對交付流程的理解，這為成為架構師提供良好基礎 [4:1]。然而，從以工具與執行為導向的 DevOps 角色，轉向更高階的設計角色（Solution Architect 或 Enterprise Architect）需在 技術深度與廣度、商業理解與架構思維 上進一步成長。以下為逐步的學習與思維轉變指南： 技術與知識學習順序（基礎 → 進階 → 實作）： 基礎階段：強化 電腦科學與軟體工程基礎：資料結構、演算法、網路協定、作業系統等，為架構設計建立理論基礎。也要學習 軟體設計原則與物件導向概念（如 SOLID）以及基本設計模式。對 DevOps 來說，這能補足軟體設計的理論缺口。經典書籍（Clean Code、Design Patterns）與線上課程可鞏固這些基礎。 進階階段：深入研究 軟體架構理論與模式。學習常見架構風格（單體 vs 微服務、分散式系統原則、事件驅動、CQRS）、架構模式（分層架構、六邊形架構、Clean Architecture）與 架構決策的權衡。學習 企業架構框架（欲成為 EA 者，例如 TOGAF、BDAT）以理解治理方法。對於要成為 SA 的人，需在一兩個主流技術上具備深度專長以進行 系統設計—例如設計高併發網站或在金融交易系統中確保 ACID 屬性。在此階段，擴展 雲端與基礎設施知識：由於 DevOps 已熟悉 CI/CD 與容器，進一步學習 雲端架構設計（AWS Well-Architected Framework、混合雲）與 網路/安全架構（VPC 設計、零信任安全）[ ^devops_cloud_architect ] 也要涵蓋 資料庫基礎 與 大型分散式系統（NoSQL vs SQL 的取捨、CAP 定理、共識演算法如 Paxos/Raft），以便在成為架構師時做出前瞻的技術選擇。 實作階段：實務經驗不可或缺。開始 架構設計實作。一種做法是在工作中主動承接小型架構設計任務：重新設計某模組、優化部署拓撲，並與團隊討論你的設計以獲得回饋。參與 設計審查 流程以觀察資深架構師如何權衡利弊。如果工作上缺乏機會，可自行建立一兩個 架構專案：端對端設計一個短網址服務或電商系統（前端、後端、DB、快取、訊息），撰寫架構文件並為關鍵模組做 PoC。實作會揭示理論與現實間的落差並教會取捨。這些經驗在轉任架構師時非常重要。 補強商業理解與架構設計能力：架構師不僅是技術專家，更是理解業務的設計者。DevOps 背景需加強 領域知識 與 需求分析能力： 深化領域知識：無論產業為金融、電商等，學習業務流程與領域特性。對金融而言，理解核心銀行、支付清算與法規合規；對電商而言，理解訂單流程、庫存、SEO 等。透過向業務團隊提問、參加業務會議或閱讀產業報告來學習。有了商業洞察，才能設計真正符合業務需求的架構。 練習需求分析與架構設計：訓練自己從模糊的業務需求中萃取技術需求。嘗試撰寫 架構文件 或 技術提案：分析功能與非功能需求（效能、可擴展性、安全、合規），並提出涵蓋上下游關係、元件拆解、資料/控制流與關鍵技術選擇理由的架構解法。這能提升整體思考與決策能力。可與業界案例比對或諮詢資深架構師以反覆改進設計。 學習架構評估與決策技巧：架構師常做技術選型與權衡決策。透過學習 架構評估方法（例如 ATAM）、閱讀系統設計案例，了解他人如何在需求衝突下做抉擇。理解如何在高可用性 vs 一致性、延遲 vs 吞吐量、開發速度 vs 可維護性之間取得平衡。有了經驗，你會更有自信做出架構決策。 建議的實作專案類型與範圍以累積經驗：為了順利轉型，有意識地尋求能訓練架構能力的專案： 從小型架構設計開始：在團隊中志願承接 小專案或模組 的設計工作。作為 DevOps，你熟悉交付流程—嘗試延伸職責至設計，例如設計新的日誌收集架構、重構模組邊界或主導效能瓶頸優化。這些合宜範圍的任務能建立設計經驗與自信。 參與端到端解決方案：尋求參與超出交付之外的 端到端 專案生命周期。從需求討論、架構設計、開發到部署皆參與，觀察架構師如何與利害關係人互動並做出設計取捨。志願負責子系統架構。端到端參與能培養 整體觀，了解各階段如何影響架構。 加入架構審查或設計委員會：許多大型公司有架構審查委員會。即使僅作為旁聽者，也要加入這些討論，觀察各種架構提案與高階考量。若可能，提出問題與回饋，讓架構團隊注意到你的興趣與見解，進而帶來指導或機會。 擔任聯絡人 / 協調者：利用 DevOps 跨團隊位置，擔任 技術協調者。在跨職能專案中，協調前端、後端、DB 與運維的溝通以確保順利整合。這訓練你從更高層次看系統並協調多方利害關係人——是架構師日常工作的核心 [1:17] 在專案中扮演「初級架構師」角色，實際上就是開始執行部分架構師職責。 尋求導師與回饋：若公司有資深 SA 或 EA，主動請求指導並要求在專案中被帶領。提交架構提案後，邀請資深同事檢視並接受回饋。導師能加速你發現弱點並針對性地提升架構思維。 心態轉變建議（由工具導向轉為策略導向）：成為架構師不僅是技能升級，還是一次 心態的改變： 從執行者到設計者：DevOps 習慣動手解決問題；架構師必須 從更高層次觀察問題。從「我怎麼把這件事做得好」轉為「我們該做什麼以及為何這麼做」，專注於 做什麼 與 為何。培養 系統性思考，始終維持對整體系統的概念模型，考量決策的全域影響而非局部修補。 從工具導向到問題導向：DevOps 常以工具解決具體問題；架構師先聚焦 商業問題與優先順序。練習問：「此需求解決的是什麼商業問題？關鍵成功指標為何？」然後再推導合適的技術方案。避免過早陷入工具或框架選擇；先定義問題，再選工具。 從追新技術到重視穩健架構：DevOps 喜歡嘗試新工具；架構師更保守且理性，強調 技術選擇的長期影響。培養 技術節制力：評估成熟度、與現有環境的相容性及商業價值後再採用新技術。若新技術能解決關鍵問題才引入，否則避免增加複雜度。簡言之，從「技術本身」轉向「技術創造的價值」。 從局部優化到全域權衡：DevOps 常優化交付效率與單一系統可靠性；架構師必須做 全域權衡。對一個服務最佳的解法可能會提高生態系統複雜度或造成技術孤島。架構思維需要 在多面向（效能、成本、開發速度、可維護性、可擴展性）間衡量利弊。接受「沒有完美架構，只有適合當下需求的架構」的觀念，並據此設定優先順序。 提升溝通與領導力：從個人貢獻者轉為架構師意味著你要影響並領導他人。提升 溝通能力，能用簡單語言向非技術聽眾傳達複雜技術概念——這是 EA/SA 的核心能力 [5] 也要練習 聆聽與協商：架構提案需整合不同團隊利益——在堅守原則與彈性調整間取得平衡。建立被信任的 技術領導力 形象，讓團隊願意遵循你的決策。從帶領小型技術討論、分享學習開始，逐步累積影響力。 策略思維：欲晉升為 EA，需培養 策略性思維，關注市場與競爭以及公司層級的方向。思考：「未來 2–3 年業務可能如何變化？我們該做哪些技術準備？」EA 與高階主管共事以制定 IT 策略——因此需追蹤產業趨勢報告與競品的技術動向。學習以商業語言討論技術，將執行導向轉為將技術視為達成業務目標的 策略性資產。 上述步驟並非嚴格線性，可並行進行。例如在學理論時同時練習並發展軟技能。在此轉型中，DevOps 背景是優勢：你對交付流程的掌握帶來廣域視角與跨領域經驗，是架構師所需的特質 [4:2]。事實上，從 DevOps 到架構師是常見的職涯路徑——許多成功案例顯示，透過持續學習與擴大視野，你可以從 DevOps 工程師成長為傑出的解決方案架構師，甚至企業架構師 [4:3]。關鍵在於耐心與熱情：把每個專案當成磨練架構思維的機會；你的 DevOps 經驗將成為做出架構決策的獨特資產。 ⚡ 學習資源 轉型需要持續學習。下列資源涵蓋 GitHub 倉庫、線上課程、書籍與專業部落格/社群，提供深入知識與實務經驗： 💻 GitHub Solution Architect Learning Path: github.com 為 有志架構師 精選的學習資源彙整，涵蓋架構入門、基礎、雲端平台、架構模式、工具與認證——適合 DevOps 工程師系統性學習架構。 Awesome Software Architecture: github.com 社群維護的 軟體架構資源清單，彙整大量文章、影片與實作專案，涵蓋架構模式與原則——是快速掌握架構領域的良好入口。 System Design Primer: github.com 著名的 系統設計入門，介紹如何構建大型系統、常見系統設計面試題與許多實例（設計 Twitter、Facebook 等）。透過案例訓練架構設計思維十分適合。 Awesome DevOps: 一份經過整理的 DevOps 工具與實務清單。雖你可能已熟悉 DevOps，但此清單有助檢視與架構決策相關的領域，例如新基礎設施技術或 SRE 最佳實務（Awesome DevOps 文件列出雲端、組態管理、容器、監控等頂級解法：awesome-devops.xyz). 🎓 線上課程 Coursera: Software Design and Architecture Specialization: coursera.org 大學級別的系列課程，教導設計原則、模式與架構以建立可重用且可維護的系統架構。 Coursera: TOGAF Certification Course: coursera.org 聚焦核心企業架構概念（業務/資料/應用/技術 BDAT、ADM），對理解 EA 方法論有幫助。 Pluralsight: Developer to Architect: classcentral.com 為欲從開發/DevOps 轉型為架構師而設，涵蓋角色職責、所需技能，以及如何在專案生命週期中扮演架構師角色。 強調向技術與非技術利害關係人設計與溝通解決方案—作為轉型的路徑圖。 Udemy: Microservices Architecture &amp; Patterns: 可在 Udemy 等平台找到實務導向的微服務與雲原生設計課程。選擇高評價且由資深架構師授課的課程，以將理論應用於真實案例並深化理解。 📘 推薦書籍 Fundamentals of Software Architecture — Mark Richards &amp; Neal Ford。一本全面介紹架構模式、品質屬性權衡與架構師責任的著作，適合 DevOps 拓展架構視角。 Domain-Driven Design: Tackling Complexity in the Heart of Software — Eric Evans。架構師需將領域知識融入技術設計；此經典教你如何與領域專家協作並建模核心領域。 The Software Architect Elevator — Gregor Hohpe。聚焦架構師角色變化與在數位轉型中的軟技能——對進入大型企業的架構師有幫助；“電梯”隱喻幫助在策略與技術間穿梭。 Accelerate — Nicole Forsgren 等。基於研究的 DevOps 實務如何驅動業務價值。對於從 DevOps 轉為架構師的人，能強化技術與業務成果之間的連結，並在做架構決策時聚焦商業價值。書中對指標與組織變革的章節有助於推動架構或 DevOps 轉型。 Software Architecture in Practice — Len Bass 等。架構領域的經典教科書，涵蓋多面向並含多個案例分析—是系統性學習架構的基礎讀物。 另外，Martin Fowler 的著作如 Patterns of Enterprise Application Architecture 與其部落格也相當有價值。Fowler 對企業應用架構與重構的見解，有助於建立紮實的架構思維。 🌐 部落格與專業社群 Medium 技術刊物：Medium 上有許多架構與雲端文章。像 ITNext、Towards Data Science、The Startup 等刊物常發布架構相關內容。個別作者也分享從 DevOps 轉為架構師的經驗與雲端架構案例——這類敘事式文章提供實務指南。 Reddit 社群：訂閱相關子版： r/softwarearchitecture – 討論軟體架構、經驗分享、書籍推薦與架構挑戰。 r/DevOps – 專注 DevOps，但常觸及架構決策（CI/CD 設計、大型部署）。 r/cscareerquestions &amp; r/ExperiencedDevs – 職涯論壇，許多關於換角色情境的討論與資深從業者建議。 Stack Overflow / Stack Exchange：關注像 architecture 與 system-design 標籤以學習技術 Q&amp;A。Software Engineering Stack Exchange 有許多架構與設計決策的討論。參與可幫助解決技術問題並學習他人如何分析架構問題。 InfoQ 與 IBM Developer：InfoQ 有大量微服務、架構案例與企業架構治理文章（InfoQ 亦有中文內容）。IBM Developer 與 Microsoft Architecture Center 提供架構指南與參考架構。這些平台能追蹤產業趨勢，適合持續學習。 專業組織與論壇：加入架構論壇或在地社群。例如 The Open Group 的架構師社群（TOGAF 討論）、IEEE Software 群組。LinkedIn 上有「Software Architects」或「Enterprise Architecture Network」等群組，專業人士會分享文章與見解。積極參與有助建立人脈與知識。 在地社群與部落格：對繁體中文讀者，可關注台灣與香港的技術社群與部落格。例如 iT 邦幫忙 經常有架構與 DevOps 轉型的專欄，且在地的架構活動（如台灣 Architecture Summit）提供實務分享。 🔑 關鍵字 Enterprise Architecture Management Tools (EAM) The Open Group Architecture Framework (TOGAF) Zachman Framework Microservices Architecture Enterprise Integration Patterns (EIP) Security Framework System Component Decomposition System Design Principles Architectural Patterns Layered Architecture Event-Driven Architecture (EDA) Cloud-Native Design Lightweight Frameworks Binary Release Management Container Image Management Docker Registry SOLID Principles Design Patterns Monolithic Application Distributed System Principles Command Query Responsibility Segregation (CQRS) Hexagonal Architecture Clean Architecture Architectural Trade-offs Enterprise Architecture Domains (Business/Data/Application/Technology, BDAT) Architecture Governance Methodology Atomicity, Consistency, Isolation, Durability (ACID) Zero Trust Security Model Consensus Algorithms Paxos Algorithm Raft Algorithm Architecture Documentation Technical Proposal Functional Requirement Analysis Non-Functional Requirement Analysis Architecture Solution Design System Upstream and Downstream Relationships Data Flow and Control Flow Technology Selection Rationale Architecture Evaluation Methods Architecture Tradeoff Analysis Method (ATAM) Architecture-level Trade-offs (Availability, Consistency, Latency, Throughput, Developer Efficiency, Maintainability) Architecture Development Method (ADM) 🔖 參考資料 Enterprise Architect vs. Solution Architect vs. Technical Architect https://www.leanix.net/en/wiki/ea/enterprise-architect-vs-solution-architect-vs-technical-architect-whats-the-difference ↩︎ ↩︎ ↩︎ ↩︎ ↩︎ ↩︎ ↩︎ ↩︎ ↩︎ ↩︎ ↩︎ ↩︎ ↩︎ ↩︎ ↩︎ ↩︎ ↩︎ ↩︎ Distinguishing Between DevOps Roles and AWS Solution Architects https://www.linkedin.com/pulse/distinguishing-between-devops-roles-aws-solution-architects-yagci-6jbqf/ ↩︎ ↩︎ ↩︎ ↩︎ ↩︎ ↩︎ ↩︎ ↩︎ Navigating the Architecture from Startup to Enterprise https://dilankam.medium.com/navigating-the-architecture-from-startup-to-enterprise-c355f6d3dd17 ↩︎ ↩︎ ↩︎ IT careers: 4 ways DevOps bolsters your architect skill set https://www.redhat.com/en/blog/devops-career-architecture ↩︎ ↩︎ ↩︎ ↩︎ How can I switch roles from DevOps to Architect? https://www.reddit.com/r/AWSCertifications/comments/1aorad5/how_can_i_switch_roles_from_devops_to_architect ↩︎","link":"/blog/chatgpt_devops_sa_ea/"},{"title":"[note] 解決 fstatat canonical snap 目錄：Permission denied","text":"註記：此頁為由 AI（gpt-5-mini-2025-08-07）自動翻譯自英文原文，可能含有少量不準確之處。 📌 介紹 當在 Ubuntu 使用 Snap 應用程式時，您可能會遇到與 fstatat 有關的令人困惑的權限錯誤。此筆記記錄了一個真實問題、探討可能原因，並分享實際奏效的簡單解法。 ⭐ 注意 這篇文章最初由 ChatGPT 協助草擬，基於我遇到的真實問題。我已驗證解法並修訂內容，以確保面臨類似問題的人能夠清楚且正確地理解。 📚 先決條件 AppArmor LDAP (Lightweight Directory Access Protocol) fstatat snap 以下是本文提及的一些關鍵概念： Term 中文說明 英文說明 AppArmor Ubuntu 的一種安全模組，用來限制應用程式能存取的資源，例如檔案、網路。 Ubuntu 的一個安全模組，用來限制應用程式可以存取的資源。 LDAP (Lightweight Directory Access Protocol) 一種常見的用戶驗證協定，常用於企業環境集中管理帳號。 一種常見的使用者驗證協定，用於集中管理帳號，特別是在企業環境中。 fstatat 一個 Linux 系統呼叫，用來查詢檔案資訊。這個錯誤就是因為它失敗了。 一個用於取得檔案資訊的 Linux 系統呼叫。當此呼叫失敗時會產生錯誤。 Snap Ubuntu 推出的套件系統，讓應用程式更容易安裝、升級與隔離管理。 Ubuntu 的套件系統，使應用程式更容易安裝、更新並隔離執行。 非標準家目錄：使用者的家目錄位於預設 /home/username 路徑之外，通常在不同的磁碟或掛載點上。 家目錄是符號連結：家目錄看似位於 /home/username，但實際上它是指向其它位置的符號連結。 🧭 問題解決框架 問題 1cannot fstatat canonical snap directory: Permission denied 根本原因分析 一般來說，造成此問題有兩個常見原因： 系統安裝在 NTFS 分割區。 家目錄被符號連結到非標準位置。 檢查檔案系統類型 1234df -T /Filesystem Type 1K-blocks Used Available Use% Mounted on/dev/nvme0n1p4 ext4 669754920 44435324 591224492 7% / 系統安裝在 ext4 分割區上 檢查符號連結 123456789ls -l /home/hsiangjenli/Documents/githubdrwxrwxr-x 10 hsiangjenli hsiangjenli 4096 一 27 17:05 blogdrwxrwxr-x 11 hsiangjenli hsiangjenli 4096 三 28 17:03 default-of-credit-card-clients-mlopsdrwxrwxr-x 8 hsiangjenli hsiangjenli 4096 一 29 16:40 hsiangjenli.github.iodrwxrwxr-x 5 hsiangjenli hsiangjenli 4096 三 27 14:28 java-from-pythondrwxrwxr-x 4 hsiangjenli hsiangjenli 4096 一 29 17:19 pic-beddrwxrwxr-x 11 hsiangjenli hsiangjenli 4096 二 16 08:44 python-package-templatedrwxrwxr-x 6 hsiangjenli hsiangjenli 4096 一 27 17:25 star-to-review 這些資料夾都不是符號連結 為何會發生 我不知道 … 解決方法 出人意外地，執行下列指令解決了此問題： 1sudo dpkg-reconfigure apparmor 輸入您想使用的目標目錄 重新啟動電腦~~ 🔁 重點回顧 ✅ 錯誤 cannot fstatat canonical snap directory: Permission denied 常與 AppArmor 限制有關 ✅ 常見原因包括： 系統或家目錄使用 NTFS 分割區 家目錄是符號連結或位於非標準位置 🔍 在本案例中： 系統在 ext4 分割區上 — ✅ 不是 NTFS。 家目錄不是符號連結 — ✅ 不是符號連結。 ⚠️ 根本原因仍不明確 🛠 問題透過以下步驟解決： 執行 sudo dpkg-reconfigure apparmor 在設定過程中輸入家目錄的實際路徑 重新啟動系統 🔗 參考資料 ‘Permission denied’ when running snap applications on Ubuntu 16.04 as a LDAP user Permission denied error when running apps installed as snap packages - Ubuntu 17.04","link":"/blog/note-solving-fstatat-canonical-snap-directory-permission-denied.zh-TW/"},{"title":"[note] Resolve fstatat canonical snap directory: Permission denied","text":"Note: This page is an AI-generated (gpt-5-mini-2025-08-07) translation from Traditional Chinese and may contain minor inaccuracies. Note: This page was automatically translated by AI (gpt-5-mini-2025-08-07) from the original English, and may contain minor inaccuracies. 📌 Introduction When using Snap applications on Ubuntu, you may encounter a confusing permission error related to fstatat. This note records a real issue, explores possible causes, and shares a simple, practical fix that worked. ⭐ Note This article was initially drafted with the help of ChatGPT based on a real issue I encountered. I have verified the solution and revised the content to ensure people facing a similar problem can understand it clearly and correctly. 📚 Prerequisites AppArmor LDAP (Lightweight Directory Access Protocol) fstatat snap Below are some key concepts mentioned in this post: Term Chinese description English description AppArmor Ubuntu’s security module used to restrict the resources an application can access, such as files and network. Ubuntu’s security module that restricts the resources applications can access. LDAP (Lightweight Directory Access Protocol) A common user authentication protocol used for centralized account management, typically in enterprise environments. A common user authentication protocol used for centralized account management, especially in enterprise environments. fstatat A Linux system call used to query file information. This error occurs because it failed. A Linux system call used to obtain file information. When this call fails, an error is produced. Snap Ubuntu’s packaging system that makes it easier to install, upgrade, and isolate applications. Ubuntu’s packaging system that makes it easier to install, update, and run applications in isolation. Non-standard home directory: The user’s home directory is located outside the default /home/username path, often on a different disk or mount point. Home directory is a symlink: The home directory appears under /home/username but is actually a symbolic link pointing to another location. 🧭 Troubleshooting framework Problem 1cannot fstatat canonical snap directory: Permission denied Root cause analysis In general, there are two common causes for this issue: The system is installed on an NTFS partition. The home directory is symlinked to a non-standard location. Check filesystem type 1234df -T /Filesystem Type 1K-blocks Used Available Use% Mounted on/dev/nvme0n1p4 ext4 669754920 44435324 591224492 7% / The system is installed on an ext4 partition Check symlinks 123456789ls -l /home/hsiangjenli/Documents/githubdrwxrwxr-x 10 hsiangjenli hsiangjenli 4096 一 27 17:05 blogdrwxrwxr-x 11 hsiangjenli hsiangjenli 4096 三 28 17:03 default-of-credit-card-clients-mlopsdrwxrwxr-x 8 hsiangjenli hsiangjenli 4096 一 29 16:40 hsiangjenli.github.iodrwxrwxr-x 5 hsiangjenli hsiangjenli 4096 三 27 14:28 java-from-pythondrwxrwxr-x 4 hsiangjenli hsiangjenli 4096 一 29 17:19 pic-beddrwxrwxr-x 11 hsiangjenli hsiangjenli 4096 二 16 08:44 python-package-templatedrwxrwxr-x 6 hsiangjenli hsiangjenli 4096 一 27 17:25 star-to-review These folders are not symlinks Why this happened I don’t know … Solution Surprisingly, running the following command resolved the issue: 1sudo dpkg-reconfigure apparmor Enter the target directory you want to use Restart the computer~~ 🔁 Key takeaways ✅ The error cannot fstatat canonical snap directory: Permission denied is often related to AppArmor restrictions ✅ Common causes include: The system or home directory using an NTFS partition The home directory being a symlink or located in a non-standard location 🔍 In this case: The system is on an ext4 partition — ✅ not NTFS. The home directory is not a symlink — ✅ not a symlink. ⚠️ The root cause remains unclear 🛠 The issue was resolved with the following steps: Run sudo dpkg-reconfigure apparmor During setup, enter the actual path of the home directory Reboot the system 🔗 References ‘Permission denied’ when running snap applications on Ubuntu 16.04 as a LDAP user Permission denied error when running apps installed as snap packages - Ubuntu 17.04","link":"/blog/note_snap_permission_denied/"},{"title":"[tutorial] 使用 Mailgun + Python 發送電子郵件","text":"註記：此頁為由 AI（gpt-5-mini-2025-08-07）自動翻譯自英文原文，可能含有少量不準確之處。 📌 介紹 這篇教學說明如何使用 Mailgun 與 Python 發送電子郵件。您將學會如何設定 Mailgun、產生 API 金鑰，並撰寫 Python 程式碼以發送有附件或無附件的電子郵件。 🚀 快速開始 Mailgun Mailgun 提供免費方案，每日最多可發送 100 封電子郵件。 以下是您需要做的三件事 產生 Mailgun API 金鑰 記下您的 Mailgun 網域名稱（用於發送電子郵件） 將您的電子郵件加入 Mailgun（Mailgun 只允許發送郵件給授權的收件人） 建立 API 金鑰 從 Mailgun 取得您的網域 設定電子郵件並驗證 將您的電子郵件加入 Mailgun 檢查您的郵箱以完成驗證 Python To see the entire code : mailgun/demo.py 12345MAILGUN_API_KEY = os.getenv(&quot;MAILGUN_API_KEY&quot;)MAILGUN_DOMAIN_NAME = os.getenv(&quot;MAILGUN_DOMAIN_NAME&quot;)MAILGUN_API_URL = ( f&quot;https://api.mailgun.net/v3/{MAILGUN_DOMAIN_NAME}.mailgun.org/messages&quot;) 1234567891011@error_handler_for_send_emaildef send_email(from_email: str, to_email: Union[str, list], subject: str, text: str): # Define the email parameters email_data = {&quot;from&quot;: from_email, &quot;to&quot;: to_email, &quot;subject&quot;: subject, &quot;text&quot;: text} # Send the email r = requests.post( url=MAILGUN_API_URL, auth=(&quot;api&quot;, MAILGUN_API_KEY), data=email_data ) return r 1234567891011121314151617181920212223@error_handler_for_send_emaildef send_email_with_attachment( from_email: str, to_email: Union[str, list], subject: str, text: str, attachment_paths: list,): # Define the email parameters email_data = {&quot;from&quot;: from_email, &quot;to&quot;: to_email, &quot;subject&quot;: subject, &quot;text&quot;: text} # Read the attachment files = [ (&quot;attachment&quot;, open(attachment_path, &quot;rb&quot;)) for attachment_path in attachment_paths ] # Send the email r = requests.post( url=MAILGUN_API_URL, auth=(&quot;api&quot;, MAILGUN_API_KEY), data=email_data, files=files ) return r Gmail 從 Mailgun 發送郵件後，您可以檢查收件箱。郵件可能會被標記為垃圾郵件，請查看垃圾郵件資料夾是否有該郵件。 🔁 重點回顧 Mailgun 設定：產生 API 金鑰、取得您的網域名稱，並驗證您的電子郵件 Python 整合：使用 Mailgun API 與 Python 程式化發送電子郵件 發送附件：學會如何使用 Mailgun API 發送附加檔案的郵件 🔗 參考資料 https://www.mailgun.com/blog/it-and-engineering/send-email-using-python/ https://stackoverflow.com/questions/53861582/sent-email-via-python-using-mailgun-api","link":"/blog/tutorial-using-mailgun-python-to-send-email.zh-TW/"},{"title":"[tutorial] Send Email with Mailgun + Python","text":"Note: This page is an AI-generated (gpt-5-mini-2025-08-07) translation from Traditional Chinese and may contain minor inaccuracies. Note: This page was automatically translated from the original English by AI (gpt-5-mini-2025-08-07) and may contain minor inaccuracies. 📌 Introduction This tutorial explains how to send emails using Mailgun and Python. You will learn how to set up Mailgun, generate an API key, and write Python code to send emails with or without attachments. 🚀 Quick Start Mailgun Mailgun offers a free plan, allowing up to 100 emails per day. Here are the three things you need to do Generate a Mailgun API key Note your Mailgun domain name (used for sending emails) Add your email to Mailgun (Mailgun only allows sending to authorized recipients) Create an API key Obtain your Mailgun domain Set up and verify your email Add your email to Mailgun Check your mailbox to complete verification Python To see the entire code : mailgun/demo.py 12345MAILGUN_API_KEY = os.getenv(&quot;MAILGUN_API_KEY&quot;)MAILGUN_DOMAIN_NAME = os.getenv(&quot;MAILGUN_DOMAIN_NAME&quot;)MAILGUN_API_URL = ( f&quot;https://api.mailgun.net/v3/{MAILGUN_DOMAIN_NAME}.mailgun.org/messages&quot;) 1234567891011@error_handler_for_send_emaildef send_email(from_email: str, to_email: Union[str, list], subject: str, text: str): # Define the email parameters email_data = {&quot;from&quot;: from_email, &quot;to&quot;: to_email, &quot;subject&quot;: subject, &quot;text&quot;: text} # Send the email r = requests.post( url=MAILGUN_API_URL, auth=(&quot;api&quot;, MAILGUN_API_KEY), data=email_data ) return r 1234567891011121314151617181920212223@error_handler_for_send_emaildef send_email_with_attachment( from_email: str, to_email: Union[str, list], subject: str, text: str, attachment_paths: list,): # Define the email parameters email_data = {&quot;from&quot;: from_email, &quot;to&quot;: to_email, &quot;subject&quot;: subject, &quot;text&quot;: text} # Read the attachment files = [ (&quot;attachment&quot;, open(attachment_path, &quot;rb&quot;)) for attachment_path in attachment_paths ] # Send the email r = requests.post( url=MAILGUN_API_URL, auth=(&quot;api&quot;, MAILGUN_API_KEY), data=email_data, files=files ) return r Gmail After sending mail from Mailgun, you can check the inbox. The message may be marked as spam; please check the spam folder for the email. 🔁 Key takeaways Mailgun setup: generate an API key, obtain your domain name, and verify your email Python integration: use the Mailgun API and Python to programmatically send emails Sending attachments: learn how to use the Mailgun API to send emails with attachments 🔗 References https://www.mailgun.com/blog/it-and-engineering/send-email-using-python/ https://stackoverflow.com/questions/53861582/sent-email-via-python-using-mailgun-api","link":"/blog/tutorial_mailgun_python/"},{"title":"[note] 策略性思考模型","text":"註記：此頁為由 AI（gpt-5-mini-2025-08-07）自動翻譯自英文原文，可能含有少量不準確之處。 📌 介紹 “ 開啟心智，構築思維 ” 🚀 曼陀羅九宮格 🚀 心流八通道","link":"/blog/note-strategic-thinking-models.zh-TW/"},{"title":"[note] Strategic Thinking Model","text":"Note: This page is an AI-generated (gpt-5-mini-2025-08-07) translation from Traditional Chinese and may contain minor inaccuracies. Note: This page was automatically translated from the original English by AI (gpt-5-mini-2025-08-07) and may contain minor inaccuracies. 📌 Introduction “Open the mind, build thinking” 🚀 Mandala Nine-Grid 🚀 Flow: Eight Channels","link":"/blog/note_strategic_thinking_models/"},{"title":"[教學] GitHub + PicGo + VSCode 擴充套件","text":"註記：此頁為由 AI（gpt-5-mini-2025-08-07）自動翻譯自英文原文，可能含有少量不準確之處。 📌 介紹 本文提供設定 GitHub、PicGo 與 VSCode 擴充套件的教學，以方便將圖片上傳至 GitHub 儲存庫。說明必要的前置準備、產生 GitHub 權杖的流程，及在 VSCode 配置 PicGo 擴充套件的要點。 🚀 快速開始 開始之前 請確認你具備： 可存取你的儲存庫的 GitHub 權杖 用來存放圖片的儲存庫 GitHub 產生 GitHub 權杖 前往 Settings/Developer settings/Personal access tokens/Token (classic) 點選 Generate new token (classic) 為權杖設定易於辨識的名稱，並選擇 No expiration 選取該權杖所需的權限範圍 設定儲存庫 為確保你的圖片能被存取，將儲存庫設定為 public。 VSCode 擴充套件 在 VSCode 安裝 PicGo 擴充套件 將 Pic Bed: Current 設為 github 將 Pic Bed &gt; Github: Repo 設為你先前建立的公開儲存庫。格式為 {username}/{repo_name} 將 Pic Bed: Uploader 設為 github 將 Pic Bed &gt; Github: Branch 設為你公開儲存庫的分支 設定 Pic Bed &gt; Github: Path（選用）。若你希望將圖片存放於特定資料夾（例如 images），請確保包含尾端斜線（/），否則該值會被當作圖片名稱的前綴。 將 Pic Bed &gt; Github: Token 設為你先前建立的 GitHub 權杖 疑難排解 若你看到下列錯誤，表示系統尚未安裝 xclip： 1PicGo: xclip not found! Please install xclip before run picgo. 要修復此問題，請使用下列指令安裝 xclip： 1sudo apt install xclip 🔁 重點回顧 你需要一個 GitHub 權杖與一個公開儲存庫來存放圖片。 在 VSCode 安裝 PicGo 擴充套件以便上傳圖片。 依照 PicGo 擴充套件中的設定步驟將其與 GitHub 連結。 可能遇到的問題包含確認系統是否已安裝 xclip。","link":"/blog/tutorial-github-picgo-vscode-extension.zh-TW/"},{"title":"[Tutorial] GitHub + PicGo + VSCode Extension","text":"Note: This page is an AI-generated (gpt-5-mini-2025-08-07) translation from Traditional Chinese and may contain minor inaccuracies. Note: This page was automatically translated from the original English by AI (gpt-5-mini-2025-08-07) and may contain minor inaccuracies. 📌 Introduction This article provides a tutorial for setting up GitHub, PicGo, and the VSCode extension to easily upload images to a GitHub repository. It explains the necessary prerequisites, the process to generate a GitHub token, and key points for configuring the PicGo extension in VSCode. 🚀 Quick Start Before you begin Make sure you have: A GitHub token with access to your repository A repository to store images GitHub Generating a GitHub token Go to Settings/Developer settings/Personal access tokens/Token (classic) Click Generate new token (classic) Set a recognizable name for the token and choose No expiration Select the scopes/permissions required for the token Configure the repository Set the repository to public to ensure your images can be accessed. VSCode Extension Install the PicGo extension in VSCode Set Pic Bed: Current to github Set Pic Bed &gt; Github: Repo to the public repository you created. Format: {username}/{repo_name} Set Pic Bed: Uploader to github Set Pic Bed &gt; Github: Branch to the branch of your public repository Configure Pic Bed &gt; Github: Path (optional). If you want images stored in a specific folder (e.g., images), make sure to include a trailing slash (/); otherwise the value will be treated as a prefix of the image name. Set Pic Bed &gt; Github: Token to the GitHub token you created earlier Troubleshooting If you see the following error, it means xclip is not installed on your system: 1PicGo: xclip not found! Please install xclip before run picgo. To fix this, install xclip using the following command: 1sudo apt install xclip 🔁 Key takeaways You need a GitHub token and a public repository to store images. Install the PicGo extension in VSCode to upload images. Link PicGo with GitHub by following the settings in the PicGo extension. A possible issue is ensuring xclip is installed on your system.","link":"/blog/tutorial_github_picgo_vscode/"},{"title":"[note] Windows 11 + Ubuntu dual-boot installation record","text":"Note: This page is an AI-generated (gpt-5-mini-2025-08-07) translation from Traditional Chinese and may contain minor inaccuracies. 💻 Procedure 🚨 Notes / Precautions According to online tutorials, most changes are made in the BIOS menu However, some manufacturers disable these options (to prevent users from damaging the computer) That makes changes more troublesome and may end up requiring a Windows reset, so back up your PC Turn off BitLocker Ensure BIOS is updated to the latest version The latest BIOS usually includes bug fixes and improved hardware compatibility, which helps avoid unnecessary installation issues Set the BIOS Boot Mode to UEFI UEFI is the modern standard boot mode with better disk partition support, faster booting, and security features. Both Ubuntu and Windows recommend UEFI rather than legacy BIOS (CSM) Disable Secure Boot Secure Boot prevents unauthorized operating systems from booting, but some Ubuntu releases or custom drivers may fail verification and cause installation to fail In the BIOS find the Secure Boot setting and set it to Disabled Disable Fast Boot (BIOS &amp; Windows Control Panel) Fast Boot skips some hardware initialization and may prevent the USB installer from being detected, affecting the Ubuntu installation In the BIOS find Fast Boot and set it to Disabled In Windows Control Panel under Hardware and Sound → Power Options, turn off Fast Startup Ensure SATA Configuration is set to AHCI mode (this is the most likely place for problems; some BIOS may not allow changing this) It must not be RAID Disable CSM (Compatibility Support Module) CSM provides compatibility for legacy BIOS; disabling it makes the system focus on UEFI booting and reduces potential compatibility issues In the BIOS find CSM and set it to Disabled Step 1 Disk partitioning First, partition the disk in Windows to separate Windows and Ubuntu Search on the PC for Create and format hard disk partitions Step 2 Turn off fast startup Windows - Fast Startup BIOS - Fast Boot Windows In Windows Control Panel, find the power management options and turn off Fast Startup Step 3 Remove drivers related to Intel RST [1] This step can cause the computer to fail to boot, requiring a full system reset (you need a strong heart 💔💔💔…) However, only after resetting can you turn off RST (change the disk from RAID to AHCI); otherwise Ubuntu won’t detect this SSD during installation Press Win + X and open Device Manager Go to Storage Controllers, where you’ll see the Intel RST driver This is the culprit that prevents the SSD from being detected during Ubuntu installation!!! Please follow the steps in Ubuntu Documentation - RST &amp; Ubuntu installation to uninstall the Intel RST driver step by step Press Win + R, search for regedit HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\iaStorV\\ Find Start and change its value to 0 Find StartOverride and change its value to 0 HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\storahci\\ Find Start and change its value to 0 Find StartOverride and change its value to 0 Uninstall the Intel RST driver Completely uninstall the Intel RST driver, then reboot During the reboot you may see a blue screen showing INACCESSIBLE_BOOT_DEVICE; the fix is to reset the entire computer After resetting Press Win + X again, open Device Manager and check Storage Controllers to confirm whether Intel RST is still present Step 4 Install Ubuntu Install Ubuntu using a USB drive Press F12 to choose the USB drive as the boot device Since the partitions were pre-created, choose Installation Type → Something else Proceed through the installer; there should be no major issues afterwards Driver issues In past desktop and older laptop installs I didn’t encounter Wi-Fi driver issues But this VivoBook had a problem; the fastest solution was to buy a Linux-compatible USB Wi-Fi adapter TP-Link TL-WN725N22 Glossary CSM - Compatibility Support Module Intel RST - Intel Rapid Storage Technology Ubuntu Documentation - RST &amp; Ubuntu installation https://help.ubuntu.com/rst/ ↩︎","link":"/blog/note-window-11-ubuntu.en/"},{"title":"[note] Windows 11 + Ubuntu 雙重開機安裝紀錄","text":"註記：此頁為由 AI（gpt-5-mini-2025-08-07）自動翻譯自英文原文，可能含有少量不準確之處。 注意：此頁面為 AI 生成（gpt-5-mini-2025-08-07）之繁體中文翻譯，可能包含些微錯誤。 🎒 準備工作 💻 電腦資訊 型號: VivoBook 14 X1405VA-0041K 作業系統: Windows 11 處理器: i5-13500H SSD: NVMe SAMSUNG MZVL4512HBLU-00BTW BIOS 進入鍵: F2 開機裝置選擇鍵: F12 🎯 目標 目前 SSD 已安裝 Windows 11。目標是將 1 TB SSD 分割出分割區並安裝 Ubuntu 20.04 LTS。 - 350 GB - 650 GB 💻 步驟 🚨 注意 / 預防事項 根據線上教學，大多數更改是在 BIOS 選單中進行 但有些廠商會禁用這些選項（以防使用者誤傷電腦） 這會讓更改變得麻煩，並可能最終需要重置 Windows，所以請備份你的電腦 關閉 BitLocker 確保 BIOS 已更新到最新版本 最新的 BIOS 通常包含錯誤修正與較佳的硬體相容性，有助避免不必要的安裝問題 將 BIOS 開機模式設為 UEFI UEFI 是現代標準的開機模式，具有更佳的磁碟分割支援、更快的開機與安全性功能。Ubuntu 與 Windows 都建議使用 UEFI 而非傳統 BIOS（CSM）。 關閉 Secure Boot Secure Boot 會防止未經授權的作業系統開機，但某些 Ubuntu 版本或自訂驅動可能無法通過驗證，導致安裝失敗 在 BIOS 中找到 Secure Boot 設定並設為 Disabled（停用） 關閉 Fast Boot（BIOS 與 Windows 控制台） Fast Boot 會略過部分硬體初始化，可能導致 USB 安裝碟無法被偵測，影響 Ubuntu 安裝 在 BIOS 中找到 Fast Boot 並設為 Disabled 在 Windows 控制台的「硬體與音效 → 電源選項」中關閉 Fast Startup（快速啟動） 確保 SATA 設定為 AHCI 模式（這是最可能出問題的地方；某些 BIOS 可能不允許更改） 它不能是 RAID 關閉 CSM（相容性支援模組） CSM 提供傳統 BIOS 相容性；關閉它可讓系統專注於 UEFI 開機並降低潛在相容性問題 在 BIOS 中找到 CSM 並設為 Disabled 第一步：磁碟分割 先在 Windows 中分割磁碟以區分 Windows 與 Ubuntu 在電腦上搜尋 Create and format hard disk partitions 步驟 2 關閉快速啟動 Windows — 關閉 Fast Startup BIOS — 關閉 Fast Boot Windows 在 Windows 控制台中，找到電源管理選項並關閉快速啟動（Fast Startup） 步驟 3 移除與 Intel RST 相關的驅動程式 [1] 這個步驟可能會導致電腦無法啟動，需要重置整台系統（你要有心理準備 💔💔💔…） 但只有在重置之後你才能關閉 RST（將磁碟從 RAID 改為 AHCI）；否則 Ubuntu 在安裝時無法偵測到這顆 SSD 按 Win + X 開啟 裝置管理員 到 Storage Controllers，在那裡你會看到 Intel RST 驅動程式 這就是導致 Ubuntu 安裝時無法偵測 SSD 的禍首!!! 請依照 Ubuntu Documentation - RST &amp; Ubuntu installation 的步驟逐步解除安裝 Intel RST 驅動程式 按 Win + R，搜尋 regedit HKEY_LOCAL_MACHINE\\\\SYSTEM\\\\CurrentControlSet\\\\Services\\\\iaStorV\\\\ 找到 Start 並將其值改為 0 找到 StartOverride 並將其值改為 0 HKEY_LOCAL_MACHINE\\\\SYSTEM\\\\CurrentControlSet\\\\Services\\\\storahci\\\\ 找到 Start 並將其值改為 0 找到 StartOverride 並將其值改為 0 解除安裝 Intel RST 驅動程式 完全解除安裝 Intel RST 驅動，然後重新啟動 在重新啟動期間你可能會看到藍屏顯示 INACCESSIBLE_BOOT_DEVICE；解法是重置整台電腦 重置後 再次按 Win + X，開啟裝置管理員並檢查 Storage Controllers，確認 Intel RST 是否仍在 步驟 4 安裝 Ubuntu 使用 USB 安裝 Ubuntu 按 F12 選擇 USB 隨身碟為開機裝置 由於分割區已預先建立，安裝類型選擇 → Something else（其他） 照著安裝程式繼續安裝；之後應該不會有重大問題 驅動程式問題 以往在桌機與較舊筆電安裝時，我沒有遇到 Wi‑Fi 驅動問題 但這台 VivoBook 出了問題；最快的解法是買一個相容 Linux 的 USB 無線網卡 TP-Link TL-WN725N22 術語表 CSM - 相容性支援模組 Intel RST - Intel 快速儲存技術 Ubuntu 文件 - RST 與 Ubuntu 安裝 https://help.ubuntu.com/rst/ ↩︎","link":"/blog/note_chinese_u2004_win11/"},{"title":"[注意] 想要使用 pip 從 GitHub 倉庫安裝最新版本","text":"註記：此頁為由 AI（gpt-5-mini-2025-08-07）自動翻譯自英文原文，可能含有少量不準確之處。 📌 介紹 本文說明如何使用 pip 安裝 GitHub 倉庫的特定分支，特別著重於通常用於開發而非穩定發行的 ‘devel’ 分支。 🚀 快速開始 要使用 pip 從 GitHub 安裝開發版本，執行下列命令： 1pip install git+https://github.com/username/repository.git@devel 🔁 總結 可以使用 pip 從 GitHub 安裝特定分支。 ‘devel’ 分支通常包含不穩定的開發版本。 要安裝，使用命令格式：pip install git+{repo_url}@{branch_name}。 將 {repo_url} 替換為你的倉庫 URL，將 {branch_name} 替換為 ‘devel’。 確保已安裝 pip 以使用此命令。","link":"/blog/note-want-to-install-the-latest-version-from-a-github-repo-using-pip.zh-TW/"},{"title":"[Note] Want to install the latest version from a GitHub repository using pip","text":"Note: This page is an AI-generated (gpt-5-mini-2025-08-07) translation from Traditional Chinese and may contain minor inaccuracies. Note: This page was automatically translated from the original English by AI (gpt-5-mini-2025-08-07) and may contain minor inaccuracies. 📌 Introduction This document explains how to use pip to install a specific branch of a GitHub repository, with a focus on the ‘devel’ branch, which is typically used for development rather than stable releases. 🚀 Quick Start To install the development version from GitHub using pip, run the following command: 1pip install git+https://github.com/username/repository.git@devel 🔁 Summary You can use pip to install a specific branch from GitHub. The ‘devel’ branch typically contains unstable development versions. To install, use the command format: pip install git+{repo_url}@{branch_name}. Replace {repo_url} with your repository URL and {branch_name} with ‘devel’. Make sure pip is installed to use this command.","link":"/blog/note_pip_github_branch/"},{"title":"[註記] FISH？","text":"註記：此頁為由 AI（gpt-5-mini-2025-08-07）自動翻譯自英文原文，可能含有少量不準確之處。 📌 介紹 This article introduces the FISH shell, a user-friendly interactive shell designed to improve the command line experience. It highlights its installation on MacOS and basic usage. 🚀 快速開始 在 MacOS 上安裝 1brew install fish 使用 FISH Shell 透過輸入 fish 即可進入 FISH 的 shell 🔁 重點回顧 FISH 是一個友善的互動式 shell，可提升命令列使用體驗。 在 MacOS 上可使用 Homebrew 透過 brew install fish 指令安裝。 要開始使用 FISH，只需在終端機輸入 fish。 🔗 參考資料 如何在 Linux 中安裝、配置和使用 Fish Shell？ 終於，為 90 年代的命令列 shell","link":"/blog/note-fish.zh-TW/"},{"title":"[Note] FISH?","text":"Note: This page is an AI-generated (gpt-5-mini-2025-08-07) translation from Traditional Chinese and may contain minor inaccuracies. Note: This page was automatically translated from the original English by AI (gpt-5-mini-2025-08-07) and may contain minor inaccuracies. 📌 Introduction This article introduces the FISH shell, a user-friendly interactive shell designed to improve the command line experience. It highlights its installation on MacOS and basic usage. 🚀 Quick Start Installing on MacOS 1brew install fish Using the FISH Shell Enter the FISH shell by typing fish 🔁 Key Takeaways FISH is a friendly interactive shell that enhances the command-line experience. On MacOS, you can install it via Homebrew using brew install fish. To start using FISH, just type fish in the terminal. 🔗 References How do I install, configure, and use Fish Shell in Linux? Finally, a command line shell for the 90s","link":"/blog/note_fish/"},{"title":"[note] MarkItDown：一個用於將 docx 與 pptx 順利轉換為 markdown 的工具","text":"註記：此頁為由 AI（gpt-5-mini-2025-08-07）自動翻譯自英文原文，可能含有少量不準確之處。 📌 介紹 本文討論 MarkItDown，一個專門設計用於將 docx 與 pptx 檔案輕鬆轉換成 Markdown 格式的工具。文章介紹了用於此轉換流程的各種 Python 套件，讓使用者能有效處理文件與多媒體內容。 🚀 快速開始 MarkItDown 如何運作？ 以下是 MarkItDown 所使用的模組 12345678910111213141516dependencies = [ &quot;beautifulsoup4&quot;, &quot;requests&quot;, &quot;mammoth&quot;, &quot;markdownify&quot;, &quot;numpy&quot;, &quot;python-pptx&quot;, &quot;pandas&quot;, &quot;openpyxl&quot;, &quot;pdfminer.six&quot;, &quot;puremagic&quot;, &quot;pydub&quot;, &quot;youtube-transcript-api&quot;, &quot;SpeechRecognition&quot;, &quot;pathvalidate&quot;,] mammoth https://pypi.org/project/mammoth/ Mammoth 是一個用於將像 MS Word、Google Docs 與 LibreOffice 等文件轉換為 HTML 的工具 python-pptx https://github.com/scanny/python-pptx 一個可以建立/讀取/更新 .pptx 檔案的 Python 函式庫 openpyxl https://openpyxl.readthedocs.io/en/stable/ 一個用於讀寫 Excel 2010 xlsx、xlsm、xltx、xltm 檔案的 Python 函式庫 pdfminer https://github.com/pdfminer/pdfminer.six Pdfminer.six 是一個由社群維護、從原始 PDFMiner 分支出來的版本。此模組可協助使用者從 PDF 檔案中擷取資訊。 pydub https://github.com/jiaaro/pydub 以簡單的方式讓你輕鬆操作音訊 youtube-transcript-api https://github.com/jdepoix/youtube-transcript-api 一個 Python API，可取得指定 YouTube 影片的逐字稿 SpeechRecognition https://github.com/Uberi/speech_recognition/tree/master 支援像 Google Cloud Speech API、Wit.ai、Whisper 等語音轉文字引擎 markdownify https://github.com/matthewwithanm/python-markdownify 將 HTML 轉換為 Markdown pathvalidate https://github.com/thombashi/pathvalidate 一個用於清理與驗證字串（例如檔名、檔案路徑等）的 Python 函式庫 puremagic https://github.com/cdgriffith/puremagic/tree/master Puremagic 是一個檔案類型檢測工具，可以在不依賴副檔名的情況下辨識輸入檔案的類型。由於副檔名很容易被更改，單靠它們來識別檔案類型可能有風險。該模組定義了一組規則，以讀取檔案內容並判定其類型。 123456789101112131415# puremagic/magic_data.json{ &quot;extension_only&quot;: [ [&quot;&quot;, 0, &quot;.txt&quot;, &quot;text/plain&quot;, &quot;Text File&quot;], [&quot;&quot;, 0, &quot;.log&quot;, &quot;text/plain&quot;, &quot;Logger File&quot;], [&quot;&quot;, 0, &quot;.yaml&quot;, &quot;application/x-yaml&quot;, &quot;YAML File&quot;], [&quot;&quot;, 0, &quot;.yml&quot;, &quot;application/x-yaml&quot;, &quot;YAML File&quot;], [&quot;&quot;, 0, &quot;.toml&quot;, &quot;application/toml&quot;, &quot;TOML File&quot;], [&quot;&quot;, 0, &quot;.py&quot;, &quot;text/x-python&quot;, &quot;Python File&quot;], [&quot;&quot;, 0, &quot;.pyc&quot;, &quot;application/x-python&quot;, &quot;Python Complied File&quot;], [&quot;&quot;, 0, &quot;.pyd&quot;, &quot;application/x-python&quot;, &quot;Python Complied File&quot;], [&quot;&quot;, 0, &quot;.python_history&quot;, &quot;text/plain&quot;, &quot;Python History File&quot;], [&quot;&quot;, 0, &quot;.bat&quot;, &quot;application/x-script&quot;, &quot;Windows BAT file&quot;], [&quot;&quot;, 0, &quot;.gitconfig&quot;, &quot;text/plain&quot;, &quot;Git Ignore File&quot;],... 🔁 重點回顧 MarkItDown 允許將 docx 與 pptx 檔案順利轉換為 Markdown 格式。 此轉換需要各種相依套件，包括用於處理文件、音訊與資料的函式庫。 每個提到的函式庫都有其特定功能，例如將 Word 文件轉為 HTML 或讀取 Excel 檔案。 🔗 參考資料 https://pypi.org/project/mammoth/ https://github.com/scanny/python-pptx https://openpyxl.readthedocs.io/en/stable/ https://github.com/pdfminer/pdfminer.six https://github.com/jiaaro/pydub https://github.com/jdepoix/youtube-transcript-api https://github.com/Uberi/speech_recognition/tree/master https://github.com/matthewwithanm/python-markdownify https://github.com/thombashi/pathvalidate https://github.com/cdgriffith/puremagic/tree/master","link":"/blog/note-markitdown-a-tool-for-smoothly-converting-docx-and-pptx-into-markdown.zh-TW/"},{"title":"[note] MarkItDown: A tool for smoothly converting docx and pptx to markdown","text":"Note: This page is an AI-generated (gpt-5-mini-2025-08-07) translation from Traditional Chinese and may contain minor inaccuracies. Note: This page was automatically translated from the original English by AI (gpt-5-mini-2025-08-07) and may contain minor inaccuracies. 📌 Introduction This article discusses MarkItDown, a tool specifically designed to convert docx and pptx files into Markdown format with ease. The article introduces various Python packages used in this conversion workflow, enabling users to effectively handle documents and multimedia content. 🚀 Quick Start How MarkItDown works Below are the modules used by MarkItDown 12345678910111213141516dependencies = [ &quot;beautifulsoup4&quot;, &quot;requests&quot;, &quot;mammoth&quot;, &quot;markdownify&quot;, &quot;numpy&quot;, &quot;python-pptx&quot;, &quot;pandas&quot;, &quot;openpyxl&quot;, &quot;pdfminer.six&quot;, &quot;puremagic&quot;, &quot;pydub&quot;, &quot;youtube-transcript-api&quot;, &quot;SpeechRecognition&quot;, &quot;pathvalidate&quot;,] mammoth https://pypi.org/project/mammoth/ Mammoth is a tool for converting documents such as MS Word, Google Docs, and LibreOffice to HTML. python-pptx https://github.com/scanny/python-pptx A Python library for creating/reading/updating .pptx files openpyxl https://openpyxl.readthedocs.io/en/stable/ A Python library for reading/writing Excel 2010 xlsx, xlsm, xltx, xltm files pdfminer https://github.com/pdfminer/pdfminer.six Pdfminer.six is a community-maintained fork of the original PDFMiner. This module helps users extract information from PDF files. pydub https://github.com/jiaaro/pydub Lets you manipulate audio in an easy way youtube-transcript-api https://github.com/jdepoix/youtube-transcript-api A Python API to retrieve transcripts of specified YouTube videos. SpeechRecognition https://github.com/Uberi/speech_recognition/tree/master Supports speech-to-text engines such as Google Cloud Speech API, Wit.ai, Whisper, etc. markdownify https://github.com/matthewwithanm/python-markdownify Converts HTML to Markdown pathvalidate https://github.com/thombashi/pathvalidate A Python library for sanitizing and validating strings (such as filenames, file paths, etc.) puremagic https://github.com/cdgriffith/puremagic/tree/master Puremagic is a file type detection tool that can identify the type of an input file without relying on file extensions. Since extensions can be easily changed, relying on them alone to identify file types can be risky. The module defines a set of rules to read file contents and determine their type. 123456789101112131415# puremagic/magic_data.json{ &quot;extension_only&quot;: [ [&quot;&quot;, 0, &quot;.txt&quot;, &quot;text/plain&quot;, &quot;Text File&quot;], [&quot;&quot;, 0, &quot;.log&quot;, &quot;text/plain&quot;, &quot;Logger File&quot;], [&quot;&quot;, 0, &quot;.yaml&quot;, &quot;application/x-yaml&quot;, &quot;YAML File&quot;], [&quot;&quot;, 0, &quot;.yml&quot;, &quot;application/x-yaml&quot;, &quot;YAML File&quot;], [&quot;&quot;, 0, &quot;.toml&quot;, &quot;application/toml&quot;, &quot;TOML File&quot;], [&quot;&quot;, 0, &quot;.py&quot;, &quot;text/x-python&quot;, &quot;Python File&quot;], [&quot;&quot;, 0, &quot;.pyc&quot;, &quot;application/x-python&quot;, &quot;Python Complied File&quot;], [&quot;&quot;, 0, &quot;.pyd&quot;, &quot;application/x-python&quot;, &quot;Python Complied File&quot;], [&quot;&quot;, 0, &quot;.python_history&quot;, &quot;text/plain&quot;, &quot;Python History File&quot;], [&quot;&quot;, 0, &quot;.bat&quot;, &quot;application/x-script&quot;, &quot;Windows BAT file&quot;], [&quot;&quot;, 0, &quot;.gitconfig&quot;, &quot;text/plain&quot;, &quot;Git Ignore File&quot;],... 🔁 Key takeaways MarkItDown enables smooth conversion of docx and pptx files to Markdown format. This conversion requires various dependencies, including libraries for handling documents, audio, and data. Each mentioned library has a specific role, such as converting Word documents to HTML or reading Excel files. 🔗 References https://pypi.org/project/mammoth/ https://github.com/scanny/python-pptx https://openpyxl.readthedocs.io/en/stable/ https://github.com/pdfminer/pdfminer.six https://github.com/jiaaro/pydub https://github.com/jdepoix/youtube-transcript-api https://github.com/Uberi/speech_recognition/tree/master https://github.com/matthewwithanm/python-markdownify https://github.com/thombashi/pathvalidate https://github.com/cdgriffith/puremagic/tree/master","link":"/blog/note_markitdown/"},{"title":"[note] 修復 apache&#x2F;airflow:2.10.2 Docker 映像中的 Git 安裝問題","text":"註記：此頁為由 AI（gpt-5-mini-2025-08-07）自動翻譯自英文原文，可能含有少量不準確之處。 📌 介紹 本文討論在使用 apache/airflow:2.10.2 Docker 映像時，嘗試從 GitHub 安裝套件會遇到權限錯誤的問題。提出的解決方案是暫時切換到 root 使用者來安裝 ‘git’，然後再切換回 airflow 使用者進行後續安裝。 🚀 快速開始 12345678FROM apache/airflow:slim-2.10.2USER rootRUN apt-get update &amp;&amp; apt-get install -y gitUSER airflowCOPY requirements.txt requirements.txtRUN pip install --no-cache-dir -r requirements.txt 🔁 重點回顧 在使用 apache/airflow:2.10.2 映像從 GitHub 安裝套件時，可能會發生權限錯誤。 為了解決此問題，在切回 airflow 使用者之前，請以 root 身份安裝 git。 所提供的 Dockerfile 示範了執行這些步驟的方法。","link":"/blog/note-fixing-git-installation-issues-in-apache-airflow-2-10-2-docker-image.zh-TW/"},{"title":"[note] Fix Git installation issue in apache&#x2F;airflow:2.10.2 Docker image","text":"Note: This page is an AI-generated (gpt-5-mini-2025-08-07) translation from Traditional Chinese and may contain minor inaccuracies. Note: This page was automatically translated from the original English by AI (gpt-5-mini-2025-08-07) and may contain minor inaccuracies. 📌 Introduction This article discusses an issue where attempting to install packages from GitHub using the apache/airflow:2.10.2 Docker image encounters permission errors. The proposed solution is to temporarily switch to the root user to install ‘git’, then switch back to the airflow user for subsequent installations. 🚀 Quick Start 12345678FROM apache/airflow:slim-2.10.2USER rootRUN apt-get update &amp;&amp; apt-get install -y gitUSER airflowCOPY requirements.txt requirements.txtRUN pip install --no-cache-dir -r requirements.txt 🔁 Recap Permission errors may occur when installing packages from GitHub using the apache/airflow:2.10.2 image. To resolve this, install git as root before switching back to the airflow user. The provided Dockerfile demonstrates how to perform these steps.","link":"/blog/note_airflow_docker_permission_error/"},{"title":"[note] 使用 TypedDict 提升程式碼清晰度","text":"註記：此頁為由 AI（gpt-5-mini-2025-08-07）自動翻譯自英文原文，可能含有少量不準確之處。 📌 介紹 本文探討在 Python 中使用 TypedDict 來儲存複雜資料時，如何提升程式碼清晰度。說明 TypedDict 如何透過 IDE 提供建議來協助開發者，同時也指出其在嚴格型別強制方面的侷限。 🚀 快速開始 12345678from typing import TypedDictimport datetimeclass News(TypedDict): title: str create_date: datetime.datetime content: str 🔁 重點回顧 TypedDict 在使用預先定義欄位時，有助於維持程式碼清晰度。 它透過提供 IDE 建議來提升開發效率。 TypedDict 存在一些限制，特別是在嚴格型別檢查方面。 🔗 參考資料 https://juejin.cn/post/7342790243009363977","link":"/blog/note-enhancing-code-clarity-with-typeddict.zh-TW/"},{"title":"[note] Using TypedDict to Improve Code Clarity","text":"Note: This page is an AI-generated (gpt-5-mini-2025-08-07) translation from Traditional Chinese and may contain minor inaccuracies. Note: This page was automatically translated from the original English by an AI (gpt-5-mini-2025-08-07) and may contain minor inaccuracies. 📌 Introduction This article explores how to use TypedDict in Python to store complex data and improve code clarity. It explains how TypedDict aids developers by offering IDE suggestions, and also points out its limitations regarding strict type enforcement. 🚀 Quick Start 12345678from typing import TypedDictimport datetimeclass News(TypedDict): title: str create_date: datetime.datetime content: str 🔁 Key Takeaways TypedDict helps maintain code clarity when using predefined fields. It improves developer efficiency by providing IDE suggestions. TypedDict has some limitations, especially regarding strict type checking. 🔗 References https://juejin.cn/post/7342790243009363977","link":"/blog/note_typedict/"},{"title":"[tutorial] 使用 commitollama 改善提交訊息：VSCode 與本地 LLM 整合指南","text":"註記：此頁為由 AI（gpt-5-mini-2025-08-07）自動翻譯自英文原文，可能含有少量不準確之處。 📌 介紹 本篇文章介紹 commitollama，一個用於生成提交訊息且以本地 LLM 為基礎的替代方案，適合需保護專案隱私的情境。本文說明在 VSCode 中安裝 commitollama 延伸功能的流程以及開始使用前的必要設定。 🚀 快速開始 使用方式 在 VSCode 中安裝此延伸功能。 安裝 Ollama，以整合 LLM。 安裝 Ollama 執行以下指令以安裝 Ollama： 1curl -fsSL https://ollama.com/install.sh | sh 安裝完成後，可執行 Ollama： 1ollama 這會顯示可用的指令列表： 12345678910111213141516171819202122Usage: ollama [flags] ollama [command]Available Commands: serve Start ollama create Create a model from a Modelfile show Show information for a model run Run a model pull Pull a model from a registry push Push a model to a registry list List models ps List running models cp Copy a model rm Remove a model help Help about any commandFlags: -h, --help help for ollama -v, --version Show version informationUse &quot;ollama [command] --help&quot; for more information about a command. 下載 Phi3 模型（3.8b），執行： 1ollama pull phi3:3.8b 啟動 Ollama 服務： 1ollama serve 如果你遇到錯誤訊息 Error: listen tcp 127.0.0.1:11434: bind: address already in use，可以在此處找到解法 here 。 要重新啟動 Ollama，先停止目前的服務再重新啟動： 12systemctl stop ollama.serviceollama serve 為避免模型在下載後被刪除，請參考此討論 here 。 在 VSCode 中設定 安裝延伸功能後，可使用自訂模型來生成提交訊息。 在介面中按下按鈕即可自動生成提交訊息。 🔁 小結 commitollama 是一個以隱私為重點、可替代 GitHub Copilot 的提交訊息生成工具。 該工具可使用 Llama、Mistral 和 Phi3 等開源 LLM。 可透過簡單的延伸功能安裝流程，輕鬆整合到 VSCode。 使用者可以輕鬆取得模型、執行服務並有效生成提交訊息。 🔗 參考資料 https://github.com/ollama/ollama/issues/707 https://github.com/ollama/ollama/issues/1493","link":"/blog/tutorial-enhancing-commit-messages-with-commitollama-a-guide-for-vscode-and-local-llm-integration.zh-TW/"},{"title":"[tutorial] Using commitollama to improve commit messages: VSCode and local LLM integration guide","text":"Note: This page is an AI-generated (gpt-5-mini-2025-08-07) translation from Traditional Chinese and may contain minor inaccuracies. Note: This page was automatically translated from the original English by AI (gpt-5-mini-2025-08-07) and may contain minor inaccuracies. 📌 Introduction This article introduces commitollama, a local-LLM-based alternative for generating commit messages, suitable for situations where project privacy must be protected. It explains the process of installing the commitollama extension in VSCode and the necessary setup before getting started. 🚀 Quick Start How to use Install the extension in VSCode. Install Ollama to integrate LLMs. Install Ollama Run the following command to install Ollama: 1curl -fsSL https://ollama.com/install.sh | sh After installation, you can run Ollama: 1ollama This will show a list of available commands: 12345678910111213141516171819202122Usage: ollama [flags] ollama [command]Available Commands: serve Start ollama create Create a model from a Modelfile show Show information for a model run Run a model pull Pull a model from a registry push Push a model to a registry list List models ps List running models cp Copy a model rm Remove a model help Help about any commandFlags: -h, --help help for ollama -v, --version Show version informationUse &quot;ollama [command] --help&quot; for more information about a command. Download the Phi3 model (3.8b) by running: 1ollama pull phi3:3.8b Start the Ollama service: 1ollama serve If you encounter the error Error: listen tcp 127.0.0.1:11434: bind: address already in use, you can find a solution here: https://github.com/ollama/ollama/issues/707. To restart Ollama, stop the current service and then restart: 12systemctl stop ollama.serviceollama serve To avoid models being deleted after download, see this discussion: https://github.com/ollama/ollama/issues/1493. Configuring in VSCode After installing the extension, you can use a custom model to generate commit messages. Press the button in the UI to automatically generate a commit message. 🔁 Summary commitollama is a privacy-focused alternative for generating commit messages, serving as a replacement for GitHub Copilot in this use case. The tool can use open-source LLMs like Llama, Mistral, and Phi3. It integrates easily into VSCode through a simple extension installation process. Users can obtain models, run the service, and effectively generate commit messages with minimal effort. 🔗 References https://github.com/ollama/ollama/issues/707 https://github.com/ollama/ollama/issues/1493","link":"/blog/tutorial_commitollama/"},{"title":"[教學] 使用 Ollama 與 OpenCommit 在本地生成提交訊息","text":"註記：此頁為由 AI（gpt-5-mini-2025-08-07）自動翻譯自英文原文，可能含有少量不準確之處。 📌 介紹 本文介紹如何將 Ollama 與 OpenCommit 結合，在本地生成提交訊息。內容包含在 Docker 容器中執行 Ollama 的概述、使用 Ollama CLI 的說明，以及如何將 Ollama 與 OpenCommit 結合以生成提交訊息。 🚀 快速開始 啟動容器 1docker run -d -v ollama:/root/.ollama -p 11434:11434 --name ollama-commit ollama/ollama:0.3.6 進入 Docker 容器 1docker exec -it ollama-commit bash 拉取模型 1ollama run gemma2:2b 開始聊天 1&gt;&gt;&gt; Send a message (/? for help) 離開聊天 輸入 /bye 離開聊天。 安裝 opencommit 1npm install -g opencommit 使用本地 ollama 伺服器生成提交訊息 1OCO_AI_PROVIDER='ollama/gemma2:2b' opencommit 輸出： 1234567891011121314151617181920212223242526┌ open-commit│◇ 1 staged files: README.md│◇ 📝 Commit message generated│└ Generated commit message:——————————————————feat(README.md): add link to Ollama website and examples of running models——————————————————│◇ Confirm the commit message?│ No│◇ Do you want to regenerate the message ?│ Yes│◇ 📝 Commit message generated│└ Generated commit message:——————————————————feat(README.md): add link to Ollama website and examples of model usage in README.md 錯誤代碼 127 123456789101112Error: llama runner process has terminated: exit status 127&gt;&gt;&gt; [GIN] 2024/08/28 - 18:43:24 | 200 | 68.455µs | 127.0.0.1 | HEAD &quot;/&quot;&gt;&gt;&gt; [GIN] 2024/08/28 - 18:43:24 | 200 | 7.845273ms | 127.0.0.1 | POST &quot;/api/show&quot;&gt;&gt;&gt; time=2024-08-28T18:43:24.392Z level=INFO source=memory.go:309 msg=&quot;offload to cpu&quot; layers.requested=-1 layers.model=33 layers.offload=0 layers.split=&quot;&quot; memory.available=&quot;[7.3 GiB]&quot; memory.required.full=&quot;5.5 GiB&quot; memory.required.partial=&quot;0 B&quot; memory.required.kv=&quot;1.0 GiB&quot; memory.required.allocations=&quot;[5.5 GiB]&quot; memory.weights.total=&quot;4.7 GiB&quot; memory.weights.repeating=&quot;4.6 GiB&quot; memory.weights.nonrepeating=&quot;105.0 MiB&quot; memory.graph.full=&quot;560.0 MiB&quot; memory.graph.partial=&quot;585.0 MiB&quot;&gt;&gt;&gt; time=2024-08-28T18:43:24.392Z level=INFO source=server.go:391 msg=&quot;starting llama server&quot; cmd=&quot;/tmp/ollama731275887/runners/cpu/ollama_llama_server --model /root/.ollama/models/blobs/sha256-ff82381e2bea77d91c1b824c7afb83f6fb73e9f7de9dda631bcdbca564aa5435 --ctx-size 8192 --batch-size 512 --embedding --log-disable --no-mmap --parallel 4 --port 33357&quot;&gt;&gt;&gt; time=2024-08-28T18:43:24.392Z level=INFO source=sched.go:450 msg=&quot;loaded runners&quot; count=1&gt;&gt;&gt; time=2024-08-28T18:43:24.393Z level=INFO source=server.go:591 msg=&quot;waiting for llama runner to start responding&quot;&gt;&gt;&gt; time=2024-08-28T18:43:24.393Z level=INFO source=server.go:625 msg=&quot;waiting for server to become available&quot; status=&quot;llm server error&quot;&gt;&gt;&gt; /tmp/ollama731275887/runners/cpu/ollama_llama_server: error while loading shared libraries: libllama.so: cannot open shared object file: No such file or directory&gt;&gt;&gt; time=2024-08-28T18:43:24.644Z level=ERROR source=sched.go:456 msg=&quot;error loading llama server&quot; error=&quot;llama runner process has terminated: exit status 127&quot;[GIN] 2024/08/28 - 18:43:24 | 500 | 266.021797ms | 127.0.0.1 | POST &quot;/api/chat&quot; 該錯誤代碼會在 Docker 映像版本高於 0.3.6 時發生。因此，您需要拉取版本為 0.3.6 的 ollama 映像並運行容器。點擊 這裡 查看討論。 🔁 重點回顧 Ollama 允許使用 AI 模型生成提交訊息。 本文詳述在 Docker 環境中設定 Ollama 的步驟。 整合 OpenCommit 可簡化使用 AI 模型生成提交訊息的流程。 使用者可以透過聊天介面與 AI 模型互動。 🔗 參考資料 https://ollama.com/models https://github.com/ollama/ollama/issues/6541","link":"/blog/tutorial-using-ollama-with-opencommit-for-local-commit-message-generation.zh-TW/"},{"title":"[Tutorial] Generate commit messages locally with Ollama and OpenCommit","text":"Note: This page is an AI-generated (gpt-5-mini-2025-08-07) translation from Traditional Chinese and may contain minor inaccuracies. Note: This page was automatically translated from the original English by AI (gpt-5-mini-2025-08-07) and may contain minor inaccuracies. 📌 Introduction This article explains how to combine Ollama and OpenCommit to generate commit messages locally. It includes an overview of running Ollama in a Docker container, instructions for using the Ollama CLI, and how to integrate Ollama with OpenCommit to generate commit messages. 🚀 Quick Start Start the container 1docker run -d -v ollama:/root/.ollama -p 11434:11434 --name ollama-commit ollama/ollama:0.3.6 Enter the Docker container 1docker exec -it ollama-commit bash Pull the model 1ollama run gemma2:2b Start chatting 1&gt;&gt;&gt; Send a message (/? for help) Exit chat Type /bye to exit the chat. Install opencommit 1npm install -g opencommit Generate commit messages using local ollama server 1OCO_AI_PROVIDER='ollama/gemma2:2b' opencommit Output: 1234567891011121314151617181920212223242526┌ open-commit│◇ 1 staged files: README.md│◇ 📝 Commit message generated│└ Generated commit message:——————————————————feat(README.md): add link to Ollama website and examples of running models——————————————————│◇ Confirm the commit message?│ No│◇ Do you want to regenerate the message ?│ Yes│◇ 📝 Commit message generated│└ Generated commit message:——————————————————feat(README.md): add link to Ollama website and examples of model usage in README.md Error code 127 123456789101112Error: llama runner process has terminated: exit status 127&gt;&gt;&gt; [GIN] 2024/08/28 - 18:43:24 | 200 | 68.455µs | 127.0.0.1 | HEAD &quot;/&quot;&gt;&gt;&gt; [GIN] 2024/08/28 - 18:43:24 | 200 | 7.845273ms | 127.0.0.1 | POST &quot;/api/show&quot;&gt;&gt;&gt; time=2024-08-28T18:43:24.392Z level=INFO source=memory.go:309 msg=&quot;offload to cpu&quot; layers.requested=-1 layers.model=33 layers.offload=0 layers.split=&quot;&quot; memory.available=&quot;[7.3 GiB]&quot; memory.required.full=&quot;5.5 GiB&quot; memory.required.partial=&quot;0 B&quot; memory.required.kv=&quot;1.0 GiB&quot; memory.required.allocations=&quot;[5.5 GiB]&quot; memory.weights.total=&quot;4.7 GiB&quot; memory.weights.repeating=&quot;4.6 GiB&quot; memory.weights.nonrepeating=&quot;105.0 MiB&quot; memory.graph.full=&quot;560.0 MiB&quot; memory.graph.partial=&quot;585.0 MiB&quot;&gt;&gt;&gt; time=2024-08-28T18:43:24.392Z level=INFO source=server.go:391 msg=&quot;starting llama server&quot; cmd=&quot;/tmp/ollama731275887/runners/cpu/ollama_llama_server --model /root/.ollama/models/blobs/sha256-ff82381e2bea77d91c1b824c7afb83f6fb73e9f7de9dda631bcdbca564aa5435 --ctx-size 8192 --batch-size 512 --embedding --log-disable --no-mmap --parallel 4 --port 33357&quot;&gt;&gt;&gt; time=2024-08-28T18:43:24.392Z level=INFO source=sched.go:450 msg=&quot;loaded runners&quot; count=1&gt;&gt;&gt; time=2024-08-28T18:43:24.393Z level=INFO source=server.go:591 msg=&quot;waiting for llama runner to start responding&quot;&gt;&gt;&gt; time=2024-08-28T18:43:24.393Z level=INFO source=server.go:625 msg=&quot;waiting for server to become available&quot; status=&quot;llm server error&quot;&gt;&gt;&gt; /tmp/ollama731275887/runners/cpu/ollama_llama_server: error while loading shared libraries: libllama.so: cannot open shared object file: No such file or directory&gt;&gt;&gt; time=2024-08-28T18:43:24.644Z level=ERROR source=sched.go:456 msg=&quot;error loading llama server&quot; error=&quot;llama runner process has terminated: exit status 127&quot;[GIN] 2024/08/28 - 18:43:24 | 500 | 266.021797ms | 127.0.0.1 | POST &quot;/api/chat&quot; This error occurs when the Docker image version is higher than 0.3.6. Therefore, you need to pull the ollama image version 0.3.6 and run the container. Click here to see the discussion. 🔁 Key takeaways Ollama allows using AI models to generate commit messages. This article details the steps to set up Ollama in a Docker environment. Integrating OpenCommit can simplify the process of using AI models to generate commit messages. Users can interact with the AI model via the chat interface. 🔗 References https://ollama.com/models https://github.com/ollama/ollama/issues/6541","link":"/blog/tutorial_ollama_opencommit/"},{"title":"[note] 安裝 Golang (PATH)","text":"註記：此頁為由 AI（gpt-5-mini-2025-08-07）自動翻譯自英文原文，可能含有少量不準確之處。 📌 介紹 這篇文章提供在 macOS 上安裝 Go 並將系統的 PATH 變數配置為包含 Go 可執行檔的逐步指南。 🚀 快速開始 使用 Homebrew 安裝 Go： 1brew install go 驗證安裝： 1ls ~/go/bin/ 暫時更新 PATH： 1export PATH=$PATH:~/go/bin 永久更新 PATH： 12echo 'export PATH=$PATH:~/go/bin' &gt;&gt; ~/.zshrcsource ~/.zshrc 🔁 回顧 本指南說明如何在 macOS 上安裝 Go 程式語言。 包含驗證步驟以檢查安裝是否成功。 提供了暫時與永久更新 PATH 環境變數的指示。","link":"/blog/note-installation-of-golang-path.zh-TW/"},{"title":"[note] Install Golang (PATH)","text":"Note: This page is an AI-generated (gpt-5-mini-2025-08-07) translation from Traditional Chinese and may contain minor inaccuracies. Note: This page was automatically translated from the original English by an AI (gpt-5-mini-2025-08-07) and may contain minor inaccuracies. 📌 Introduction This article provides a step-by-step guide to installing Go on macOS and configuring the system PATH variable to include Go executables. 🚀 Quick Start Install Go using Homebrew: 1brew install go Verify the installation: 1ls ~/go/bin/ Temporarily update PATH: 1export PATH=$PATH:~/go/bin Permanently update PATH: 12echo 'export PATH=$PATH:~/go/bin' &gt;&gt; ~/.zshrcsource ~/.zshrc 🔁 Recap This guide explains how to install the Go programming language on macOS. Includes verification steps to check if the installation succeeded. Provides instructions for temporarily and permanently updating the PATH environment variable.","link":"/blog/note_go/"},{"title":"[tutorial] 如何在 Python 中使用 psutil 監控 CPU 與記憶體使用情況","text":"註記：此頁為由 AI（gpt-5-mini-2025-08-07）自動翻譯自英文原文，可能含有少量不準確之處。 📌 介紹 本文介紹 psutil，一個開源的 Python 套件，可提供 CPU、記憶體、磁碟與網路等系統資訊。包括 psutil 的安裝、監控 CPU 與記憶體使用的實用函式，以及如何使用裝飾器將其整合到 Python 程式碼中。 🚀 快速上手 1pip install psutil psutil 中的有用函式 CPU 1234psutil.cpu_count() # get the number of CPUpsutil.cpu_percent() # get the usage of all CPUpsutil.cpu_percent(percpu=True) # get the usage of per CPUpsutil.cpu_percent(interval=1) # get the usage of all CPU in 1 second, using interval will get more robust result 記憶體 1234567info = psutil.virtual_memory()# total memoryinfo.total / 1024 / 1024 / 1024 # bytes -&gt; GB# the usage of memoryinfo.percent MacOS 1# svmem(total=25769803776, available=7726628864, percent=70.0, used=9045114880, free=791134208, active=6949453824, inactive=6915768320, wired=2095661056) Ubuntu 12# will get more information like buffers, cached etc..# svmem(total=33541988352, available=25899790336, percent=22.8, used=7087771648, free=2703233024, active=15287881728, inactive=14264188928, buffers=965103616, cached=22785880064, shared=8265728, slab=904495104) 如何將 psutil 整合到程式中？ 我們可以使用裝飾器來監控每個函式的 CPU 與記憶體使用情況。 1234567891011121314151617import psutildef monitor(func): def wrapper(*args, **kwargs): process = psutil.Process() cur_func_pid = process.pid process = psutil.Process(cur_func_pid) func(*args, **kwargs) cpu_usage = process.cpu_percent(interval=0.01) memory_usage = process.memory_info().rss / 1024 / 1024 / 1024 # bytes -&gt; GB print(f&quot;CPU usage: {cpu_usage}%&quot;) print(f&quot;Memory usage: {memory_usage}GB&quot;) return wrapper 範例 12345678@monitordef example_code(): import numpy as np for i in range(100): np.random.rand(100, 100, 100)example_code() 🔁 回顧 psutil 是一個用於系統監控的開源 Python 套件。 它提供了取得 CPU 與記憶體使用資訊的實用函式。 你可以使用裝飾器輕鬆地監控 Python 函式的 CPU 與記憶體使用情況。 🔗 參考資料 Python常用库之psutil使用指南 简单介绍psutil库（virtual_memory()、cpu_percent() 使用 psutil 模組進行 Python 系統監控與分析 Python 中的 Psutil 模組 Oracle Machine Learning for Python 的管理任務","link":"/blog/tutorial-how-to-use-psutil-to-monitor-cpu-and-memory-usage-in-python.zh-TW/"},{"title":"[tutorial] How to monitor CPU and memory usage in Python with psutil","text":"Note: This page is an AI-generated (gpt-5-mini-2025-08-07) translation from Traditional Chinese and may contain minor inaccuracies. Note: This page was automatically translated from the original English by AI (gpt-5-mini-2025-08-07) and may contain minor inaccuracies. 📌 Introduction This article introduces psutil, an open-source Python package that provides system information such as CPU, memory, disk, and network. It covers installing psutil, handy functions for monitoring CPU and memory usage, and how to use a decorator to integrate it into Python code. 🚀 Quick Start 1pip install psutil Useful functions in psutil CPU 1234psutil.cpu_count() # get the number of CPUpsutil.cpu_percent() # get the usage of all CPUpsutil.cpu_percent(percpu=True) # get the usage of per CPUpsutil.cpu_percent(interval=1) # get the usage of all CPU in 1 second, using interval will get more robust result Memory 1234567info = psutil.virtual_memory()# total memoryinfo.total / 1024 / 1024 / 1024 # bytes -&gt; GB# the usage of memoryinfo.percent MacOS 1# svmem(total=25769803776, available=7726628864, percent=70.0, used=9045114880, free=791134208, active=6949453824, inactive=6915768320, wired=2095661056) Ubuntu 12# will get more information like buffers, cached etc..# svmem(total=33541988352, available=25899790336, percent=22.8, used=7087771648, free=2703233024, active=15287881728, inactive=14264188928, buffers=965103616, cached=22785880064, shared=8265728, slab=904495104) How to integrate psutil into your program? We can use a decorator to monitor CPU and memory usage for each function. 1234567891011121314151617import psutildef monitor(func): def wrapper(*args, **kwargs): process = psutil.Process() cur_func_pid = process.pid process = psutil.Process(cur_func_pid) func(*args, **kwargs) cpu_usage = process.cpu_percent(interval=0.01) memory_usage = process.memory_info().rss / 1024 / 1024 / 1024 # bytes -&gt; GB print(f&quot;CPU usage: {cpu_usage}%&quot;) print(f&quot;Memory usage: {memory_usage}GB&quot;) return wrapper Example 12345678@monitordef example_code(): import numpy as np for i in range(100): np.random.rand(100, 100, 100)example_code() 🔁 Recap psutil is an open-source Python package for system monitoring. It provides handy functions to obtain CPU and memory usage information. You can easily monitor a Python function’s CPU and memory usage using a decorator. 🔗 References Python常用库之psutil使用指南 简单介绍psutil库（virtual_memory()、cpu_percent() 使用 psutil 模組進行 Python 系統監控與分析 Python 中的 Psutil 模組 Oracle Machine Learning for Python 的管理任務","link":"/blog/tutorial_psutil/"},{"title":"[tutorial] 建立你自己的 Python 套件","text":"註記：此頁為由 AI（gpt-5-mini-2025-08-07）自動翻譯自英文原文，可能含有少量不準確之處。 📌 介紹 建立自己的 Python 套件有助於維護大型專案，因為它能管理原本分散在各個目錄的程式碼。 🚀 快速開始 建立一個 setup.py 檔案： 123from setuptools import setup, find_packagessetup(name=&quot;ntust_simslab&quot;, version=&quot;0.13&quot;, packages=find_packages()) 建立一個 pyproject.toml 檔案： 123456789101112131415[tool.poetry]name = &quot;ntust_simslab&quot;version = &quot;0.13&quot;description = &quot;A simple example for building a Python package.&quot;authors = [&quot;Hsiang-Jen Li &lt;hsiangjenli@gmail.com&gt;&quot;]readme = &quot;README.md&quot;packages = [{include = &quot;ntust_simslab&quot;}][tool.poetry.dependencies]python = &quot;^3.8&quot;requests = &quot;^2.28.2&quot;[build-system]requires = [&quot;poetry-core&quot;]build-backend = &quot;poetry.core.masonry.api&quot; 在 https://pypi.org/ 註冊 PyPI 帳號以發佈你的套件。 🔁 回顧 建立 Python 套件有助於在較大的專案中維持程式碼的組織。 使用 setup.py 是傳統做法，而 pyproject.toml 則是使用 Poetry 的現代方式。 要發佈套件，擁有 PyPI 帳號是必要的。 🔗 參考資料 https://github.com/NTUST-SiMS-Lab/tutorial-simple-pypkg https://pypi.org/","link":"/blog/tutorial-build-your-own-python-package.zh-TW/"},{"title":"[tutorial] Create Your Own Python Package","text":"Note: This page is an AI-generated (gpt-5-mini-2025-08-07) translation from Traditional Chinese and may contain minor inaccuracies. Note: This page was automatically translated from the original English by AI (gpt-5-mini-2025-08-07) and may contain minor inaccuracies. 📌 Introduction Creating your own Python package helps maintain large projects because it organizes code that was previously scattered across directories. 🚀 Quick Start Create a setup.py file: 123from setuptools import setup, find_packagessetup(name=&quot;ntust_simslab&quot;, version=&quot;0.13&quot;, packages=find_packages()) Create a pyproject.toml file: 123456789101112131415[tool.poetry]name = &quot;ntust_simslab&quot;version = &quot;0.13&quot;description = &quot;A simple example for building a Python package.&quot;authors = [&quot;Hsiang-Jen Li &lt;hsiangjenli@gmail.com&gt;&quot;]readme = &quot;README.md&quot;packages = [{include = &quot;ntust_simslab&quot;}][tool.poetry.dependencies]python = &quot;^3.8&quot;requests = &quot;^2.28.2&quot;[build-system]requires = [&quot;poetry-core&quot;]build-backend = &quot;poetry.core.masonry.api&quot; Register a PyPI account at https://pypi.org/ to publish your package. 🔁 Recap Creating a Python package helps keep code organized in larger projects. Using setup.py is the traditional approach, while pyproject.toml is the modern approach when using Poetry. A PyPI account is required to publish packages. 🔗 References https://github.com/NTUST-SiMS-Lab/tutorial-simple-pypkg https://pypi.org/","link":"/blog/tutorial_pypi_pkg/"},{"title":"[note] 在 Mac 上使用 Multipass 執行 Ubuntu VM","text":"註記：此頁為由 AI（gpt-5-mini-2025-08-07）自動翻譯自英文原文，可能含有少量不準確之處。 📌 介紹 Multipass 是 Canonical 提供的一個簡單工具，用於輕鬆執行 Ubuntu 虛擬機。 🚀 快速開始 1brew install qemu 123multipass launch 20.04 -c 8 -m 8G -d 100Gmultipass listmultipass shell your_vname 12sudo apt updatesudo apt install neofetch 1neofetch 安裝桌面環境 1sudo apt install ubuntu-desktop xrdp 🔁 回顧 學會如何在 macOS 上使用 Multipass 快速啟動與管理 Ubuntu 虛擬機 了解如何分配資源並透過 shell 存取虛擬機 🔗 參考資料 canonical/multipass Multipass — 如 Docker 般的虛擬機 在 M1 或 M2 Mac 上使用 MULTI PASS 安裝並執行帶 GUI 的 Ubuntu 久違的在 Mac M2 上使用 Ubuntu","link":"/blog/note-run-ubuntu-vms-on-your-mac-using-multipass.zh-TW/"},{"title":"[note] Running Ubuntu VM on Mac with Multipass","text":"Note: This page is an AI-generated (gpt-5-mini-2025-08-07) translation from Traditional Chinese and may contain minor inaccuracies. Note: This page was automatically translated from the original English by AI (gpt-5-mini-2025-08-07) and may contain minor inaccuracies. 📌 Introduction Multipass is a simple tool provided by Canonical for easily running Ubuntu virtual machines. 🚀 Quick Start 1brew install qemu 123multipass launch 20.04 -c 8 -m 8G -d 100Gmultipass listmultipass shell your_vname 12sudo apt updatesudo apt install neofetch 1neofetch Install Desktop Environment 1sudo apt install ubuntu-desktop xrdp 🔁 Recap Learn how to quickly launch and manage Ubuntu VMs on macOS using Multipass Understand how to allocate resources and access the VM via shell 🔗 References canonical/multipass Multipass — 如 Docker 般的虛擬機 在 M1 或 M2 Mac 上使用 MULTI PASS 安裝並執行帶 GUI 的 Ubuntu 久違的在 Mac M2 上使用 Ubuntu","link":"/blog/note_multipass_ubuntu/"},{"title":"[note] 安裝 GitHub Copilot CLI 與 使用指南","text":"註記：此頁為由 AI（gpt-5-mini-2025-08-07）自動翻譯自英文原文，可能含有少量不準確之處。 📌 介紹 本文說明如何安裝與使用 GitHub Copilot CLI。內容包含使用 npm 的安裝流程、在 Windows 上設定執行政策，並示範如何使用 CLI 取得特定 git 指令的幫助。 🚀 快速開始 Install GitHub Copilot CLI:1npm install -g @githubnext/github-copilot-cli Set execution policy for PowerShell:1Set-ExecutionPolicy RemoteSigned -Scope CurrentUser Authenticate with GitHub Copilot CLI:1github-copilot-cli auth Test the CLI:1github-copilot-cli what-the-shell how to delete branch 輸出： ──────────────────── Command ──────────────────── git branch -d ────────────────── 說明 ────────────────── ○ git branch 用於列出分支。 ◆ -d 會刪除分支 。 ✅ 執行此指令 📝 修改查詢 ❌ 取消 🔁 重點回顧 可以透過 npm 輕鬆安裝 GitHub Copilot CLI。 Windows 使用者需要設定執行政策以允許執行腳本。 該 CLI 可協助 git 指令，並輸出指令與對應說明。","link":"/blog/note-installing-github-copilot-cli-and-usage-guide.zh-TW/"},{"title":"[note] Install GitHub Copilot CLI and Usage Guide","text":"Note: This page is an AI-generated (gpt-5-mini-2025-08-07) translation from Traditional Chinese and may contain minor inaccuracies. Note: This page was automatically translated from the original English by AI (gpt-5-mini-2025-08-07) and may contain minor inaccuracies. 📌 Introduction This article explains how to install and use the GitHub Copilot CLI. It includes the installation process using npm, setting the execution policy on Windows, and demonstrates how to use the CLI to get help for specific git commands. 🚀 Quick Start Install GitHub Copilot CLI:1npm install -g @githubnext/github-copilot-cli Set execution policy for PowerShell:1Set-ExecutionPolicy RemoteSigned -Scope CurrentUser Authenticate with GitHub Copilot CLI:1github-copilot-cli auth Test the CLI:1github-copilot-cli what-the-shell how to delete branch Output: ──────────────────── Command ──────────────────── git branch -d ────────────────── Explanation ────────────────── ○ git branch is used to list branches. ◆ -d will delete the branch . ✅ Run this command 📝 Modify query ❌ Cancel 🔁 Key Takeaways The GitHub Copilot CLI can be easily installed via npm. Windows users need to set the execution policy to allow running scripts. The CLI can assist with git commands and outputs the command along with explanations.","link":"/blog/note_installation_of_github_cli/"},{"title":"[note] 使用 Markmap 高效製作心智圖：基於 Markdown 的 VS Code 延伸套件","text":"註記：此頁為由 AI（gpt-5-mini-2025-08-07）自動翻譯自英文原文，可能含有少量不準確之處。 📌 介紹 這篇文章說明如何使用 Visual Studio Code 的 Markmap 延伸套件，將 Markdown 語法轉換為心智圖，便於有效組織與視覺化想法和資訊。 🚀 快速開始 在 VS Code 安裝此擴充套件 123456789101112131415161718192021# **我的學歷**## 高職### KFHS### 應用外語## 學士### NKUST### 貨幣與銀行系## 碩士### NTUST### 工業管理系#### 資料科學#### 區塊鏈導論及其應用#### 工業物聯網與作業技術安全#### 人工智慧技術與商業應用#### 機器學習#### 企業永續管理#### 生產管理 預覽 🔁 重點回顧 使用 Markmap 延伸套件將 Markdown 文件視覺化為互動式心智圖。 安裝簡單，可建立內容的結構化表示。 預覽功能提供視覺化呈現，增進理解。","link":"/blog/note-efficient-mind-mapping-with-markmap-a-markdown-based-vscode-extension.zh-TW/"},{"title":"[note] Using Markmap to Efficiently Create Mind Maps: A Markdown-based VS Code Extension","text":"Note: This page is an AI-generated (gpt-5-mini-2025-08-07) translation from Traditional Chinese and may contain minor inaccuracies. Note: This page was automatically translated from the original English by AI (gpt-5-mini-2025-08-07) and may contain minor inaccuracies. 📌 Introduction This article explains how to use Visual Studio Code’s Markmap extension to convert Markdown syntax into mind maps, facilitating effective organization and visualization of ideas and information. 🚀 Quick Start Install this extension in VS Code 123456789101112131415161718192021# **My Education**## Vocational High School### KFHS### Applied Foreign Languages## Bachelor's### NKUST### Department of Money and Banking## Master's### NTUST### Department of Industrial Management#### Data Science#### Introduction to Blockchain and Its Applications#### Industrial IoT and Operational Technology Security#### AI Technologies and Business Applications#### Machine Learning#### Corporate Sustainability Management#### Production Management Preview 🔁 Key Takeaways Visualize Markdown documents as interactive mind maps using the Markmap extension. Easy installation; enables structured representation of content. The preview feature provides a visual presentation to enhance understanding.","link":"/blog/note_markmap/"},{"title":"[教學] 在 Ubuntu 上安裝 Miniconda","text":"註記：此頁為由 AI（gpt-5-mini-2025-08-07）自動翻譯自英文原文，可能含有少量不準確之處。 📌 介紹 本文詳述在 Ubuntu 上安裝 Miniconda 所需的步驟，包括下載安裝程式並設定初始環境。 🚀 快速開始 1sudo wget -c https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh 1sudo chmod +x Miniconda3-latest-Linux-x86_64.sh 1./Miniconda3-latest-Linux-x86_64.sh 12conda activateconda env list 🔁 重點回顧 Miniconda 是 conda 的精簡安裝程式，適合用來管理 Python 的環境與套件。 安裝過程包括下載安裝程式、將其設為可執行，並執行它來設定 Miniconda。 安裝完成後，你可以使用 conda 指令輕鬆建立與管理 Python 環境。 🔗 參考資料 https://medium.com/featurepreneur/setting-up-miniconda-on-ubuntu-4bf6bece6f9b","link":"/blog/tutorial-setting-up-miniconda-on-ubuntu.zh-TW/"},{"title":"[Tutorial] Installing Miniconda on Ubuntu","text":"Note: This page is an AI-generated (gpt-5-mini-2025-08-07) translation from Traditional Chinese and may contain minor inaccuracies. Note: This page was automatically translated from the original English by AI (gpt-5-mini-2025-08-07) and may contain minor inaccuracies. 📌 Introduction This article details the steps required to install Miniconda on Ubuntu, including downloading the installer and setting up the initial environment. 🚀 Quick Start 1sudo wget -c https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh 1sudo chmod +x Miniconda3-latest-Linux-x86_64.sh 1./Miniconda3-latest-Linux-x86_64.sh 12conda activateconda env list 🔁 Recap Miniconda is a minimal installer for conda, suitable for managing Python environments and packages. The installation process includes downloading the installer, making it executable, and running it to set up Miniconda. After installation, you can easily create and manage Python environments using conda commands. 🔗 References https://medium.com/featurepreneur/setting-up-miniconda-on-ubuntu-4bf6bece6f9b","link":"/blog/tutorial_ubuntu_miniconda/"},{"title":"[筆記] Gatsby 使用","text":"註記：此頁為由 AI（gpt-5-mini-2025-08-07）自動翻譯自英文原文，可能含有少量不準確之處。 📌 介紹 這篇文章提供如何安裝 Gatsby 並使用 starter 主題建立新的 Gatsby 網站的指南。涵蓋安裝步驟、建立 Gatsby 網站的指令，以及用於排解常見錯誤的連結。 🚀 快速開始 安裝 Gatsby 12npm install -g gatsby-cligatsby --version gatsby-starter-blog 123gatsby new hjl https://github.com/gatsbyjs/gatsby-starter-blogcd hjlgatsby develop gatsby-starter-julia 12gatsby new RN https://github.com/niklasmtj/gatsby-starter-juliacd rn 使用舊版 peer 依賴 1--legacy-peer-deps 🔁 回顧 使用 npm 安裝 Gatsby CLI 非常簡單，可使用指令 npm install -g gatsby-cli。 安裝後，可以檢查已安裝的 Gatsby 版本。 要建立新的 Gatsby 網站，可以使用多種 starter 主題，例如 gatsby-starter-blog 和 gatsby-starter-julia。 與 npm 與 Gatsby 相關的常見錯誤已有文章中提供的多個連結詳述。 🔗 參考資料 指令（Gatsby CLI） npm WARN old lockfile：package-lock.json 檔案是用舊版 npm 建立 錯誤：指令以退出代碼 1 失敗：npm install #27548 npm-upgrade","link":"/blog/note-gatsby-usage.zh-TW/"},{"title":"[Notes] Using Gatsby","text":"Note: This page is an AI-generated (gpt-5-mini-2025-08-07) translation from Traditional Chinese and may contain minor inaccuracies. Note: This page was automatically translated from the original English by an AI (gpt-5-mini-2025-08-07) and may contain minor inaccuracies. 📌 Introduction This article provides a guide on how to install Gatsby and create a new Gatsby site using starter themes. It covers installation steps, commands to create a Gatsby site, and links for troubleshooting common errors. 🚀 Quick Start Install Gatsby 12npm install -g gatsby-cligatsby --version gatsby-starter-blog 123gatsby new hjl https://github.com/gatsbyjs/gatsby-starter-blogcd hjlgatsby develop gatsby-starter-julia 12gatsby new RN https://github.com/niklasmtj/gatsby-starter-juliacd rn Using legacy peer dependencies 1--legacy-peer-deps 🔁 Recap Installing the Gatsby CLI with npm is very simple; you can use the command npm install -g gatsby-cli. After installation, you can check the installed Gatsby version. To create a new Gatsby site, you can use various starter themes, such as gatsby-starter-blog and gatsby-starter-julia. Common npm and Gatsby-related errors are detailed via multiple links provided in the article. 🔗 References Commands (Gatsby CLI) npm WARN old lockfile: the package-lock.json file was created with an old version of npm Error: command failed with exit code 1: npm install #27548 npm-upgrade","link":"/blog/note_gatsby/"}],"tags":[{"name":"devops","slug":"devops","link":"/blog/tags/devops/"},{"name":"sa","slug":"sa","link":"/blog/tags/sa/"},{"name":"ea","slug":"ea","link":"/blog/tags/ea/"},{"name":"llm","slug":"llm","link":"/blog/tags/llm/"},{"name":"docker","slug":"docker","link":"/blog/tags/docker/"},{"name":"vs-code","slug":"vs-code","link":"/blog/tags/vs-code/"},{"name":"note","slug":"note","link":"/blog/tags/note/"},{"name":"python","slug":"python","link":"/blog/tags/python/"},{"name":"linux","slug":"linux","link":"/blog/tags/linux/"},{"name":"static-site","slug":"static-site","link":"/blog/tags/static-site/"},{"name":"gatsby","slug":"gatsby","link":"/blog/tags/gatsby/"},{"name":"go","slug":"go","link":"/blog/tags/go/"},{"name":"markdown","slug":"markdown","link":"/blog/tags/markdown/"},{"name":"ngrok","slug":"ngrok","link":"/blog/tags/ngrok/"},{"name":"snap","slug":"snap","link":"/blog/tags/snap/"},{"name":"permission denied","slug":"permission-denied","link":"/blog/tags/permission-denied/"},{"name":"git","slug":"git","link":"/blog/tags/git/"},{"name":"pip","slug":"pip","link":"/blog/tags/pip/"},{"name":"ubuntu","slug":"ubuntu","link":"/blog/tags/ubuntu/"},{"name":"windows","slug":"windows","link":"/blog/tags/windows/"},{"name":"intel rst","slug":"intel-rst","link":"/blog/tags/intel-rst/"},{"name":"mlsecops","slug":"mlsecops","link":"/blog/tags/mlsecops/"},{"name":"aws","slug":"aws","link":"/blog/tags/aws/"},{"name":"lambda","slug":"lambda","link":"/blog/tags/lambda/"},{"name":"ollama","slug":"ollama","link":"/blog/tags/ollama/"},{"name":"picgo","slug":"picgo","link":"/blog/tags/picgo/"},{"name":"mailgun","slug":"mailgun","link":"/blog/tags/mailgun/"}],"categories":[],"pages":[{"title":"","text":"@import url('https://fonts.googleapis.com/css2?family=Lato:ital,wght@0,100;0,300;0,400;0,700;0,900;1,100;1,300;1,400;1,700;1,900&display=swap'); @font-face { font-family: 'jf-openhuninn'; src: url('https://hsiangjenli.github.io/static/font/jf-openhuninn/jf-openhuninn.ttf'); } :root { --global-text-color: #4e4e4e; } body { font-family: \"Lato\", 'jf-openhuninn', \"Verdana\" !important; < HEAD ======= } .section { background-color: #e1e1e1 !important; >>>>>>> ab6907511f947861e6203c41a9f40d03cc1697aa } strong { color: var(--global-text-color) !important; font-weight: 700 !important; } em { color: var(--global-text-color) !important; } .title { font-weight: bolder !important; color: var(--global-text-color) !important; } .content h1, .content h2, .content h3, .content h4, .content h5, .content h6 { color: var(--global-text-color) !important; font-weight: bolder !important; } .content h1, .card-content h2 { padding-bottom: .75rem !important; border-bottom: 1px solid #e4e4e7 !important; } .card-content .article { color: var(--global-text-color) !important; } .navbar-item { color: var(--global-text-color) !important; font-weight: 700 !important; } .highlight-body { background-color: #eaeaea !important; }","link":"/blog/css/custom.css"}]}